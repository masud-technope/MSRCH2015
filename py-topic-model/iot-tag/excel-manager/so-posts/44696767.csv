thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44696767,44696767,null,1,2,Thu Jun 22 10:27:00 EDT 2017,3904529,"<p>I have set up an Kaa server and developed an application with the SDK. but application doesn't send Event massages.	this application should send license plate of the cars entered parking to server and also send an event to the another application(receiver app).	the application send data to server but doesn't send events.</p>		<p>whats the problem?</p>		<p>this is my code:</p>		<pre><code>static void callback(void *context)	{	    kaa_string_t plate;	    kaa_user_log_record_t *log_record = kaa_logging_data_collection_create();	    plate.data = "some license plate";	    log_record-&gt;plate = &amp;plate;	    kaa_logging_add_record(kaa_client_get_context(context)-&gt;log_collector, log_record, NULL);	    printf("%s uploaded\n", plate.data);		    kaa_plate_detection_event_plate_event_t *plate_event = kaa_plate_detection_event_plate_event_create();	    plate_event-&gt;plate = &amp;plate;	    kaa_error_t error_code = kaa_event_manager_send_kaa_plate_detection_event_plate_event(	            kaa_client_get_context(context)-&gt;event_manager, plate_event, NULL);	    //plate_event-&gt;destroy(plate_event);	    printf("%s event sent\n", plate.data);	}	</code></pre>	"
44696767,76379526,44696767,3,0,Thu Jun 22 11:42:00 EDT 2017,6032010,"Not sure what's the implementation of `kaa_event_manager_send_kaa_plate_detection_event_plate_event()` but eventually `plate_event` should be serialized before it's being sent. Otherwise, `plate_event->plate` will just contain an address on the stack, which is useless. Can you tell anything about the serialization?"
44696767,76433472,44696767,3,0,Fri Jun 23 15:57:00 EDT 2017,6032010,"@ParhamAlvani or pesehr - Is the send function synchronous or asynchronous function? Is it blocking?"
44696767,76377144,44696767,3,0,Thu Jun 22 10:43:00 EDT 2017,6032010,"What's the error you're getting? Does your program halt? crash? Did you try to debug it?"
44696767,76377282,44696767,3,0,Thu Jun 22 10:46:00 EDT 2017,3904529,"not crash or halt. the program doesn't send events. I have tried to debug it but every things was OK."
44696767,76377444,44696767,3,0,Thu Jun 22 10:50:00 EDT 2017,6032010,"What's the type of `plate_event->plate`?"
44696767,76377753,44696767,3,0,Thu Jun 22 10:59:00 EDT 2017,3904529,"that's a pointer, kaa_string_t*"
44696767,76597774,44696767,3,0,Wed Jun 28 17:14:00 EDT 2017,3904529,"@SHG asynchronous"
44696767,76408479,44696767,3,0,Fri Jun 23 04:26:00 EDT 2017,4242097,"kaa get your event structure and type and then generate these methods for you, so I think it handle serialization by it self. @SHG"
44696767,44816750,44696767,2,1,Thu Jun 29 05:07:00 EDT 2017,6032010,"<h2>Problem Description</h2>		<p>In the beginning of <code>callback()</code> you're defining <code>kaa_string_t plate;</code> ==> 	It means that its memory is allocated on the stack.</p>		<p>Later in the same scope, you're creating a pointer to <code>plate_event</code>, and it will be used as argument to the event that you want to send.</p>		<p>Before you're sending the event, you're assigning <code>plate_event-&gt;plate = &amp;plate</code>. It means that <code>plate_event-&gt;plate</code> is now pointing to an address <strong>on the stack</strong>.</p>		<p>Then, (according to what you wrote in the comments) you're sending the event using an <strong>asynchronous function</strong>. It means that the thread that is executing this function is not waiting for the message to be really sent - that's the meaning of an asynchronous function. Something else (probably a different thread, depending on the implementation of the send_event function) will take care of the sending. Therefore, it's not guarenteed that the message is sent before the next lines of code are executed.</p>		<p>In your case it's probable that before the message was sent, the scope of <code>callback()</code> ended. Therefore the memory of this scope is automatically freed and invalid from now, including <code>kaa_string_t plate</code>. Then at some point, the asynchronous sending is executing but it relies on an invalid memory because now <code>plate_event-&gt;plate</code> is <strong>pointing to a memory that was already freed</strong>.</p>		<h2>Possible solution</h2>		<p>Instead of allocating <code>kaa_string_t plate</code> on the stack, allocate it on the heap (<code>malloc</code>). Then the memory is valid until you free it yourself, when you're sure the message was already sent.</p>		<p>Something like that:</p>		<pre><code>kaa_string_t *plate = malloc(sizeof(kaa_string_t));	strncpy(plate, "some license plate", sizeof(kaa_string_t));	...	// Now it's safe to do this:	plate_event-&gt;plate = plate;	// Sending event code	...	</code></pre>	"
