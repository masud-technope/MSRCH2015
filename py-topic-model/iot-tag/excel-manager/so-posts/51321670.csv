thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
51321670,51321670,null,1,1,Fri Jul 13 09:14:00 EDT 2018,10075116,"<p>Is it possible to make Mosquito Mqtt and RTI DDS to talk to each other? </p>		<p>I want my Mqtt subscriber to subscribe data from DDS publisher or vice-versa.</p>	"
51321670,51332547,51321670,2,0,Fri Jul 13 20:41:00 EDT 2018,504554,"<p>No, you will have to write your own bridge</p>	"
51321670,89664890,51332547,3,0,Sun Jul 15 06:42:00 EDT 2018,10075116,"Thanks for the reply. Just to clarify, i created a c++ code which will either call my dds publisher/subscriber depending on the case as depicted below:    Mqtt sub-> Mqtt Publisher ->[C++ Code(dds pub/sub)] -> DDS Publisher. Is this correct?"
51321670,89767763,51332547,3,0,Wed Jul 18 09:29:00 EDT 2018,10075116,"Thanks a lot for the reply. Yes i made a mistake , the arrows are reversed. I achieved what i wanted by writing a simple c++ code in the DDS subscriber code,  which on subscribing data,  publishes data to MQtt subscriber client. :)"
51321670,89758095,51332547,3,0,Wed Jul 18 03:37:00 EDT 2018,352920,"No... MQTT publisher sends, the MQTT subscriber receives, format shifts the data into a DDS type and then publishes it on a DDS domain, to be received by a DDS subscriber.  You appear to have 'pub' and 'sub' mixed up or your arrows backwards.  Reverse is DDS publisher writes, subscriber reads and format shifts the data into an MQTT message, publishes it and the MQTT subscriber receives it.  It is not as difficult as it appears, if you understand both methodologies."
51321670,51957454,51321670,2,0,Tue Aug 21 22:18:00 EDT 2018,352920,"<p>I'm moving my comment from hardilib's response into its own answer, rather than leave it buried in the comments.  </p>		<ul>	<li>You have an MQTT queue, that has publishers and subscribers.</li>	<li>You have a DDS topic, that has DataWriters and DataReaders.</li>	</ul>		<p>In order for a "DDS DataWriter to talk to an MQTT subscriber", or for an "MQTT publisher to talk to DDS DataReaders", you need to implement a bridge application that:</p>		<p>1) Subscribes to the MQTT message queue (or DDS Topic).  </p>		<p>2) Translates ("format shifts") the data from the MQTT message object (or DDS sample), to a DDS sample (or MQTT message object).</p>		<p>3) Writes the data onto a DDS topic using a configured DDS DataWriter instance (or writes the data onto the MQTT message queue).</p>		<p>If the two infrastructures are using effectively the same data Type (defined in IDL or so), then it is straightforward.  </p>		<p>Best-case scenario is that you can implement a class that has all the necessary methods to act as both a message instance (returned by the MQTT reader, or written by an MQTT writer), and a DDS Type sample instance (that can be accepted by the DataWriter or DataReader) at the same time.  In this case, you pend on the DataReader until you get a new sample, and immediately call the MQTT writer with the received samples.  Or, you pend on the MQTT queue, accept the incoming messages, and then immediately call the DataWriter to write the MQTT message you just received using a DDS DataWriter.</p>		<p>Worst-case scenario is that they are entirely different types, in which case you need to write a pair of translate methods that understand the structure of both what was read, and what needs to be written.</p>		<p>Reality will be someplace in the middle. It gets harder if the MQTT type is just defined as simply an "ascii string" of variable length, in which case your translate methods need to be able to marshal (serialize/deserialize) the data into and out of DDS.</p>	"
