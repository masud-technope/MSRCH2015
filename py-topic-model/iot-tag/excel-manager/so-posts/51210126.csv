thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
51210126,51210126,null,1,1,Fri Jul 06 12:06:00 EDT 2018,4958910,"<p>I would like some help to find the best way to code a Raspberry python program.</p>		<p>In this program, I need to monitor several values coming from various sensors connected to the raspberry, and interact with these values from a pyqt GUI. The GUI and the sensors drivers have to be completely separated.</p>		<p>To do that, I was considering to make and use a "Variable Manager" object between the GUI and the sensors, as a "buffer" or something like that. With the use of threads and locks, the sensors would update continuously the Variable Manager (with while loops in the corresponding drivers), while the GUI would query certains values whenever I need.</p>		<p>It would be also nice to be able to send some commands to the sensors from the gui but I don't know how to do that in this configuration.</p>		<p>Do you think that this could work correctly ? Is there any other way more efficient / more adapted to do that ?</p>		<p>Thank you a lot in advance ! </p>	"
51210126,51214257,51210126,2,1,Fri Jul 06 16:16:00 EDT 2018,3579379,"<p>I would do it like this:</p>		<p>[Physical Sensors] --> [Python Sensor Monitor] --> [PubNub / similar]</p>		<pre><code># Not tested, probably not good	from threading import Thread	from pubnub import PubNub		class SensorMonitor(threading.Thread):	  def __init__(self):	    self.pubnub = PubNub("demo", "demo")	    self.switch = True		  def _on_receive(self, sensor_data):	    # can also do async() with a callback - https://www.pubnub.com/docs/python/data-streams-publish-and-subscribe	    self.pubnub.publish().channel('raw_data').message(sensor_data).sync()		  @staticmethod	  def _poll_sensor(address):	    data = get_sensor_data(address)	    return data		  def run(self):	    while self.switch:	      _data = poll_sensor('my_address')	      self._on_receive(_data)	      time.sleep(1)		  def terminate(self):	    self.switch = False		monitor = SensorMonitor()	monitor.start()	</code></pre>		<p>Then your GUI can use a PubNub consumer to get the data as it's streaming and inspect/do stuff. You can use JS or Python here!</p>	"
51210126,89409499,51214257,3,0,Fri Jul 06 16:19:00 EDT 2018,3579379,"As far as commands to the sensor - you can send THOSE directly to the PubNub system from the GUI and have Python read them and execute in real time. You would add a subscription in the `__init__` block to your new `sensor_config` channel and a callback for what to do with the config messages."
