thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
39956118,39956118,null,1,3,Mon Oct 10 10:22:00 EDT 2016,3584476,"<p>I am wondering how one creates many "things" in the AWS IoT solution via API without using the AWS web interface since this is not realistic in case I want thousands or millions of things. I guess you could write some script utilizing the "aws" client described here "<a href="http://docs.aws.amazon.com/iot/latest/developerguide/thing-registry.html" rel="nofollow">http://docs.aws.amazon.com/iot/latest/developerguide/thing-registry.html</a>" but thats not optimal if I want to control it from another service.</p>		<p>I assumed there would be a RESTish API to do this but it doesn't seem like it if I read the docs: <em>"You use the AWS IoT console or the AWS CLI to interact with the registry."</em></p>		<p>Anyone who created thousands/millions of things - how did you interact with AWS IoT?</p>	"
39956118,39956889,39956118,2,2,Mon Oct 10 11:08:00 EDT 2016,3584476,"<p>Ok, so I found it. Here it is possible to manage all the AWS IoT things:</p>		<p><a href="http://docs.aws.amazon.com/iot/latest/apireference/API_Operations.html" rel="nofollow">http://docs.aws.amazon.com/iot/latest/apireference/API_Operations.html</a></p>	"
39956118,40712586,39956118,2,1,Mon Nov 21 04:06:00 EST 2016,1315738,"<p>Another interesting way to do this is to use Just-in-Time registration - basically you upload the CA certificate that you used to sign keys while manufacturing.</p>		<p>This has some awesome advantages -</p>		<ul>	<li>Your thing won't be created till your device first tries to connect to AWS IoT. So no blanks on your AWS account.</li>	<li>You won't have to mix your AWS IoT thing creation with the manufacturing process. Which is great because you don't want to give your Chinese (most likely scenario) manufacturers direct access to your AWS account</li>	</ul>		<p><a href="https://aws.amazon.com/blogs/iot/just-in-time-registration-of-device-certificates-on-aws-iot/" rel="nofollow noreferrer">More about this</a></p>	"
39956118,45429013,39956118,2,2,Tue Aug 01 04:31:00 EDT 2017,1117046,"<p>anujdeshpande has given some headsup on this area. </p>		<p>"Automatically" means you can look at the following steps:</p>		<ol>	<li>When do you want to create a thing automatically?  What is that triggers that create-thing process?</li>	<li>Check this <a href="https://aws.amazon.com/blogs/aws/new-just-in-time-certificate-registration-for-aws-iot/" rel="nofollow noreferrer">link</a>  for Just In Time registration of the devices</li>	<li>You can create a Lambda function mapped to the AWS API Gateway which can invoke the AWS-IOT SDK to create a thing.</li>	<li>Look at this <a href="https://aws.amazon.com/blogs/compute/implementing-a-serverless-aws-iot-backend-with-aws-lambda-and-amazon-dynamodb/" rel="nofollow noreferrer">page</a> where they have created 50+ things using Javascript using aws-sdk library using serverless architecture approach    </li>	</ol>	"
39956118,47011706,39956118,2,1,Mon Oct 30 09:23:00 EDT 2017,7019834,"<p>Link below is an example of creating 50 Iot devices, and implementing a Serverless AWS IoT Backend with AWS Lambda and Amazon DynamoDB. You can vary the devices to the number you like; It is done using the earlier version of AWS Iot Platform. Have a look.</p>		<p><a href="https://aws.amazon.com/blogs/compute/implementing-a-serverless-aws-iot-backend-with-aws-lambda-and-amazon-dynamodb/" rel="nofollow noreferrer">https://aws.amazon.com/blogs/compute/implementing-a-serverless-aws-iot-backend-with-aws-lambda-and-amazon-dynamodb/</a></p>		<p>Here is the code to create 50 Iot Things</p>		<pre><code>var AWS = require('aws-sdk');	AWS.config.region = 'ap-northeast-1';		var crypto = require('crypto');	var endpoint = "&lt;endpoint prefix&gt;.iot.&lt;region&gt;.amazonaws.com";	var iot = new AWS.Iot();	var iotdata = new AWS.IotData({endpoint: endpoint});	var topic = "registration";	var type = "MySmartIoTDevice"			//Create 50 AWS IoT Things	for(var i = 1; i &lt; 51; i++) {	  var serialNumber = "SN-"+crypto.randomBytes(Math.ceil(12/2)).toString('hex').slice(0,15).toUpperCase();	  var clientId = "ID-"+crypto.randomBytes(Math.ceil(12/2)).toString('hex').slice(0,12).toUpperCase();	  var activationCode = "AC-"+crypto.randomBytes(Math.ceil(20/2)).toString('hex').slice(0,20).toUpperCase();	  var thing = "myThing"+i.toString();	  var thingParams = {	    thingName: thing	  };		  iot.createThing(thingParams).on('success', function(response) {	    //Thing Created!	  }).on('error', function(response) {	    console.log(response);	  }).send();				//Checking all devices were created		iot.listThings().on('success', function(response) {	  var things = response.data.things;	  var myThings = [];	  for(var i = 0; i &lt; things.length; i++) {	    if (things[i].thingName.includes("myThing")){	      myThings[i]=things[i].thingName;	    }	  }		  if (myThings.length == 50){	    console.log("myThing1 to 50 created and registered!");	  }	}).on('error', function(response) {	  console.log(response);	}).send();	</code></pre>	"
39956118,80970532,47011706,3,0,Mon Oct 30 09:44:00 EDT 2017,6413377,"Please provide essential parts of the answer/solution instead of bare link."
39956118,53977238,39956118,2,1,Sun Dec 30 11:31:00 EST 2018,4623372,"<p>You can do that by using AWS IoT SDKs. You can find supported AWS IoT SDKs <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-sdks.html" rel="nofollow noreferrer">here</a>. For doing that you will need proper credentials and policies which the simplest one would be AWS account credentials (Access key along with secret key from IAM or Cognito user credentials, ...).</p>		<p>For creating things automatically, you can use AWS IoT Device SDK for Python which is Boto3. You can find more information about it <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iot.html?highlight=iot" rel="nofollow noreferrer">here</a>. The following codes show the example of creating a thing in AWS IoT automatically using python and AWS credentials:</p>		<pre><code>import boto3		client = boto3.client('iot')		response = client.create_thing(	    thingName=[NameOfThing],	    thingTypeName=[ThingType],	    attributePayload={	        'attributes': {	            'string': 'string'	        },	        'merge': True|False	    },	    billingGroupName='string'	)	</code></pre>	"
