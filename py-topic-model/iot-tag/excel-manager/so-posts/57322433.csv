thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57322433,57322433,null,1,0,Fri Aug 02 08:16:00 EDT 2019,11741737,"<p>I am trying to make a REST API to handle JSON data from sensors(thermometer, hygrometer) to store and process temperature and humidity data. However at the moment, I am not getting the data directly from sensors yet so I am planning on sending dummy data to the node.js server from a client through http GET/POST requests.</p>		<p>I am using Node.js as a server and I'm trying to save into mongodb using mongoose.</p>		<p>When trying to design this system using mvc design pattern, I was at first trying to only make one sensor.model.js &amp; sensor.controller.js but the problem arose when I had to deal with two different sensor data where each sends its temperature data or humidity data. So I wasn't sure how I should design the API. 	I am supposing that it'd be a better option to just POST each sensor data separately to such as "localhost:3000/sensors/thermometer/" and "localhost:3000/sensors/hygromometer/". I can now successfully send POST requests to "localhost:3000/sensors/thermometer/" and "localhost:3000/sensors/hygromometer/" but I want to able to send GET method to fetch all data from '/sensors' sorted by sensor_type. How can I make this possible? Is there any good way to come up with this?</p>		<p>I put codes for sensor.js and thermometer.js below. hydrometer.js is the exact same as thermometer.js so I did not bother to put it.</p>		<p>Thank you so much in advance.</p>		<pre><code>// sensors.model.js		const mongoose = require('mongoose');		const sensorSchema = new mongoose.Schema({	    _id: mongoose.Schema.Types.ObjectId,	    // this method below doesn't work.	    sensor_type: {type: String, ref: 'Hygro'},	    sensor_type: {type: String, ref: 'Thermo'},	    //time : { type : Date, default: Date.now },	    temperature: {type: Number},	    humidity: {type: Number}	});		module.exports = mongoose.model('Sensor', sensorSchema);		//____________________________________________________________________________		// sensors.route.js		router.get('/', (req, res, next) =&gt; {	    Sensor.find()	    .select('_id sensor_type temperature humidity')	    .exec()	    .then(docs =&gt; {	        res.status(200).json({	          sensors: docs.map(doc =&gt; {	            return {	                _id: doc._id,	                sensor_type: doc.sensor_type,	                temperature: doc.temperature,	                humidity: doc.humidity + "%"	                }	          })	        });	    })	    .catch(err =&gt; {	        res.status(500).json({	          error : err	        });	    });		//___________________________________________________________________________			// thermometer.model.js		const mongoose = require('mongoose');		const thermoSchema = new mongoose.Schema({	    _id: mongoose.Schema.Types.ObjectId,	    sensor_type: {type: String, required: true},	    temperature: {type: Number, required: true}	});		module.exports = mongoose.model('Thermo', thermoSchema);		//___________________________________________________________________________			// thermometer.route.js		router.post('/', (req, res, next) =&gt; {	    // create sensor object	    const thermo = new Thermo({	      _id: new mongoose.Types.ObjectId(),	      sensor_type: req.body.sensor_type,	      temperature: req.body.temperature	    });	    //save thermo obj into the db	    thermo	    .save()	    .then(result =&gt; {	      console.log(result);	      res.status(201).json({	        message: 'Created sensor data successfully',	        createdSensor_data: {	          sensor_type: result.sensor_type,	          temperature: result.temperature,	          _id: result._id	        }	      });	    })	    .catch(err =&gt; {	      console.log(err);	      res.status(500).json({	          error: err	      });	    });	}	</code></pre>	"
57322433,101137858,57322433,3,0,Fri Aug 02 09:36:00 EDT 2019,651827,"does the above code do what you want? it seems to find all documents and return them"
57322433,101138524,57322433,3,0,Fri Aug 02 09:59:00 EDT 2019,11741737,"no it doesnâ€™t. When I send a GET request to â€œ/sensorsâ€? it gives me nothing for some reason Iâ€™m not sure why."
57322433,57324784,57322433,2,0,Fri Aug 02 10:36:00 EDT 2019,5756833,"<p>Can a sensor store humidity and temperature at the same time?	if not then the design could be simple:</p>		<pre class="lang-js prettyprint-override"><code>const mongoose = require('mongoose');	const Schema = mongoose.Schema;	const sensorSchema = new Schema({	    _id: Schema.Types.ObjectId,	    type: {	      type: String,	      required: true,	      enum: ['Hydro', 'Thermo']	    },	    //time : { type : Date, default: Date.now },	    // for the time I use mongoose built in { timestamps: true }	    // temperature: {type: Number},	    // humidity: {type: Number}	    // store value instead. if it's type 'Hydro' you know it's humidity	    value: {	      type: Number,	      required: true	    }	}, { timestamps: true } );	// timestamps: true gives you createdAt and updatedAt automatically		module.exports = mongoose.model('Sensor', sensorSchema);	</code></pre>		<p>to get all the sensors</p>		<pre class="lang-js prettyprint-override"><code>// sensors.route.js		router.get('/', (req, res, next) =&gt; {	  Sensor.find()	    .select()	    .exec()	    .then(result =&gt; {	      res.status(200).json({	        sensors: result.map(item =&gt; {	          return item._doc	        })	      });	    })	    .catch(err =&gt; {	      res.status(500).json({	        error: err	      });	    });	})	</code></pre>		<p>For post request</p>		<pre class="lang-js prettyprint-override"><code>router.post('/', (req, res, next) =&gt; {	  // create sensor object	  const sensor = new Sensor({	    // _id: new mongoose.Types.ObjectId(), 	    // you dont new to add _id, Mongoose adds it by default	    type: req.body.sensor_type,	    value: req.body.temperature	  });	  //save it	  sensor	  .save()	  .then(result =&gt; {	    console.log(result);	    res.status(201).json({	      message: 'Created sensor data successfully',	      createdSensor_data: result._doc // you can access the data on the _doc property	    });	  })	  .catch(err =&gt; {	    console.log(err);	    res.status(500).json({	        error: err	    });	  });	})	</code></pre>		<p>I would also validate <code>req.body</code> for data and throw an error if there isn't any.</p>	"
57322433,101144902,57324784,3,0,Fri Aug 02 13:29:00 EDT 2019,11741737,"Thanks I got it working now with only minor adjustments!"
57322433,101141506,57324784,3,0,Fri Aug 02 11:44:00 EDT 2019,11741737,"To answer your question, sensors only send one value type. Are you saying that I don't need thermometer.model.js & thermometer.route.js files and I should implement everything to sensors.js files? and could you tell me how "enum: ['Hydro', 'Thermo']" works? Thanks.."
57322433,101142515,57324784,3,0,Fri Aug 02 12:18:00 EDT 2019,5756833,""enum: ['Hydro', 'Thermo']" is like a select with options. Just for validation. If you send the wrong type, this will throw an error. If you want to save in the future other type, you will have to add it to the model.	I updated the response for post request."
