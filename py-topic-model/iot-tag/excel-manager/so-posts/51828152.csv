thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
51828152,51828152,null,1,0,Mon Aug 13 18:05:00 EDT 2018,4817385,"<p>I can't figure out how to authenticate my IoT appliance to call Google Cloud App Engine APIs I've written using Firebase Auth.</p>		<p>We currently do this with our browser app using Firebase Auth tokens.  We use the username and password to issue a token and then use that token during the life of the session to access APIs from our browser app.</p>		<p>This doesn't translate well to our IoT appliance as there is no username/password - so we are thinking we will need to use Firebase custom tokens.  Unfortunately these tokens expire every hour - so we will need to use the Firebase Auth APIs to renew the tokens automatically - we think this is the way this works based on documentation.</p>		<p>A constraint we have is that this appliance doesn't have any user experience but instead needs to be able to restart at any time and reestablish it's authenticity with the server by retrieving a fresh token.</p>		<p>I'm having a hard time finding an example of how to do this - and I'm hoping someone can give me a simple example or some clear direction on how to keep a authentication token current while the appliance is on and establish a new one if it needs to restart.</p>		<p>Thanks!</p>	"
51828152,51828607,51828152,2,0,Mon Aug 13 18:37:00 EDT 2018,3534690,"<p>Have you looked at Cloud IoT Core as an option? It handles the authentication piece for you without user/pass (uses JWT), and is designed for IoT. A quickie Cloud Function can bring your telemetry data into Firebase/Firestore very easily.</p>		<p>Another option would be to create a service account with permissions to write to AppEngine. Check out this link: <a href="https://cloud.google.com/docs/authentication/getting-started" rel="nofollow noreferrer">https://cloud.google.com/docs/authentication/getting-started</a> for some documentation on how to authenticate using a service account.</p>	"
51828152,90640584,51828607,3,0,Tue Aug 14 14:23:00 EDT 2018,4817385,"Thanks for your input.  Yes, as I look at things I think this is the approach (service account) that makes the most sense for where we are at - our edge device is a Linux SBC running python programs - so if I understand correctly I can use the python client library to use the service account token to make calls.  I'll continue to look for an example that I can implement (sorry to say, I've struggled to just implement it by reading the documentation).  Thanks again!"
51828152,90641838,51828607,3,0,Tue Aug 14 14:51:00 EDT 2018,3534690,"Of course! Happy to help. I'll edit the comment to include the IAM/service account option for other folks to find too."
51828152,90614276,51828607,3,0,Mon Aug 13 20:18:00 EDT 2018,4817385,"Thanks for the suggestion.  We have some well defined and complex APIs that we would prefer not to rewrite under a Google Cloud Function if at all possible.  Our REST APIs use a well structured MVC architecture - so in theory we could call the controller from a different "view" being the GCF.  I'll have to do an impact analysis to see what will need to be done to make this work.  Thanks for the suggestion!"
51828152,90616857,51828607,3,0,Mon Aug 13 22:23:00 EDT 2018,3534690,"Of course! You can also look at the IAM controls under the Cloud Project to get a service json account setup which you can use as a bearer token (service_account.json) to give access to Google Cloud App Engine. Again, no user/pass, but you don't get all the nice secure communication perks of using IoT Core."
