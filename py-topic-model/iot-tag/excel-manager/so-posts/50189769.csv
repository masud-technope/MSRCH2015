thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
50189769,50189769,null,1,0,Sat May 05 13:05:00 EDT 2018,9739522,"<p>I have problem with uploading data with ESP8266 (hooked up to STM32L0) to the Grovestreams (with ThingSpeak it works perfectly, but on GS not). I don't use Arduino HW or SW (and never will), but my own library (but this is probably not a problem).</p>		<p>In a web browser, this command works</p>		<pre><code>http://grovestreams.com/api/feed?api_key=secretKEY&amp;compId=bath&amp;data=29&amp;data=66&amp;asPut	</code></pre>		<p>The <code>&amp;asPut</code> is there because the web browser use GET as default. 	But when I do this with ESP8266 like</p>		<pre><code>ESP8266_SendCmd("AT+CIPSTART="TCP","grovestreams.com",80");	ESP8266_SendData("PUT /api/feed?api_key=secretKEY&amp;compId=bath&amp;data=29&amp;data=66 HTTP/1.1");	</code></pre>		<p>The ESP sends data to grovestreams</p>		<pre><code>AT+CIPSTART="TCP","grovestreams.com",80	CONNECT	OK	AT+CIPSEND=95	OK	&gt; 	busy s...	Recv 95 bytes	SEND OK	</code></pre>		<p>but nothing happen (values will not show on server).	I also tried this</p>		<pre><code>ESP8266_SendCmd("AT+CIPSTART="TCP","grovestreams.com",80");	ESP8266_SendData("PUT /api/feed?api_key=secretKEY&amp;compId=bath&amp;data=29&amp;data=66 HTTP/1.1\r\nHost: \r\nConnection: close\r\nContent-Type: application/json");	</code></pre>		<p>then I get answer from server</p>		<pre><code>+IPD,487:HTTP/1.1 408 Request Time-out	Date: Sat, 05 May 2018 00:48:23 GMT	Server: Apache	Vary: Accept-Encoding	Content-Length: 293	Connection: close	Content-Type: text/html; charset=iso-8859-1		&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;408 	Request Time-out&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Request Time-out&lt;/h1&gt;&lt;p&gt;Server 	timeout waiting for the HTTP request from the client.&lt;/p&gt;&lt;hr&gt;&lt;address&gt;Apache 	Server at www.grovestreams.com Port 80&lt;/address&gt;&lt;/body&gt;&lt;/html&gt;CLOSED	</code></pre>		<p>The functions for sending data and commands looks like</p>		<pre><code>void ESP8266_SendData(char* data)	{	    char str[50] = "";	    sprintf(str, "AT+CIPSEND=%d", strlen(data));	    ESP8266_SendCmd(str);	    HAL_Delay(100);		    char str2[2048] = "";	    sprintf(str2, "%s\r\n", data);	    HAL_UART_Transmit(&amp;ESPUartHandle, str2,(uint16_t) strlen(str2), 20);	    HAL_Delay(200);	}		void ESP8266_SendCmd(char* cmd)	{	    char str[50] = "";	    sprintf(str, "%s\r\n", cmd);	    HAL_UART_Transmit(&amp;ESPUartHandle, str,(uint16_t) strlen(str), 20);	    HAL_Delay(100);	}	</code></pre>		<p>As I wrote earlier, with Thingspeak it works perfectly (GET method) as</p>		<pre><code>ESP8266_SendCmd("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80");	HAL_Delay(2000);	ESP8266_SendData("GET /update?api_key=secretKEY&amp;field1=36");	</code></pre>		<p>Please, what am I doing wrong with the PUT method on ESP8266?</p>		<p>EDIT 6.5.2018: After detail examination of the arduino grovestreams library, this command format works:</p>		<pre><code>ESP8266_SendData("PUT /api/feed?api_key=secretKEY&amp;compId=bath&amp;data=20.7&amp;data=66.8 HTTP/1.1\nHost: grovestreams.com\nConnection: close\nContent-Type: application/json\n\n");	</code></pre>		<p>Very important are the last two <code>\n\n</code>, without it no data will upload.</p>	"
50189769,50209020,50189769,2,0,Mon May 07 07:24:00 EDT 2018,4755321,"<p>This difference between Grovestreams and ThingSpeak has likely to do with different way HTTP requests are parsed (with ThingSpeak using a more robust implementation).</p>		<p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4" rel="nofollow noreferrer">RFC2616 - Section 4. HTTP Message</a> says the following:</p>		<blockquote>	  <p>Request (section 5) and Response (section 6) messages use the generic	  message format of RFC 822 [9] for transferring entities (the payload	  of the message). Both types of message consist of a start-line, zero	  or more header fields (also known as "headers"), an empty line (i.e.,	  a line with nothing preceding the CRLF) indicating the end of the	  header fields, and possibly a message-body.</p>	</blockquote>		<p>Therefore you not sending the "end of headers" marker <code>\r\n\r\n</code> may cause a server to continue to wait for more headers, which may be sent in separate TCP frames (or TLS PDUs). This is further confirmed by the response you get:</p>		<pre><code>&lt;html&gt;&lt;head&gt;&lt;title&gt;408 	Request Time-out&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Request Time-out&lt;/h1&gt;&lt;p&gt;Server 	timeout waiting for the HTTP request from the client.&lt;/p&gt;&lt;hr&gt;&lt;address&gt;Apache 	Server at www.grovestreams.com Port 80&lt;/address&gt;&lt;/body&gt;&lt;/html&gt;	</code></pre>		<p>Therefore overall, there seem to be two issues with your code:</p>		<ol>	<li>Use CRLF (<code>\r\n</code>) not just LF <code>\n</code> to conform with RFC2616. It mentions the following in <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.3" rel="nofollow noreferrer">Section 19.3 Tolerant Applications</a>:</li>	</ol>		<blockquote>	  <p>The line terminator for message-header fields is the sequence CRLF.	  However, we recommend that applications, when parsing such headers,	  recognize a single LF as a line terminator and ignore the leading CR.</p>	</blockquote>		<p>You sending <code>\n</code> rather than <code>\r\n</code> to separate the headers works just because given implementation tolerates it, not because doing so follows the RFC.</p>		<ol start="2">	<li>Send an empty header to denote the end of headers section by placing CRLF immediately after last CRLF following last header content. This tells the server that it should no longer wait for more headers and it can now proceed to receiving/parsing HTTP body (if there is one in given case) or sending a response.</li>	</ol>		<p>After applying those fixes, the proper request should look like this:</p>		<pre><code>ESP8266_SendData("PUT /api/feed?api_key=secretKEY&amp;compId=bath&amp;data=20.7&amp;data=66.8 HTTP/1.1\r\nHost: grovestreams.com\r\nConnection: close\r\nContent-Type: application/json\r\n\r\n");	</code></pre>	"
