thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
38659258,38659258,null,1,0,Fri Jul 29 12:45:00 EDT 2016,1654263,"<p>I am learning OSGi as it is becoming popular now a days. I am using linux as my OS and OpenJDK as development environment. I have created few bundles A,B,C.. etc in OSGi equinox framwork. </p>		<p>I run OSGi framework using below command:</p>		<pre><code>java -jar osgi-3.10.0-v20140606-1445.jar -console	</code></pre>		<p>now I installed and started A,B,C .. etc bundle in OSGi console. using linux top command I have observed memory and CPU utilization as below:</p>		<pre><code> PID   PPID USER     STAT   VSZ %VSZ %CPU COMMAND	 1972   422 root     S     368m  74%   3% java -jar osgi-3.10.0-v20140606-1445.jar -console	</code></pre>		<p>I observed that one of my bundle say B was causing high memory utilization. I uninstalled the bundle B from OSGi and again checked the memory usage. I found the same result with no change either in CPU usage or in memory usage.</p>		<p>I restarted the OSGi framework without bundle B then I found the below statistics</p>		<pre><code>1972   422 root     S     214m  43%   0% java -jar osgi-3.10.0-v20140606-1445.jar -console	</code></pre>		<p>So after this I came to know that uninstalling of bundle B from OSGi was not updating the memory or CPU usage until I restart the OSGi framework.  </p>		<p>so can someone suggest me, how can I clean the memory after uninstallation of bundles in OSGi.</p>	"
38659258,64702493,38659258,3,1,Fri Jul 29 14:03:00 EDT 2016,1354879,"Try running jvisualvm (in bin directory of Java) and perform gc on the JVM. Java does not free memory if not necessary, even if the objects are cleaned up. You can see the real memory usage in JVisualVM after performing GC. The information that is shown by PS have no information about real Heap usage."
38659258,64699467,38659258,3,1,Fri Jul 29 12:53:00 EDT 2016,6546777,"What did PlugIn B when you close it? How is your `stop`-Method?"
38659258,64699652,38659258,3,0,Fri Jul 29 12:57:00 EDT 2016,1654263,"@TMichelsen I am performing some database operation in plugin B. when I stopped B, I close database connection and other resources as well.   private void closeConnection() throws SQLException {	    if (sqlConnection == null || sqlConnection.isClosed()) {	      return;	    }	    sqlConnection.close();	    sqlConnection = null;	    Runtime r=Runtime.getRuntime();	    r.freeMemory();	    r.gc();	  }"
38659258,64699761,38659258,3,0,Fri Jul 29 13:00:00 EDT 2016,1654263,"sqlConnection = DriverManager.getConnection(ConfigurationConstants.DATABASE_NAME); this line is causing the high memory utilization. I am using sqlite database."
38659258,64699768,38659258,3,1,Fri Jul 29 13:00:00 EDT 2016,150978,"@Raj: Please do not place code into comments! Edit the question instead. Anyway I don't see the real memory usage in for question, only `VSZ` which something different AFAIK: [Virtual Memory Usage from Java under Linux, too much memory used](http://stackoverflow.com/questions/561245/virtual-memory-usage-from-java-under-linux-too-much-memory-used)"
38659258,64770376,38659258,3,0,Mon Aug 01 10:01:00 EDT 2016,1104727,"See also similar questions: 	http://stackoverflow.com/questions/31988047/how-to-check-if-a-class-in-an-osgi-bundle-has-been-correctly-unloaded	http://stackoverflow.com/questions/17170279/osgi-and-what-do-i-use-to-controll-loading-unloading-reloading-of-packages"
38659258,38693683,38659258,2,0,Mon Aug 01 07:58:00 EDT 2016,1104727,"<p>Uninstalling a bundle will prevent other bundles from wiring to it (class loader management), but it will not unload existing instances from memory or stop activity in those classes. 	To unload an instance, it's the normal Java garbage collection process; you need to ensure that nothing else in your application is holding a reference to the instance, and then the garbage collector will free resources used by the instance.</p>	"
38659258,64837555,38693683,3,0,Tue Aug 02 21:20:00 EDT 2016,1104727,"In that case your best bet is to take a heap dump and work out what's holding on to instances of the classes in the bundle. A tool like Eclipse Memory Analyzer is great for this. (It's references to instances of the classes loaded by that bundle you're worried about, not just references to the bundle object.)"
38659258,64837601,38693683,3,0,Tue Aug 02 21:21:00 EDT 2016,1104727,"Your JVM garbage collector may also choose not to shrink the heap size (what you see on the command line) even if occupancy is lower, for very sound CPU optimisation reasons."
38659258,64810198,38693683,3,0,Tue Aug 02 09:43:00 EDT 2016,1654263,"I have checked, I am setting all the references to null when bundle is stopped."
