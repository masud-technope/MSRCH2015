thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
54484127,54484127,null,1,0,Fri Feb 01 17:12:00 EST 2019,10776426,"<p>I setup an the fiware201:iot-sensor inside an Ubuntu 16.04 instance on FIWARE-lab , and am currently building an android application to be able to send commands to access the dummy devices provided by the context provider , i setup a class that formats the data and sends it to the endpoint provided by the tutorial , but i cant seem to get it to work , i get a 422 error whenever i try to send any command.</p>		<p>additional details:<br>	i am using volley -> a package to send post,get requests in android<br>	fiware-lab region : crete</p>		<p>here is the code:</p>		<p><br></p>		<pre><code>import android.content.Context;	import android.util.Log;		import com.android.volley.AuthFailureError;	import com.android.volley.Request;	import com.android.volley.RequestQueue;	import com.android.volley.Response;	import com.android.volley.VolleyError;	import com.android.volley.toolbox.StringRequest;	import com.android.volley.toolbox.Volley;		import java.util.HashMap;	import java.util.Locale;	import java.util.Map;			public class ApiController {	    private String urlString	    public String serverResponse;	    private RequestQueue queue ;		    public ApiController(Context context) {	        //set context variables if required		        serverResponse = "";	        queue = Volley.newRequestQueue(context);			    }		    public void setDevice(String device) {	        this.device = device;	        urlString = "http://myFloatingIp:3001/iot/" +"Lamp001"; // URL to call		}			    public void send() {	        String uri = String.format(Locale.US, urlString);		        // Request a string response from the provided URL.	        StringRequest stringRequest = new StringRequest(Request.Method.POST,uri,	                new Response.Listener&lt;String&gt;() {	                    @Override	                    public void onResponse(String response) {	                               serverResponse = response;	                    }	                }, new Response.ErrorListener() {	            @Override	            public void onErrorResponse(VolleyError error) {	              serverResponse = "Error";	            }	        }	                      ) {	            @Override	            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {	                Map&lt;String,String&gt; params=new HashMap&lt;String,String&gt;();	                params.put("data","urn:ngsi-ld:Lamp:001"@On");	                return params;		            }		            @Override	            public Map&lt;String, String&gt; getHeaders() throws AuthFailureError {	                Map&lt;String,String&gt; headers=new HashMap&lt;String,String&gt;();	                headers.put("Content-Type","text/plain");	                return headers;	            }		        };		// Add the request to the RequestQueue.	        queue.add(stringRequest);	    }			}	</code></pre>	"
54484127,54486268,54484127,2,0,Fri Feb 01 19:47:00 EST 2019,1179828,"<blockquote>	  <p><strong>422 Unprocessable Entity</strong></p>	  	  <p>The server understands the content type of the request entity (hence a <strong>415 Unsupported Media Type</strong> status code is inappropriate), and the syntax of the request entity is correct (thus a <strong>400 Bad Request</strong> status code is inappropriate) but was unable to process the contained instructions.</p>	</blockquote>		<p>So this means that you have set the correct content type, and the payload is understood.</p>		<p>If you look at the <a href="https://github.com/Fiware/tutorials.Step-by-Step/blob/b6af44/context-provider/controllers/ultraLight.js#L113-L120" rel="nofollow noreferrer">code</a> behind the dummy sensors you will see the following:</p>		<pre><code>// Check for a valid device and command	  if (	    _.indexOf(myCache.keys(), deviceId) === -1 ||	    _.indexOf(['on', 'off'], command) === -1	  ) {	    return res.status(422).send(result + NOT_OK);	}	</code></pre>		<p>Therefore either the ID of the device or the command is not recognized. The <a href="https://github.com/Fiware/tutorials.Step-by-Step/blob/b6af44/context-provider/controllers/ultraLight.js#L212-L215" rel="nofollow noreferrer">array of dummy devices</a> is initialised on start up</p>		<pre><code>myCache.set('lamp001', LAMP_OFF);	myCache.set('lamp002', LAMP_OFF);	myCache.set('lamp003', LAMP_OFF);	myCache.set('lamp004', LAMP_OFF);	</code></pre>		<p>The IDs are case sensitive, hence you should send <code>lamp001</code> not <code>Lamp001</code>. Yes it could send a more familiar <strong>404</strong>. The other half of the statement ensures a <strong>422</strong> is returned if the command is not recognized, you are currently sending <code>On</code> not <code>on</code></p>		<p>However using the 3001 port directly to send commands is <strong>not</strong> the right way for a user to access the devices. In the tutorial material the dummy devices are mimicking an Ultralight device listening over HTTP - they are supposed to be connected by an IoT Agent rather than accessed by an end user.</p>		<p>The correct way to set things up is to connect things up following the <a href="https://github.com/Fiware/tutorials.IoT-Agent" rel="nofollow noreferrer">IoT Agent Tutorial</a> - that way End Users can indirectly access the devices via the Orion context broker and the end user doesn't need to know the protocol and transport used by each device.</p>		<p>Remember, anything could be going on south of the south port - it is up to the IoT Agent to cope with  whatever the response comes from the device. However  everything will be nicely defined NGSI v2 responses coming out of the North port. If the entity is not registered in the context broker it will return the familiar <strong>404</strong>. If the entity is registered, but something strange like a <strong>422</strong> occurs on a command, the command will be left in a pending state since it cannot be processed and so on. May be the device is connected using MQTT and only wakes up to process commands periodically.</p>		<p>To update the state of an entity with a known ID, you merely send a PATCH request to the entity within the context broker. Programmatically, the code can be see <a href="https://github.com/Fiware/tutorials.Step-by-Step/blob/b6af44/context-provider/controllers/ultraLight.js#L469" rel="nofollow noreferrer">here</a> - something like</p>		<pre><code>PATCH http://localhost:1026/v2/entities/'urn:ngsi-ld:lamp001/attrs	</code></pre>		<p>With the payload being the data you want to send.</p>	"
54484127,95780710,54486268,3,0,Fri Feb 01 20:55:00 EST 2019,10776426,"i tried changing from Lamp001 to lamp001 still i get the same error-> BasicNetwork.performRequest: Unexpected response code 422 for "http://myfloatingip:3001/iot/lamp001" , i know i should be using iot agent but i am doing the fiware 201 for testing purposes for a project ."
54484127,95780808,54486268,3,0,Fri Feb 01 21:01:00 EST 2019,1179828,"Line 116 is looking for `on` or `off` (case sensitive) - you are sending `On`"
54484127,95781248,54486268,3,0,Fri Feb 01 21:22:00 EST 2019,10776426,"changed it as well but the problem still presists , what i dont understand is why doesnt this error (422) appear when i send the same command using postman even if i changed upper or lower cases , it runs normally without any problems"
54484127,95790491,54486268,3,1,Sat Feb 02 11:00:00 EST 2019,1179828,"It looks to me that your payload is incorrect. Looking at the Ultralight [documentation](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html) you should be sending a **plain text** string. You are sending parameters, you need to override `getBody()` not `getParams()` https://stackoverflow.com/a/26270185/1179828"
54484127,95793864,54486268,3,0,Sat Feb 02 15:03:00 EST 2019,10776426,"that worked thanks for you clarification"
