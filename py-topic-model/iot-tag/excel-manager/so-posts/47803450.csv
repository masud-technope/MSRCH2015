thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
47803450,47803450,null,1,1,Wed Dec 13 23:05:00 EST 2017,9096201,"<p>I'm new here at Stackoverflow and have a question.</p>		<p>I want to create an IoT weather station with a ESP8266 that has two sensors (humidity, temperature) and send the data to a broker (Mosquitto) running on a Pi. Beside the easy way to fetch and visualize the data with nodered I want to program a desktop app in Java.</p>		<p>I use the "org.eclipse.paho.client.mqttv3-1.2.0" package to create a client and fetch the messages. With one topic (e.g. "/test/temperature") it's easily possible to receive the temperature values. But if I add a second client for humidity, it's not possible to receive the two at the same time. When two clients are implemented just the later called client gets its values.</p>		<p>I solved the problem by sending the values from the ESP8266 with a little time shift. But is there a way to fetch to messages at the same time? I thought about Threads but it's not working.</p>		<p>Has anyone had already the same problem or got an idea?</p>		<p>Thanks in advance and don't hesitate to ask further questions.</p>		<p>Cheers.</p>		<p>Robin </p>	"
47803450,82574534,47803450,3,0,Thu Dec 14 05:47:00 EST 2017,1136195,"Not a coding question. See https://stackoverflow.com/help/how-to-ask You need to have a well-defined, well-researched coding problem. Which this isn't. Maybe you can try on https://arduino.stackexchange.com/"
47803450,47810706,47803450,2,0,Thu Dec 14 10:09:00 EST 2017,504554,"<p>No, messages are not fetched from a broker, they pushed by the broker. The broker will push messages as they arrive and they will always be one at once, this is just how MQTT works.</p>		<p>The way to do this is to maintain a state machine that holds the last value for each sensor and use these values to update the output when ever one value changes.</p>	"
47803450,47819225,47803450,2,0,Thu Dec 14 17:40:00 EST 2017,1431734,"<p>First off, you need to rethink your topic structure.  Don't be so restrictive.  Hand out topics like houses hand out candy on Halloween.  :)</p>		<p>i.e.</p>		<pre><code>robin/weather/ESP8266/temperature	robin/weather/ESP8266/humidity	</code></pre>		<p>A state machine can be almost anything.  i.e. Hashtable, database, etc..  If you want to keep historical data then I would go with a database. i.e. <a href="http://sqlite.org/" rel="nofollow noreferrer">SQLite</a>, <a href="http://db.apache.org/derby/" rel="nofollow noreferrer">Derby</a>, <a href="http://www.h2database.com/html/main.html" rel="nofollow noreferrer">H2</a>, etc.   I use the â€œsqlite-jdbcâ€? driver from <a href="https://bitbucket.org/xerial/sqlite-jdbc/overview" rel="nofollow noreferrer">Taro L. Saito</a>. The JDBC driver works extremely well and he keeps the code in sync with the SQLite code base.</p>		<p>A basic database would have 2 tables: Temperature and Humidity.  Have the client subscribe to both topics and when a message arrives, update the appropriate table with the incoming value and the current date and time.  </p>		<p>If you want, you could create a 3rd table (i.e. 'Recent') and it would only ever have 2 rows (one for the current temperature and one for the current humidity) in the table that are constantly replaced.</p>	"
47803450,82644999,47819225,3,0,Fri Dec 15 21:59:00 EST 2017,1431734,"@hardlib Yup I agree - I was copying the original example."
47803450,82645006,47819225,3,0,Fri Dec 15 22:00:00 EST 2017,1431734,"@Robin, I was thinking in terms of 2 clients but yes you can use 1 client and a wildcard.  Also, the MqttCallback.messageArrived gives you both the topic and message."
47803450,82603619,47819225,3,0,Thu Dec 14 19:21:00 EST 2017,9096201,"Thanks a lot roger for your inspiration. The idea with the db is a good one, but what do you mean by saying subscribing to both topics ? actually when I subscribe to e.g. "/robin/weather/ESP8266/#" by MqttCallback, the message just gives out one value ..."
47803450,82604527,47819225,3,0,Thu Dec 14 19:52:00 EST 2017,504554,"Topics shoud NOT start with leading '/' it adds a null element to the start of the topic tree"
47803450,82604560,47819225,3,0,Thu Dec 14 19:53:00 EST 2017,504554,"All the callbacks give you the actual topic the message was published to"
