thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
55352143,55352143,null,1,0,Tue Mar 26 07:50:00 EDT 2019,9955152,"<p>I have a database (MySQL) in which I store sensor data coming from IoT devices. The data is sent to my API in JSON format. 	The data contains two types of data:	<em>strings</em> and <em>integers</em></p>		<p>Now I want to store the data, but I do not know what the best approach is. With performance in mind. The system should become quite large in the future. With hundreds of devices sending in data every 10 seconds.	The bulk of the data is integers. Only 10% is string data.	I expect millions of rows in the database. I have a prototype running that has 70 million rows of data (only integers now) accumulated over the last 6 months with 10 devices.</p>		<p>I am extending the system to store strings, so hence my question.</p>		<p>Now I can create two tables: one for integers data, and one for string data like so:</p>		<pre><code>| id | device_id | name | int_value |	| id | device_id | name | string_value |	</code></pre>		<p>Or should I create one table with a flag indicating the type of data:</p>		<pre><code>| id | device_id | name | int_value | string_value | type |	</code></pre>		<p>The last option is more friendly in terms of my model. Then I can just do:</p>		<pre><code>$model-&gt;data-&gt;foobar 	</code></pre>		<p>Wheter foobar is string or int, doesn't matter. </p>		<p>But this might be a bad design when performance comes to mind? Or not?</p>		<p>Otherwise I have to check what type of data I want to retrieve and then look it up in the right table:</p>		<pre><code>$model-&gt;intdata-&gt;foobar	or	$model-&gt;stringdata-&gt;foobar	</code></pre>		<p>What do you think is the best approach? In terms of performance and data storage. Is an extra string column on the table not a loss of space?</p>		<p>What about extendability? I have two types now, but suppose in the future I also get float data? In the first approach I have to create a new table.	In the second approach I can create an extra column and a new type definition.</p>	"
55352143,97428501,55352143,3,0,Tue Mar 26 08:03:00 EDT 2019,2602434,"Wouldn't that depend on how your table is indexed? You are right there are different approaches and it is hard to say how eloquent will cope with it. My suggestion is find the best approach with the help of https://github.com/barryvdh/laravel-debugbar that can show and micro-time any sql command that was needed to load the page. Especially in the case of N+1 issues. If it is strings AND integers, you may opt to add a field. There is still `->orWhere(...)`"
