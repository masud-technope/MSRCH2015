thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
45183872,45183872,null,1,1,Wed Jul 19 07:35:00 EDT 2017,1195672,"<p>I would like to hear your insights about an IoT data ingesting case. In AWS IoT hub, thing shadows are virtual representation of physical ones. What i understood from the figure below is whenever a thing sends a data to platform via a message broker, thing shadows and rule engine portions get the same sensor data concurrently and process it. </p>		<p>Are my conclusions correct ?</p>		<ul>	<li>Things shadow system is subscribed to message broker and gets sensor data, updates their shadow actors. Shadow side is also responsible for storing sensor data such an event sourcing mechanism.</li>	<li>The thing shadow system does not perform any rules, it is just for performing event sourcing and keeping last known state in virtual thing actors.</li>	<li>The same sensor data also is an inbound data to rules engine. Rules engine is just and ECA (event condition action) type system that handle streaming data and decides what it will do with them. This means every incoming data eventually will be processed in rules engine portion. </li>	</ul>		<p><a href="https://i.stack.imgur.com/lfepK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/lfepK.png" alt="https://paolopatierno.wordpress.com/2015/10/13/an-iot-platforms-match-microsoft-azure-iot-vs-amazon-aws-iot/"></a> </p>	"
45183872,45204344,45183872,2,3,Thu Jul 20 02:58:00 EDT 2017,1175633,"<p>Below are my comments to your conclusions.</p>		<blockquote>	  <p>What i understood from the figure below is whenever a thing sends a	  data to platform via a message broker, thing shadows and rule engine	  portions get the same sensor data concurrently and process it.</p>	</blockquote>		<p>Changes in the thing shadow can trigger an action registered in the rule engine. There are <a href="https://docs.aws.amazon.com/iot/latest/developerguide/thing-shadow-mqtt.html" rel="nofollow noreferrer">specific topics</a> associated with a thing shadow that you can subscribe the rule engine to, in order to perform one or many action(s) in response.</p>		<blockquote>	  <p>Things shadow system is subscribed to message broker and gets sensor	  data, updates their shadow actors. Shadow side is also responsible for	  storing sensor data such an event sourcing mechanism.</p>	</blockquote>		<p>You can update the device shadow by using the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/thing-shadow-rest-api.html" rel="nofollow noreferrer">REST API</a>, or <a href="https://docs.aws.amazon.com/iot/latest/developerguide/thing-shadow-mqtt.html" rel="nofollow noreferrer">dedicated MQTT topics</a> to publish on specific shadow topics. The shadow does not constitute an event-sourcing system by itself, but a representation of the data model associated with a physical device, as you said.</p>		<p>You can however create a rule that listens for changes on one or more shadow instances, and register the changes into DynamoDB for instance, in a time-series manner. You'll then have an event-sourcing system allowing you to store the previous states, or changes, sent by a device during an arbitrary amount of time.</p>		<blockquote>	  <p>The thing shadow system does not perform any rules, it is just for	  performing event sourcing and keeping last known state in virtual	  thing actors.</p>	</blockquote>		<p>The thing shadow keeps the desired and reported state of a physical device in the cloud. It does not execute rules, but emits messages on MQTT topics when events happen within the shadow. These messages can then be captured by the rules engine to execute actions.</p>		<blockquote>	  <p>The same sensor data also is an inbound data to rules engine. Rules	  engine is just and ECA (event condition action) type system that	  handle streaming data and decides what it will do with them. This	  means every incoming data eventually will be processed in rules engine	  portion.</p>	</blockquote>		<p>The rules engine does not listen by default on an MQTT topic, and hence, on data sent by devices to the Device Gateway. You must register in the rules engine the topics you'd like to listen to along with their associated actions.</p>		<p>Other than that, the rules engine allows you to describe your rules in <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-sql-reference.html" rel="nofollow noreferrer">ANSI SQL</a>, meaning that you are able to specify the origin of your data (the <code>FROM</code> in your SQL statement), the specific fields in a JSON payload you are interested in capturing (<code>SELECT</code>), and an optional condition specifying on what condition the rule should be triggered (<code>WHERE</code>).</p>		<p>An example of a rule listening on the fictive topic <code>device/+/telemetry</code> and interested in capturing all the fields in the received payload would be :</p>		<pre><code>SELECT * FROM device/+/telemetry	</code></pre>		<p>Note how the <code>+</code> can be used as a placeholder for any device identifier for instance.</p>	"
45183872,77382846,45204344,3,0,Thu Jul 20 07:44:00 EDT 2017,1195672,"appreciate your detailed answer. I wonder one thing that how the rule SQLs are stored. In their shadows or in rule engine ? I assume that all SQLs are kept in their related thing shadows. When the event is received by shadow, it emits the event with rule SQL to rule engine. is this correct ?"
45183872,77400767,45204344,3,0,Thu Jul 20 14:11:00 EDT 2017,1175633,"The rules are managed by AWS, where they are stored is not really relevant in this context. The rules does not in fact have to do anything with the shadow, they have to do with MQTT topics, that is the interface of communication with the rule engine. And the shadow happens to emit events on these topics, that's how you can integrate the shadow with the rules engine."
