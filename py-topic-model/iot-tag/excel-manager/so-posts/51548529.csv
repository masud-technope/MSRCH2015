thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
51548529,51548529,null,1,1,Thu Jul 26 22:52:00 EDT 2018,10141630,"<p>I have created a test app for my first Windows IoT project with raspberry pi and an ultrasonic sensor.	I have placed some sample code in it. Visual Studio tells me that I am missing a curly bracket in "public void runâ€¦", but that doesn't seem to be the problem.	Is it because of the public class within the BackgroundTaskInstance?</p>		<pre><code>using System;	using System.Collections.Generic;	using System.Linq;	using System.Text;	using System.Net.Http;	using Windows.ApplicationModel.Background;	using Windows.Devices.Gpio;	using System.Threading;	using System.Threading.Tasks;	using System.Diagnostics;		// The Background Application template is documented at http://go.microsoft.com/fwlink/?LinkID=533884&amp;clcid=0x409		namespace IoTtest	{	    public sealed class StartupTask : IBackgroundTask	    {	        public void Run(IBackgroundTaskInstance taskInstance)	        {	            public class HCSR04	        {	            private GpioPin triggerPin { get; set; }	            private GpioPin echoPin { get; set; }	            private Stopwatch timeWatcher;		            public HCSR04(int triggerPin, int echoPin)	            {	                GpioController controller = GpioController.GetDefault();	                timeWatcher = new Stopwatch();	                //initialize trigger pin.	                this.triggerPin = controller.OpenPin(triggerPin);	                this.triggerPin.SetDriveMode(GpioPinDriveMode.Output);	                this.triggerPin.Write(GpioPinValue.Low);	                //initialize echo pin.	                this.echoPin = controller.OpenPin(echoPin);	                this.echoPin.SetDriveMode(GpioPinDriveMode.Input);	            }		            public double GetDistance()	            {	                ManualResetEvent mre = new ManualResetEvent(false);	                mre.WaitOne(500);	                timeWatcher.Reset();	                //Send pulse	                this.triggerPin.Write(GpioPinValue.High);	                mre.WaitOne(TimeSpan.FromMilliseconds(0.01));	                this.triggerPin.Write(GpioPinValue.Low);	                return this.PulseIn(echoPin, GpioPinValue.High);	            }		            private double PulseIn(GpioPin echoPin, GpioPinValue value)	            {	                var t = Task.Run(() =&gt;	                {	                    //Recieve pusle	                    while (this.echoPin.Read() != value)	                    {	                    }	                    timeWatcher.Start();		                    while (this.echoPin.Read() == value)	                    {	                    }	                    timeWatcher.Stop();	                    //Calculating distance	                    double distance = timeWatcher.Elapsed.TotalSeconds * 17000;	                    return distance;	                });	                bool didComplete = t.Wait(TimeSpan.FromMilliseconds(100));	                if (didComplete)	                {	                    return t.Result;	                }	                else	                {	                    return 0.0;	                }	            }		        }	    }	}	</code></pre>	"
51548529,90064804,51548529,3,2,Thu Jul 26 22:56:00 EDT 2018,1255873,"A] The bracket below `public class HCSR04` doesn't have a corresponding closing bracket. B] You can't declare classes (`HCSR04`) within methods (`Run`) anyway."
51548529,90064855,51548529,3,0,Thu Jul 26 23:00:00 EDT 2018,34092,"On this web page, search for `{` (e.g. in Chrome). How many are there? Now search for `}`. How many are there?"
51548529,51548571,51548529,2,0,Thu Jul 26 23:00:00 EDT 2018,2717313,"<p>Nested class can't exist inside functions. Place HCSR04 inside StartupTask instead.</p>		<p>See <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/nested-types" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/nested-types</a></p>	"
51548529,90065261,51548571,3,0,Thu Jul 26 23:32:00 EDT 2018,10141630,"If I have it done right, I am getting "IoTTest.StartupTask.HCSR04' is a nested type. Nested types cannot be exported to the Windows Runtime""
51548529,90065479,51548571,3,0,Thu Jul 26 23:51:00 EDT 2018,34092,"Don't use a nested type @mcgiga (in other words, ensure each class is next to another class, not **inside** it)."
51548529,90065654,51548571,3,0,Fri Jul 27 00:03:00 EDT 2018,2717313,"Nested types are mainly used for isolation purposes (so they can't be seen outside of the parent class), so exporting of a nested class doesn't make sense."
51548529,51549660,51548529,2,1,Fri Jul 27 01:41:00 EDT 2018,386188,"<p>I took the code and reformatted it for you. Please change the namespace to the value you would like</p>		<pre><code>using System;	using System.Diagnostics;	using System.Threading;	using System.Threading.Tasks;		namespace MyIotNamespace	{	    public sealed class StartupTask :IBackgroundTask	    {	        public void Run(IBackgroundTaskInstance taskInstance)	        {		        }		    }		    public class HCSR04	    {	        private GpioPin triggerPin { get; set; }	        private GpioPin echoPin { get; set; }	        private Stopwatch timeWatcher;		        public HCSR04(int triggerPin, int echoPin)	        {	            GpioController controller = GpioController.GetDefault();	            timeWatcher = new Stopwatch();	            //initialize trigger pin.	            this.triggerPin = controller.OpenPin(triggerPin);	            this.triggerPin.SetDriveMode(GpioPinDriveMode.Output);	            this.triggerPin.Write(GpioPinValue.Low);	            //initialize echo pin.	            this.echoPin = controller.OpenPin(echoPin);	            this.echoPin.SetDriveMode(GpioPinDriveMode.Input);	        }		        public double GetDistance()	        {	            ManualResetEvent mre = new ManualResetEvent(false);	            mre.WaitOne(500);	            timeWatcher.Reset();	            //Send pulse	            this.triggerPin.Write(GpioPinValue.High);	            mre.WaitOne(TimeSpan.FromMilliseconds(0.01));	            this.triggerPin.Write(GpioPinValue.Low);	            return this.PulseIn(echoPin, GpioPinValue.High);	        }		        private double PulseIn(GpioPin echoPin, GpioPinValue value)	        {	            var t = Task.Run(() =&gt;	            {	                //Recieve pusle	                while(this.echoPin.Read() != value)	                {	                }	                timeWatcher.Start();		                while(this.echoPin.Read() == value)	                {	                }	                timeWatcher.Stop();	                //Calculating distance	                double distance = timeWatcher.Elapsed.TotalSeconds * 17000;	                return distance;	            });	            bool didComplete = t.Wait(TimeSpan.FromMilliseconds(100));	            if(didComplete)	            {	                return t.Result;	            }	            else	            {	                return 0.0;	            }	        }		    }		}	</code></pre>	"
