thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
48832131,48832131,null,1,0,Fri Feb 16 17:38:00 EST 2018,2646996,"<p>I'm having an intermittent issue with go trying to connect to AWS MQTT.  Sometimes it works fine, other times not so much.  When I connect I get this error:	Connection lost before Subscribe completed</p>		<p>I'm really not sure why it does this, at first everything seemed to work fine but now it throws this error more often than not.  Here's the code that I'm using to connect:</p>		<pre><code>type ServerConnection struct {	    Cert     tls.Certificate	    Host     string	    Port     int	    Path     string	    Topic    string	    Qos      int	    Messages chan MQTT.Message	    Control  chan os.Signal	 }		func (server *ServerConnection) Start() error {	    cid := uuid.New().String()		    connOpts := &amp;MQTT.ClientOptions{	            ClientID:             cid,	            CleanSession:         true,	            AutoReconnect:        true,	            MaxReconnectInterval: 1 * time.Second,	            KeepAlive:            30000,	            TLSConfig:            tls.Config{Certificates: []tls.Certificate{server.Cert}},	    }	    connOpts.SetConnectTimeout(30 * time.Second)	    connOpts.SetDefaultPublishHandler(func(client MQTT.Client, msg MQTT.Message) {	            server.Messages &lt;- msg	    })	    brokerURL := fmt.Sprintf("tcps://%s:%d%s", server.Host, server.Port, server.Path)	    connOpts.AddBroker(brokerURL)	    mqttClient := MQTT.NewClient(connOpts)	    if token := mqttClient.Connect(); token.Wait() &amp;&amp; token.Error() != nil {	            return token.Error()	    }	    // Subscribe	    go func() {	            log.Printf("subscribing")	            if token := mqttClient.Subscribe(server.Topic, byte(server.Qos), nil); token.Wait() &amp;&amp; token.Error() != nil {	                    fmt.Println(token.Error())	                    os.Exit(1)	            }	            log.Printf("subscribed")		    }()	    server.ProcessMessages()	    log.Println("[MQTT] Connected")	    quit := make(chan struct{})	    signal.Notify(server.Control, os.Interrupt)	    go func() {	            &lt;-server.Control	            mqttClient.Disconnect(250)	            fmt.Println("[MQTT] Disconnect")	            quit &lt;- struct{}{}	    }()	    &lt;-quit		    return nil		   }	</code></pre>	"
48832131,50415399,48832131,2,0,Fri May 18 16:10:00 EDT 2018,3286882,"<p>Basically you need to put the subscribe methid call inside the onConnectHandler, this will make sure that the subscribe is being called upon successful connection (and reconnect)	The handler is defined in the client options.</p>	"
