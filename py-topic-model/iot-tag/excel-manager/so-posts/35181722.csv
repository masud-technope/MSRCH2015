thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
35181722,35181722,null,1,0,Wed Feb 03 15:57:00 EST 2016,681671,"<p>I am using mosquitto as a broker for delivering QoS1 messages.</p>		<p>Sometimes, the device may fail to acknowledge a particular type of message. For example, if a message causes the device to reset, the device won't acknowledge the message. Upon reboot, it will receive the message again. So it will enter an infinite reboot-connect-reboot cycle. Setting the clean session flag is not an option as frequent disconnections are to be expected and I do not want the device to miss messages sent when it was disconnected.</p>		<p>I can take care while writing device and server side code to prevent such things from happening but the possibility of bugs cannot be ruled out. </p>		<p>I was hoping to find something which gives the server side application or administrator full control over the broker - things like querying list of connected/registered clients, ability to list/delete messages from queues of a particular client. Cleaning the session of a client without client requesting it. </p>		<p>If not that I would atleast like to know if there is a config option to control maximum number of retries for QoS1/QoS2 messages in mosquitto (or any other broker barring the cloud based ones). The client is a GSM node. Such infinite loops can end up consuming large amounts of cellular data.</p>		<p>MQTT is great but I'm finding that the brokers lack many fundamental features required for real world applications.</p>	"
35181722,58080839,35181722,3,0,Wed Feb 03 16:06:00 EST 2016,504554,"Why not just fix the client side to wait until the QOS1 acknowledgement has been sent before restarting? And may be use QOS2 for "once and once only delivery""
35181722,58081570,35181722,3,0,Wed Feb 03 16:22:00 EST 2016,681671,"That is obvious but there could be a bug that prevents the acknowledgement from being sent in a particular case. The whole thing can't rely solely on the application being bug free as no one can guarantee that. A higher level safety net external to the application code is required."
