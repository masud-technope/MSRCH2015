thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42092562,42092562,null,1,0,Tue Feb 07 14:37:00 EST 2017,959681,"<p>We are implementing an IoT telemetry solution using Azure IoT Hub.  By using the project <a href="https://github.com/Azure-Samples/iot-hub-c-thingdev-getstartedkit" rel="nofollow noreferrer">here</a> we were able to implement a successful basic solution on an <a href="https://www.sparkfun.com/products/13678" rel="nofollow noreferrer">ESP8266</a>.  However we would like the ESP to work also as a Web server on the local WiFi network, mainly for initial configuration purposes.</p>		<p>If we add to the aforementioned project this line: </p>		<pre><code>#include &lt;ESP8266WebServer.h&gt;    	ESP8266WebServer server(80);	</code></pre>		<p>the project compile but we keep getting "core dumps" on the ESP and the device stops working.</p>		<blockquote>	  <p>Fatal exception 29(StoreProhibitedCause): epc1=0x4000e1b2,	  epc2=0x00000000, epc3=0x00000000, excvaddr=0x00000004, depc=0x00000000</p>	  	  <p>Exception (29): epc1=0x4000e1b2 epc2=0x00000000 epc3=0x00000000	  excvaddr=0x00000004 depc=0x00000000</p>	  	  <p>ctx: cont  sp: 3fff4700  Soft WDT reset</p>	  	  <p>ctx: cont  sp: 3fff4460 end: 3fff4ce0 offset: 01b0</p>	  	  <blockquote>	    <blockquote>	      <blockquote>	        <p>stack>>> 3fff4610:  40001da0 00000078 00000000 00000010   3fff4620:  40001f46 0000000d 66089700 263a390c   3fff4630:  66666633 30303734	        88fd4100 5da4cdaf   3fff4640:  2395829e 2c6ea747 4f2f4c52 72696e6d<br>	        3fff4650:  00000000 2e353230 306c7263 5503061d   3fff4660:  00000000	        3fff4740 3fff4740 3fffa878   3fff4670:  00000000 3fff46e0 3fff46e0	        3ffec9ba   3fff4680:  40002514 3fffdd3c 3fff4ce0 3fff4700   3fff4690: 	        00000000 00000008 00000008 00000001   3fff46a0:  00000000 3fff4700	        00000000 3fff4638</p>	      </blockquote>	    </blockquote>	  </blockquote>	</blockquote>		<p>Â¿ Does anyone experienced this problem and found a way to fix it ?</p>	"
42092562,71441553,42092562,3,0,Thu Feb 09 13:15:00 EST 2017,959681,"It was a good try but it didn't work.  I added also the core dump to the question."
42092562,71380469,42092562,3,0,Wed Feb 08 05:46:00 EST 2017,5730046,"Could it be the tcp port issue? can you try another port other than 80 for the web server?"
42092562,72366564,42092562,3,0,Mon Mar 06 06:36:00 EST 2017,7537914,"ESP8266 has low RAM resources run both Web Server and Azure IoT Hub, as the exception 29 says Store Prohibited Cause.	Link:	[ESP8266](https://cdn.sparkfun.com/datasheets/Wireless/WiFi/ESP8266ModuleV1.pdf)	,[ESP8266Arduino](https://github.com/esp8266/Arduino/blob/master/doc/exception_causes.md)	and [EspExceptionDecoder](https://github.com/me-no-dev/EspExceptionDecoder/releases/tag/1.0.6)"
42092562,45242815,42092562,2,2,Fri Jul 21 16:46:00 EDT 2017,8345198,"<p>I had almost an identical setup (using ESP8266 to host a WiFiServer and also periodically sending messages over the Azure IoT Hub), and what solved the problem for me was very careful memory management. Your stack trace even matches mine (epc1 and excvaddr are identical).</p>		<p>I minimized calls to malloc/free to try to keep my heap from fragmenting, and that solved it for my purposes. I think this is just a heavily load for the chip memory to handle.</p>	"
42092562,45306999,42092562,2,1,Tue Jul 25 14:59:00 EDT 2017,1252334,"<p>I think <a href="https://github.com/esp8266/Arduino/issues/3392" rel="nofollow noreferrer" title="this">this</a> and <a href="https://github.com/esp8266/Arduino/issues/2075" rel="nofollow noreferrer" title="this">this</a> issues are worth looking at. Both authors are using ESP8266WebServer with WiFiClientSecure and are experiencing the same problem. @Jeroen88 pointed out a possible solution <a href="https://github.com/esp8266/Arduino/issues/3428" rel="nofollow noreferrer" title="here">here</a>.</p>		<p>Let me quote:</p>		<blockquote>	  <p>Memory is leaking (some 24 bytes, depending on hostName size) every	  time I use ESP8266HTTPClient to GET data from a secure site.</p>	  	  <p>Drilled down the problem to SSLContext::connect(ClientContext* ctx,	  const char* hostName, uint32_t timeout_ms). In this function memory is	  allocated using the function ssl_ext_set_host_name(ext, hostName);	  this memory is, however in my opinion, never freed.</p>	  	  <p>Added just before the end of the connect function:	  ssl_ext_set_host_name(ext, nullptr); Now no more memory is leaking.</p>	  	  <p>Complete function:</p>		<pre><code>void connect(ClientContext* ctx, const char* hostName, uint32_t timeout_ms)	{	    SSL_EXTENSIONS* ext = ssl_ext_new();	    ssl_ext_set_host_name(ext, hostName);	    ssl_ext_set_max_fragment_size(ext, 4096);	    if (_ssl) {	        /* Creating a new TLS session on top of a new TCP connection.	           ssl_free will want to send a close notify alert, but the old TCP connection	           is already gone at this point, so reset s_io_ctx. */	        s_io_ctx = nullptr;	        ssl_free(_ssl);	        _available = 0;	        _read_ptr = nullptr;	    }	    s_io_ctx = ctx;	    _ssl = ssl_client_new(_ssl_ctx, 0, nullptr, 0, ext);	    uint32_t t = millis();		    while (millis() - t &lt; timeout_ms &amp;&amp; ssl_handshake_status(_ssl) != SSL_OK) {	        uint8_t* data;	        int rc = ssl_read(_ssl, &amp;data);	        if (rc &lt; SSL_OK) {	            break;	        }	    }	    ssl_ext_set_host_name(ext, nullptr); // THIS FUNCTION FREEs the host_name	}	</code></pre>	</blockquote>	"
