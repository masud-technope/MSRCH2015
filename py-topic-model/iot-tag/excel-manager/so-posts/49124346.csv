thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
49124346,49124346,null,1,1,Tue Mar 06 06:02:00 EST 2018,2279854,"<p>I'm new to ipv6 and libcoap. I'm using the "coap-server" example provided in <a href="https://github.com/obgm/libcoap/blob/develop/examples/coap-server.c" rel="nofollow noreferrer">libcoap</a> for testing my coap client. I cannot get coap-server to listent to multicast to work properly. I've tried the following commands</p>		<pre><code>./coap-server -g FF02::FD	# return "join: setsockopt: Protocol error"		# this method is found in https://manpages.debian.org/stretch/libcoap-1-0-bin/coap-server.5.en.html	./coap-server -g FF02:FD	# return "join: cannot resolve multicast address: Name or service not known"	</code></pre>		<p>Can anyone help me with this? Thanks.</p>	"
49124346,85284309,49124346,3,1,Tue Mar 06 20:36:00 EST 2018,2435820,"`FF02:FD` is not a valid IPv6 address."
49124346,97650486,49124346,3,0,Tue Apr 02 08:04:00 EDT 2019,341927,"That is a multicast address - see the spec: "All CoAP Nodes" address FF0X::FD, from the "IPv6 Multicast	      Address Space Registry", in the "Variable Scope Multicast	      Addresses" space (RFC 3307).  Note that there is a distinct	      multicast address for each scope that interested CoAP nodes should	      listen to; CoAP needs the Link-Local and Site-Local scopes only"
49124346,49139934,49124346,2,1,Tue Mar 06 21:06:00 EST 2018,2435820,"<p>Looking at the <a href="https://elixir.bootlin.com/linux/latest/source/net/ipv6/ipv6_sockglue.c#L635" rel="nofollow noreferrer">Linux source code</a>, file <code>source/net/ipv6/ipv6_sockglue.c</code>, this check decides whether to return the "Protocol error" error code:</p>		<pre><code>    retv = -EPROTO;	    if (inet_sk(sk)-&gt;is_icsk)	        break;	</code></pre>		<p>So, the code returns the error if the socket is connection oriented (e.g. a TCP socket).</p>		<p>Looks like libcoap opens sockets for both address families (IPv4 and IPv6), for both UDP and TCP and and also secured versions of those (DTLS and TLS respectively).</p>		<p>As a result, you may need to change the example to iterate for all opened CoAP endpoints and find the IPv6 UDP one (I don't see any command line options for that. So, instead of using the first one as currently here:</p>		<pre><code>setsockopt(ctx-&gt;endpoint-&gt;sock.fd, IPPROTO_IPV6, IPV6_JOIN_GROUP, (char *)&amp;mreq, sizeof(mreq));	</code></pre>		<p>you should iterate for all open ones and check whether the <code>proto</code> field and the address family matches</p>		<pre><code>coap_endpoint_t *ep = ctx-&gt;endpoint;	while (ep != NULL &amp;&amp; ep-&gt;proto != COAP_PROTO_UDP	       &amp;&amp; /* TODO: check address family */) {	    ep = ep-&gt;next;	}		if (ep != NULL) {	    result = setsockopt(ep-&gt;sock.fd, IPPROTO_IPV6, IPV6_JOIN_GROUP, (char *)&amp;mreq, sizeof(mreq));	}	</code></pre>	"
49124346,97650267,49139934,3,0,Tue Apr 02 07:56:00 EDT 2019,341927,"If understand you correctly, you are saying that this is a bug in the libcoap example application, right?"
