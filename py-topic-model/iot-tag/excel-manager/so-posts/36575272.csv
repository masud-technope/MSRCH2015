thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
36575272,36575272,null,1,3,Tue Apr 12 13:48:00 EDT 2016,441632,"<p>I am trying to figure out what encryption/security strategy to adopt for IoT based solution.	Here's my assessment. </p>		<ol>	<li><p>The fundamental assumption of any security system is that the algorithm can be cracked, hence the key has to protected.</p></li>	<li><p>TLS will act as a protective layer for packets sent over the air. This is mostly taken care by the wireless device. This is not enough &amp; data has to be protected further.</p></li>	<li><p>The data that has to be encrypted we can use various encryption algorithms. Out of that AES seems to be the most reliable one. I am not able to confirm if AES is a public - private key algorithm or symmetric key (single key for encode-decode) algorithm. Please shed more light on this. </p></li>	</ol>		<p>Has anyone come across a strategy wherein:</p>		<ol>	<li><p>Every device / node has a different encryption key. This is very important because a hacker can simulate certain periodic data without understanding the underlying encryption. So if the hacker is able to figure out that xyz packet produces certain behaviour in the device, encryption is of little consequence. </p></li>	<li><p>Can we change the secret key on the fly, so something like for each session created, the server will update the key for the next connection ? </p></li>	</ol>		<p>Are my assumptions right ? Also it would be great if you can suggest me best practices for security in an IoT environment.</p>		<p>Regards, </p>		<p>Chaitannya</p>	"
36575272,60809333,36575272,3,1,Wed Apr 13 18:05:00 EDT 2016,3547124,"Though I don't have the ability to vote, I agree with Scott that this is off topic. An example of an on topic question might be how to scale such security."
36575272,60752846,36575272,3,3,Tue Apr 12 14:58:00 EDT 2016,2224584,"I'm voting to close this question as off-topic because asking for security advice is better suited for [Information Security Stack Exchange](https://security.stackexchange.com/) not Stack Overflow."
36575272,60771490,36575272,3,1,Wed Apr 13 00:22:00 EDT 2016,1718554,"What do you mean by *TLS... is not enough and data has to be protected further.*?  If you are using TLS to communicate between devices then you don't need any further encryption..."
36575272,81403593,36575272,3,0,Fri Nov 10 16:01:00 EST 2017,451475,"If you are creating a mass market IoT device you really need to hire a cryptographic domain expert with experience with IoT devices. That will save you in the long run and you will be able to sleep well at night. Otherwise it is almost guaranteed that there will be a security flaw."
36575272,36577313,36575272,2,3,Tue Apr 12 15:10:00 EDT 2016,3267940,"<p>Your assessment is not entirely correct. </p>		<ol>	<li><p>The assumption is not that the algorithm can be cracked, but that the algorithm and all input data other than the key is known to an attacker. In the case of AES, the standard is widely published, but this does not make it ineffective as it is designed so that the data cannot be easily decrypted without applying the key. AES128 and the other (higher) key sizes are considered secure enough to withstand modern day brute-force attacks.</p></li>	<li><p>The wireless device, assuming you are using WPA/WPA2, will encrypt traffic over the air however that encryption ceases to apply once the packets have been received in the wireless access point. They will not be encrypted between the access point and their final destination. </p></li>	<li><p>AES is a symmetrical key algorithm. There are two encryption strategies for you to consider. Encryption in transit between the source and the destination, and encryption at rest. It is unclear which of the two you are referring to, however each requires separate consideration and implementation. If you are referring to encryption in transit between servers, consider using an encrypted protocol such as HTTPS/SSL which is designed to encrypt data in transit using a variety of ciphers. AES is widely used as an appropriate cipher for encryption at rest, either at the file system level or using libraries to encode the data before storing in a database. </p></li>	<li><p>In the case of HTTPS, it is strongly recommended that each client/server have its own private key. In the case of AES, again, each server should encrypt data at rest using it's own key.</p></li>	<li><p>You are concerned about the possibility of packet capture and replay to control your server, however if you use a protocol similar to SSL, it will use a different key for each session to prevent pattern analysis via eavesdropping. If you are encrypting the data yourself to send, adding a simple time stamp or sequence number to the encoded data will ensure it has a vastly different encrypted output each time. For example <code>CONTROL|START|10:20pm</code> will result in completely different encrypted data to <code>CONTROL|START|10:21pm</code>. AES also allows the use of what is known as an initialisation vector (IV) that, by using a random seed, will encode the same data into a completely different output each time. </p></li>	</ol>		<p>There are also a number of IOT messaging systems provided by cloud providers such as Microsoft and Amazon that contain some of the encryption strategies that might be useful to you.</p>		<p>In regards to best practices, I am not recommending any particular vendor, however this link may be useful to show you how such a setup may operate: <a href="http://docs.aws.amazon.com/iot/latest/developerguide/iot-security-identity.html" rel="nofollow noreferrer">AWS IoT Security</a> </p>	"
36575272,60755681,36577313,3,0,Tue Apr 12 15:55:00 EDT 2016,441632,"Most of my issues are addressed. As of point no. 3 I was talking about encryption at rest. For this the question still remains, is it advisable to have different encryption key for different devices / nodes ?"
36575272,60803863,36577313,3,0,Wed Apr 13 15:45:00 EDT 2016,3267940,"It makes sense to use different keys for different servers/nodes so that one compromised server or node doesn't affect the security of the rest. The biggest issue will be finding a way to store the key in a separate location from the data itself. Often you can get around this by encrypting the data in the device and then storing it in an off-device database or storage bucket depending on your needs. It also depends on whether you are attempting to protect the data from physical or network based attackers."
36575272,60803887,36577313,3,0,Wed Apr 13 15:45:00 EDT 2016,3267940,"See also the developer section of this site for a good beginner to IoT security considerations https://www.owasp.org/index.php/IoT_Security_Guidance."
36575272,81403511,36577313,3,0,Fri Nov 10 15:59:00 EST 2017,451475,"Actiually AES with a keysize of 128-bits is considered secure enough to withstand modern day attacks. There is no AES key larger that 256-bits."
36575272,84434901,36577313,3,0,Sat Feb 10 06:26:00 EST 2018,3267940,"Yes agreed. 128 is strong enough to resist classical computing attacks & 128, 192 and 256 are the only key sizes. I have corrected the text."
36575272,47225539,36575272,2,-1,Fri Nov 10 14:56:00 EST 2017,2650504,"<p>I am working in an open protocol communication project for IoT. This project works with AES (symetric keys) and RSA (assymetric keys) encryptions protocols, where AES encrypts the strings requests and RSA encrypts the AES keys using the RSA public keys. These encryption protocols work together over each request.</p>		<p>Communication between applications and devices are also <strong>sequenced</strong>, so if a request were "sniffed" and "re-sent" through the network, it will not work, because requests are valid only once. Every new request <strong>must</strong> has a new sequence number, and the sequence number is also encrypted.</p>		<p>Each application and each device have its own pair of RSA keys (public and private keys), but they keep only its public keys in the local database.</p>		<p>These features improve security to the communication process and both (application and device), do not need to keep the RSA private keys from each other. Private keys are stored in the project database.</p>		<p>Have a look at the followzup project wiki.</p>	"
36575272,81403744,47225539,3,1,Fri Nov 10 16:05:00 EST 2017,451475,"Has this been developed in concert with a IoT cryptographic domain expert?"
36575272,81404330,47225539,3,0,Fri Nov 10 16:20:00 EST 2017,451475,"Updated - 1. Having looked at the WiKi it is obvious that "style" is put ahead of usability. 2. How are the private keys kept secure, are they secured with an HSM? 3. This is troubling because it is inaccurate: *"encrypted with the public key can only be decrypted with the corresponding private key, and **vice-versa**"* emphasis mine. Also *"Due to the CPU resource demanded by the RSA algorithm, this protocol is indicated to encrypt limited size strings"*."
36575272,81406394,47225539,3,0,Fri Nov 10 17:20:00 EST 2017,451475,"**Do not use**. It is clear that at a minimum the security write-up is flawed in it's unnderstanding of RSA. Thus the code can not be trusted."
