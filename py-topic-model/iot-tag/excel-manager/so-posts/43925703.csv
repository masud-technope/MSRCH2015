thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
43925703,43925703,null,1,0,Thu May 11 21:17:00 EDT 2017,1747565,"<p>I'm following the documentation <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-live-data-visualization-in-web-apps" rel="nofollow noreferrer">here</a> to visualize data from IoT hub. In my use case, I have multiple devices sending data to the IoT hub. I'd like to know if it's possible to use single web app to visualize data from a specific device, which parameter is sent through HTTP GET method. The current workaround simply ignores data from other devices, which is not ideal. I wonder if there is a right way to do this.</p>		<p>Thanks,</p>	"
43925703,43991839,43925703,2,1,Tue May 16 03:07:00 EDT 2017,4989668,"<p>Generally speaking, as a consumer side, we can leverage <code>deviceId</code> parameter to filter the data from the specific device.</p>		<p>As the demo <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-node-node-getstarted#create-a-simulated-device-app" rel="nofollow noreferrer">Create a simulated device app</a> we can send the data from device with particular <code>deviceId</code> to IOT hub, then we can create a new rule in the demo used in your post, <a href="https://github.com/Azure-Samples/web-apps-node-iot-hub-data-visualization" rel="nofollow noreferrer">https://github.com/Azure-Samples/web-apps-node-iot-hub-data-visualization</a>, to get the HTTP get params from the URL, and set as a filter against the <code>deviceId</code>. </p>		<p>As the web-apps-node-iot-hub-data-visualization application uses expressjs as a http server, so we can create a route rule to get <code>deviceId</code> from url like:</p>		<pre><code>app.get('/deviceId/:id', (req, res) =&gt; {	  console.log(req.params);	  var iotHubReader = new iotHubClient(connectionString, consumerGroup);	  iotHubReader.startReadMessage(function (obj, date) {	    try {		      if (obj.deviceId == req.params.deviceId) {	        console.log(date);	        date = date || Date.now()	        wss.broadcast(JSON.stringify(Object.assign(obj, {	          time: moment.utc(date).format('YYYY:MM:DD[T]hh:mm:ss')	        })));	      }		    } catch (err) {	      console.log(obj);	      console.error(err);	    }	  });	  res.sendFile(__dirname + '/public/index.html');	})	</code></pre>		<p>And then we can visit the application with deivceId like:	<code>&lt;hostname&gt;/deviceId/myFirstNodeDevice</code></p>	"
43925703,75127701,43991839,3,0,Thu May 18 14:54:00 EDT 2017,1747565,"Thanks for the feedback, I wonder `req.params.deviceId` should be  `req.params.id`. Another problem I ran into while working in this change is `res.sendFile(__dirname + '/public/index.html');` My browser (chrome) generates error messages `Uncaught SyntaxError: Unexpected token <` (index.html line 1) I googled around but couldn't find a way to solve this. Any thoughts? Thanks!"
43925703,75128956,43991839,3,0,Thu May 18 15:21:00 EDT 2017,4989668,"per my experience,  it may be the issue that there are something wrong in expressjs route code, you can try to check the similar issue at https://github.com/expressjs/express/issues/2891"
43925703,75140185,43991839,3,0,Thu May 18 20:54:00 EDT 2017,1747565,"I finally figured it out. The real problem here is the `index.html` is not loaded with correct path. It becomes `hostname/deviceId/index.html`. Hence, all the contents in `index.html` cannot be found."
