thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
35363065,35363065,null,1,1,Fri Feb 12 12:47:00 EST 2016,4361588,"<p>I did the tutorial to visualize data from my raspberry pi using the IoT Foundation Service and a the .js boilerplate.</p>		<p>I followed the following tutorial:</p>		<p><a href="https://developer.ibm.com/recipes/tutorials/visualizing-your-data/" rel="nofollow">https://developer.ibm.com/recipes/tutorials/visualizing-your-data/</a></p>		<p>Everything works fine.</p>		<p>Now I tried to add a the Single Sign On Service for authentication purposes. I created a cloud registry and added two test users. Afterwards I bound the service to my IoT visualisation .js app and did the steps to integrate my app with the service. I followed the official documentation steps for this (point "Configuring a Node.js app"):</p>		<p><a href="http://www.ng.bluemix.net/docs/services/SingleSignOn/configure_apps.html#tsk_configuringnodejsapp_express4" rel="nofollow">http://www.ng.bluemix.net/docs/services/SingleSignOn/configure_apps.html#tsk_configuringnodejsapp_express4</a></p>		<p>I modified the files on my pc and uploaded them using the CL CLI. The problem is, that it didn't change anything. I can access my app as before and I don't see any login page.</p>		<p>Here are my files:</p>		<p>package.json</p>		<pre><code>{	  "name": "iot-visualization",	  "version": "0.1.0",	  "private": true,	  "scripts": {	    "start": "node app.js"	  },	  "dependencies": {	    "passport": "*",	    "cookie-parser": "*",	    "express-session": "*",	    "passport-idaas-openidconnect": "*",	    "express": "~4.2.0",	    "serve-favicon": "~2.1.0",	    "morgan": "~1.0.0",	    "cookie-parser": "~1.0.1",	    "body-parser": "~1.0.0",	    "debug": "~0.7.4",	    "jade": "~1.3.0",	    "stylus": "0.42.3",	    "express-session": "^1.8.1"	  }	}	</code></pre>		<p>app.js (URL modified)</p>		<pre><code>/*******************************************************************************	* Copyright (c) 2014 IBM Corporation and other Contributors.	*	* All rights reserved. This program and the accompanying materials	* are made available under the terms of the Eclipse Public License v1.0	* which accompanies this distribution, and is available at	* http://www.eclipse.org/legal/epl-v10.html	*	* Contributors:	* IBM - Initial Contribution	*******************************************************************************/		var express = require('express');	var path = require('path');	var favicon = require('serve-favicon');	var logger = require('morgan');	var cookieParser = require('cookie-parser');	var bodyParser = require('body-parser');	var session = require('express-session');			var index = require('./routes/index');		var app = express();		var http_host = (process.env.VCAP_APP_HOST || '0.0.0.0');	var http_port = (process.env.VCAP_APP_PORT || 7000);		app.set('port', http_port);	app.set('host',http_host);		// view engine setup	app.set('views', path.join(__dirname, 'views'));	app.set('view engine', 'jade');	//use favicon	app.use(favicon(__dirname + '/public/images/favicon.ico'));	app.use(logger('dev'));	app.use(bodyParser.json());	app.use(bodyParser.urlencoded());	app.use(cookieParser());	// add session to store the api-key and auth token in the session	app.use(session({secret: 'xxxxxxxxxx',saveUninitialized: true,	                 resave: true}));	app.use(require('stylus').middleware(path.join(__dirname, 'public')));		var passport = require('passport'); 	var cookieParser = require('cookie-parser');	var session = require('express-session');		app.use(cookieParser());	app.use(session({resave: 'true', saveUninitialized: 'true' , secret: 'keyboard cat'}));	app.use(passport.initialize());	app.use(passport.session()); 		passport.serializeUser(function(user, done) {	   done(null, user);	}); 		passport.deserializeUser(function(obj, done) {	   done(null, obj);	});         		// VCAP_SERVICES contains all the credentials of services bound to	// this application. For details of its content, please refer to	// the document or sample of each service.  	var services = JSON.parse(process.env.VCAP_SERVICES || "{}");	var ssoConfig = services.SingleSignOn[0]; 	var client_id = ssoConfig.credentials.clientId;	var client_secret = ssoConfig.credentials.secret;	var authorization_url = ssoConfig.credentials.authorizationEndpointUrl;	var token_url = ssoConfig.credentials.tokenEndpointUrl;	var issuer_id = ssoConfig.credentials.issuerIdentifier;	var callback_url = 'https://xxxxx.mybluemix.net/auth/sso/callback';        		var OpenIDConnectStrategy = require('passport-idaas-openidconnect').IDaaSOIDCStrategy;	var Strategy = new OpenIDConnectStrategy({	                 authorizationURL : authorization_url,	                 tokenURL : token_url,	                 clientID : client_id,	                 scope: 'openid',	                 response_type: 'code',	                 clientSecret : client_secret,	                 callbackURL : callback_url,	                 skipUserProfile: true,	                 issuer: issuer_id}, 	    function(iss, sub, profile, accessToken, refreshToken, params, done)  {	                process.nextTick(function() {	        profile.accessToken = accessToken;	        profile.refreshToken = refreshToken;	        done(null, profile);	            })	}); 		passport.use(Strategy); 	app.get('/login', passport.authenticate('openidconnect', {})); 		function ensureAuthenticated(req, res, next) {	    if(!req.isAuthenticated()) {	                req.session.originalUrl = req.originalUrl;	        res.redirect('/login');	    } else {	        return next();	    }	}		app.get('/auth/sso/callback',function(req,res,next) {               	             var redirect_url = req.session.originalUrl;                	             passport.authenticate('openidconnect', {	                     successRedirect: redirect_url,                                	                     failureRedirect: '/failure',                        	          })(req,res,next);	        });		app.get('/failure', function(req, res) { 	             res.send('login failed'); });		app.use(express.static(path.join(__dirname, 'public')));			app.use('/',index);		app.use(function(req, res, next) {	    if(req.session.api_key)	    res.redirect("/dashboard");	  else	    res.redirect('/login');	});		/// error handlers		// development error handler	// will print stacktrace	if (app.get('env') === 'development') {	    app.use(function(err, req, res, next) {	        res.status(err.status || 500);	        res.render('error', {	            message: err.message,	            error: err	        });	    });	}		// production error handler	// no stacktraces leaked to user	app.use(function(err, req, res, next) {	    res.status(err.status || 500);	    res.render('error', {	        message: err.message,	        error: {}	    });	});		var server = app.listen(app.get('port'), app.get('host'), function() {	  console.log('Express server listening on ' + server.address().address + ':' + server.address().port);	});		module.exports = app;	</code></pre>		<p>Any ideas?</p>		<p>// edit</p>		<p>There was not .cfignore file when I first started the tutorial. So I created one with the following content in my apps root folder:</p>		<pre><code>node_modules/passport	node_modules/cookie-parser	node_modules/express-session	node_modules/passport-idaas-openidconnect	</code></pre>		<p>Is this correct and why I didn't have this file before with the content from the tutorial:</p>		<pre><code>node_modules	</code></pre>	"
35363065,58461261,35363065,3,0,Sat Feb 13 09:03:00 EST 2016,4361588,"Ok, so I don't need to set the NODE_MODULES_CACHE to false? I also edited my first post regarding the .cfignore file."
35363065,58444685,35363065,3,0,Fri Feb 12 18:07:00 EST 2016,4454969,"I think your problem could be related to the fact Bluemix maintains a cache directory that is persisted between builds. This cache is used to store resolved dependencies so they donâ€™t have to be downloaded and installed every time you deploy.    You may need to override this setting and disable it by setting NODE_MODULES_CACHE false so your updated dependencies are deployed.  I have asked my colleague to review your post and comment further."
35363065,58445004,35363065,3,0,Fri Feb 12 18:17:00 EST 2016,4825009,"@ValerieLampkin Although it does use a cache, Bluemix will always run `npm install` with your new package.json. NPM identifies that the cache is missing the newly added module and will install it.  Regardless of that, the app would have crashed saying the module doesn't exist if the module wasn't really there."
35363065,35369714,35363065,2,2,Fri Feb 12 18:27:00 EST 2016,4825009,"<p>You need to add the <code>ensureAuthenticated</code> function in to your express middleware stack. This function needs to be called whenever a request is made to your application.  For example, you could add it to ALL requests that go to your application by adding this:</p>		<pre><code>app.use(ensureAuthenticated);	</code></pre>	"
35363065,58461109,35369714,3,0,Sat Feb 13 08:56:00 EST 2016,4361588,"I added this before the last 4 lines of my original code. But it doesn't work. Am I doing it wrong?"
35363065,58550671,35369714,3,0,Tue Feb 16 06:56:00 EST 2016,4361588,"I'm still having this issue."
35363065,35426830,35363065,2,6,Tue Feb 16 07:57:00 EST 2016,5397366,"<p>First of all I assume that the value of the variable callback_url is 'xxxxx.mybluemix.net/auth/sso/callback' as an example. If not, you should replace the 'xxxxx' with your application name.</p>		<p>As reported in the <a href="https://www.ng.bluemix.net/docs/services/SingleSignOn/configure_apps.html#tsk_configuringnodejsapp_express4">Single Sign On - Configuring a Node.js app</a> docs: </p>		<blockquote>	  <p>The passport-idaas-openidconnect module works with passport versions 0.1.1 up to 0.3.2. Versions later than 0.3.2 might not work correctly. </p>	</blockquote>		<p>I would ensure that you are using a correct passport version using (e.g.) this line in your package.json</p>		<pre><code>"passport": "^0.2.2",	</code></pre>		<p>If you want you could simplify your callback function for test purposes like the following (it could throw an error not finding req.session.originalUrl) and expand it later:</p>		<pre><code>app.get('/auth/sso/callback',function(req,res,next) {               	    passport.authenticate('openidconnect', {	                                         successRedirect: "/home",                              	                                         failureRedirect: '/failure',                        	                                        }	                      )(req,res,next);	 });	</code></pre>		<p>The rest of your code seems OK to me, as it was already suggested you have to chain the "ensureAuthenticated" function to each app.get, app.post etc. that you want to put under authentication.</p>		<p>For example try to do something like:</p>		<pre><code>app.get('/home', ensureAuthenticated, function(req, res) { 	   var htmlSplashPage = "&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;Hello "+JSON.stringify(req.session.passport.user._json.displayName)+"&lt;/h1&gt;&lt;/body&gt; &lt;/html&gt;"; 	   res.writeHead(200, {'Content-Type': 'text/html','Content-Length':htmlSplashPage.length});	   res.write(htmlSplashPage);	   res.end();	 });	</code></pre>		<p>Doing that when calling the /home GET the function ensureAuthenticated is called before all the rest, and only if the user is already authenticated the next function (home) is executed, otherwise you will be redirected to the login page.</p>	"
35363065,58554251,35426830,3,0,Tue Feb 16 08:50:00 EST 2016,5397366,"You need to chain the ensureAuthenticated to all the functions that need user authentication check. 	Try to create a dummy app.get('/test', ensureAuthenticated, function(req, res) {[...]}); and call it from the browser to see if the  ensureAuthenticated  is executed. It should work in the following way:		1. you call the GET	2. first ensureAuthenticated  is executed and the condition !req.isAuthenticated() should be verified. For this reason it will redirect to the login page"
35363065,58555509,35426830,3,0,Tue Feb 16 09:21:00 EST 2016,4361588,"I put this function in my code `app.get('/test', ensureAuthenticated, function(req, res) {	    res.send('Hello World!');	});`. When I call my Url with /test I get instantly redirected to the /dashboard page. I also can't find any signs that the function was executed in my log (but as you said, the login page should be called if it was executed)."
35363065,58599582,35426830,3,0,Wed Feb 17 08:27:00 EST 2016,5397366,"when you register as a new user tecnically you are also logged in, so this behaviour is correct."
35363065,58553085,35426830,3,0,Tue Feb 16 08:16:00 EST 2016,4361588,"I changed the passport version in the package.json. I also changed my callback function with yours (but instead of /home i wrote /dashboard). This didn't make the login popup either. I tried to put in your ensureAuthenticated in the app.get functions, but actually I don't know in which. Because I only see the login, callback and the failure functions and they don't need this check right? My only page is /dashboard but it is called with a res.redirect("/dashboard")."
35363065,58556834,35426830,3,0,Tue Feb 16 09:54:00 EST 2016,5397366,"Yes, you're right. Try to to call your URL from another browser, or from an Incognito window of the same browser, or after deleting the cookies. You should be redirected to the SSO login page"
35363065,58557729,35426830,3,0,Tue Feb 16 10:14:00 EST 2016,4361588,"That worked. But I still get redirected to the dashboard page if I use my sites url."
35363065,58599685,35426830,3,0,Wed Feb 17 08:30:00 EST 2016,4361588,"But how do I prevent this? The only reason I want to use a login is to restrict access to my application. If one can just register and login, all this makes no sense."
35363065,58599773,35426830,3,0,Wed Feb 17 08:33:00 EST 2016,5397366,"You can customize the page that is opened when redirecting to /login. See here: https://www.ng.bluemix.net/docs/services/SingleSignOn/customizing_pages.html"
35363065,58559535,35426830,3,0,Tue Feb 16 10:58:00 EST 2016,5397366,"This because in your callback you still have the test code. You should restore it to the original version you posted, the one with req.session.originalUrl;     ""
35363065,58596057,35426830,3,0,Wed Feb 17 06:29:00 EST 2016,4361588,"It's redirecting me now to the login page. But, if I just register as a new user I can access the dashboard page without a problem, even though I only have two users registered in the SSO service."
