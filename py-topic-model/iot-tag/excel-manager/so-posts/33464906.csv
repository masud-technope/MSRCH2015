thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
33464906,33464906,null,1,1,Sun Nov 01 17:20:00 EST 2015,846281,"<p>I have this code:</p>		<pre><code>private const string route = "/api/Print";	public bool Update(string header, string tc)	{	    bool success = false;	    using (var client = new HttpClient())	    {	        client.BaseAddress = new Uri("my uri");	        client.DefaultRequestHeaders.Accept.Clear();	        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));	        var print = new Print { CompanyRef = new Guid(), Header = header, TC = tc };	        var response = client.PutAsJsonAsync(route, print);	    }	    success = true;		    return success;	}		public sealed class Print	{	    public string Header { get; set; }	    public string TC { get; set; }	    public System.Guid CompanyRef { get; set; }	}	</code></pre>		<p>I call it like so:</p>		<pre><code>Update(" header", " string tc");	</code></pre>		<p>In C# desktop app it works.	In Windows 10 IoT on a Raspberry Pi2 device it does not work.	Yet, when i am calling a Get from my Web API server *in Iot) it works fine.	?</p>	"
33464906,75670368,33464906,3,0,Fri Jun 02 16:13:00 EDT 2017,2093880,"It has been awhile since you asked the question, could you please share the answer if any."
33464906,46011513,33464906,2,1,Sat Sep 02 07:26:00 EDT 2017,3170087,"<p>I am using this code for a year now and it works:</p>		<pre><code>    using Windows.Web.Http;			    using (HttpClient httpClient = new HttpClient())	    {	        httpClient.DefaultRequestHeaders.Add("Cache-Control", "no-cache");	        try	        {	            var o = new	            {	                operation = "NewEvent",	                location_id = locationID,	                eventName = eventName	            };		            HttpStringContent content = new HttpStringContent(JsonConvert.SerializeObject(o), Windows.Storage.Streams.UnicodeEncoding.Utf8, "application/json");		            HttpResponseMessage response = await httpClient.PostAsync(new Uri(urlPostData), content);	            response.EnsureSuccessStatusCode();	            string responseBody = await response.Content.ReadAsStringAsync();	            // TODO: Do something with the responseBody	        }	        catch (Exception)	        {	            // TODO: Deal with exception - could be a server not found, 401, 404, etc.	        }	    }	</code></pre>	"
33464906,78983280,46011513,3,0,Sat Sep 02 07:28:00 EDT 2017,846281,"HI, it has been a while since I looked at this. I shall see if it works for me when I am back for holiday. thanks :)"
