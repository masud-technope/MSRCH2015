thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57396012,57396012,null,1,0,Wed Aug 07 13:49:00 EDT 2019,4215513,"<p>I want to write a console application that writes device message to the cloud. I have written a cloud2-device application using IOT hub and preconfig all of my Hub device ID and works.</p>		<p>Here is my sample code to connect-2-cloud-message using C# in visual studio.</p>		<pre><code>using System;	using System.Collections.Generic;	using System.Linq;	using System.Text;	using System.Threading;	using System.Threading.Tasks;	using System.Windows.Input;	using System.Diagnostics.Tracing;	using Microsoft.Azure.Devices.Client;		namespace Device2CloudApp	{	    class Program	    {		        // private our own fields for connection to IOT.		        private DeviceClient deviceClient;			        // use the device specific connection string.		        private const string IOT_HUB_CONN_STRING = "HostName=eNstaHub.azure-devices.net;DeviceId=GcobaniNumber1;SharedAccessKey="";	        private const string IOT_HUB_DEVICE = "GcobaniNumber1";	        private const string IOT_HUB_DEVICE_LOCATION = "West US";			        /*	         *  We calling all method inside the constructor for memory allocation. 	         */	       public  Program ()	        {		            SendMessageToIOTHubAsync(deviceClient).Wait();		        }		        private async Task SendMessageToIOTHubAsync(DeviceClient deviceClient)	        {	            try	            {	                var payload = "{" +	                "\"deviceId\":\"" + IOT_HUB_DEVICE + "\", " +	                "\"location\":\"" + IOT_HUB_DEVICE_LOCATION + "\", " +	                "\"localTimestamp\":\"" + DateTime.Now.ToLocalTime() + "\"" +	                "}";		                var msg = new Message(Encoding.UTF8.GetBytes(payload));	                System.Diagnostics.Debug.WriteLine("\t{0} &gt; Sending message:[{1}]", DateTime.Now.ToLocalTime(), payload);	                await deviceClient.SendEventAsync(msg);	            }catch(Exception ex)	            {	                System.Diagnostics.Debug.WriteLine("!!!" + ex.Message);	            }	        }			        static void Main(string[] args)	        {	            DeviceClient deviceClient = DeviceClient.CreateFromConnectionString(IOT_HUB_CONN_STRING);		            // creating a Constructor here for method declarion.		            Program prg = new Program();	        }	    }	}	</code></pre>		<p>On my console its not connection to the cloud-IOT hub;	It throws an System.NullreferenceException.</p>	"
57396012,57396080,57396012,2,0,Wed Aug 07 13:54:00 EDT 2019,270142,"<p>You have a local <code>deviceClient</code> in the <code>main</code> method which is not the one used when communicating with Azure.</p>		<p>Remove that one, and create the instance that you have in the class instead. </p>	"
57396012,57404094,57396012,2,0,Thu Aug 08 01:28:00 EDT 2019,8546089,"<p>It should work as following code.</p>		<pre><code>using System;	using System.Collections.Generic;	using System.Linq;	using System.Text;	using System.Threading;	using System.Threading.Tasks;	using System.Windows.Input;	using System.Diagnostics.Tracing;	using Microsoft.Azure.Devices.Client;		namespace Device2CloudApp	{	    class Program	    {	        // private our own fields for connection to IOT.	        private DeviceClient deviceClient;    		        // use the device specific connection string.		        private const string IOT_HUB_CONN_STRING = "HostName=eNstaHub.azure-devices.net;DeviceId=GcobaniNumber1;SharedAccessKey="";	        private const string IOT_HUB_DEVICE = "GcobaniNumber1";	        private const string IOT_HUB_DEVICE_LOCATION = "West US";			        /*	         *  We calling all method inside the constructor for memory allocation. 	         */	        public  Program ()	        {		            DeviceClient deviceClient = DeviceClient.CreateFromConnectionString(IOT_HUB_CONN_STRING);	            SendMessageToIOTHubAsync(deviceClient).Wait();		        }		        private async Task SendMessageToIOTHubAsync(DeviceClient deviceClient)	        {	            try	            {	                var payload = "{" +	                "\"deviceId\":\"" + IOT_HUB_DEVICE + "\", " +	                "\"location\":\"" + IOT_HUB_DEVICE_LOCATION + "\", " +	                "\"localTimestamp\":\"" + DateTime.Now.ToLocalTime() + "\"" +	                "}";		                var msg = new Message(Encoding.UTF8.GetBytes(payload));	                System.Diagnostics.Debug.WriteLine("\t{0} &gt; Sending message:[{1}]", DateTime.Now.ToLocalTime(), payload);	                await deviceClient.SendEventAsync(msg);	            }catch(Exception ex)	            {	                System.Diagnostics.Debug.WriteLine("!!!" + ex.Message);	            }	        }			        static void Main(string[] args)	        {	            // creating a Constructor here for method declarion.		            Program prg = new Program(deviceClient);	        }	    }	}	</code></pre>	"
57396012,101295385,57404094,3,0,Thu Aug 08 07:29:00 EDT 2019,4215513,"Thanks team, first example did the trick i had managed to connect from device to cloud message. TelemetryData point is good constant field to use in your class. As it send reference to your IOT Hub for monitoring. I exclude other fields like temperature etc as were not part of my scope to this problem."
57396012,57404583,57396012,2,0,Thu Aug 08 02:56:00 EDT 2019,3246141,"<p>Please try this .Hope it helps.</p>		<p>Declare the constants first.</p>		<pre><code>    private const string DeviceKey = "your secret key";	    private const string DeviceId = "DeviceName";	</code></pre>		<p>And then create a connection string based on SymmetricKey</p>		<pre><code>     _deviceClient = DeviceClient.Create(IotHubUri, new 	     DeviceAuthenticationWithRegistrySymmetricKey(DeviceId, DeviceKey), TransportType.Mqtt);	</code></pre>		<p>Sample code of Simulator:</p>		<pre><code>   using System;	   using System.Text;	   using System.Threading.Tasks;	   using Microsoft.Azure.Devices.Client;	   using Newtonsoft.Json;	   namespace SimulatedDevice	   {	   class Program	    {	    private const string IotHubUri = "YourHubName.azure-devices.net";	    private const string DeviceKey = "Secret Key";	    private const string DeviceId = "DeviceId";	    private const double MinVoltage = 40;	    private const double MinTemperature = 10;	    private const double MinHumidity = 50;	    private static readonly Random Rand = new Random();	    private static DeviceClient _deviceClient;	    private static int _messageId = 1;		    static void Main(string[] args)	    {	        Console.WriteLine("Simulated device\n");	        _deviceClient = DeviceClient.Create(IotHubUri, new DeviceAuthenticationWithRegistrySymmetricKey(DeviceId, DeviceKey), TransportType.Mqtt);	        _deviceClient.ProductInfo = "Simulated_Client";		        SendDeviceToCloudMessagesAsync();	        Console.ReadLine();	    }		    private static async void SendDeviceToCloudMessagesAsync()	    {	        while (true)	        {	            var currentVoltage = MinVoltage + Rand.NextDouble() * 15;	            var currentTemperature = MinTemperature + Rand.NextDouble() * 20;	            var currentHumidity = MinHumidity + Rand.NextDouble() * 25;		            var telemetryDataPoint = new	            {		                deviceId = DeviceId,	                timestamp = DateTime.UtcNow,	                Temperature = currentTemperature,	                Humidity = currentHumidity,	                Voltage = currentVoltage,		            };	            var messageString = JsonConvert.SerializeObject(telemetryDataPoint);	            var message = new Message(Encoding.ASCII.GetBytes(messageString));		            await _deviceClient.SendEventAsync(message);	            Console.WriteLine("{0} &gt; Sending message: {1}", DateTime.Now, 	             messageString);		            await Task.Delay(2000);	          }	         }		      }	     }	</code></pre>	"
