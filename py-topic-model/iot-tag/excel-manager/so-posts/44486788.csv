thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44486788,44486788,null,1,2,Sun Jun 11 17:39:00 EDT 2017,3564468,"<p>I have a Spring Boot application running on two servers. It accepts file <strong>upload requests</strong> (approx 1 KB) via Controller from 1000s of IOT devices. </p>		<p>Additionally there is a <strong>TCP Listener</strong> which also accepts GPS data as a Stream from these IOT devices.</p>		<p>I have setup the Tomcat max thread count to 3000 on one server and 5000 on a larger VM.</p>		<p>After a day or two my Spring Boot application freezes, i.e. it stops responding to any further API calls.</p>		<p>One reason, I suspect is that the IOT devices are <strong>not closing</strong> the TCP socket connection after sending the data. </p>		<p>Where could I be going wrong? I am running out of threads to handle new incoming requests?</p>		<p><strong>############################</strong></p>		<p><strong>EDIT 1:</strong></p>		<p>After investigating the thread dump and adding logs during during Socket connection and closure, I have discovered that the IOT device isn't closing connections. Instead the device is creating a new connection every time it wants to send new data without closing the previous one.</p>		<p>Before the app froze, 22500 open connections were automatically closed.</p>		<p>How can I handle this behavior? Should I close the connections forcefully after a certain timeout?</p>	"
44486788,76029946,44486788,3,0,Tue Jun 13 10:36:00 EDT 2017,3564468,"@AndyWilkinson I found out that there were 22500 open connections. Refer edit 1. Thanks."
44486788,75969149,44486788,3,0,Sun Jun 11 18:54:00 EDT 2017,465223,"The first thing would be to look at any available monitoring. Spring Boot offers the actuator library. Have you activated this in your application? It should already offer pool metrics ootb."
44486788,75969918,44486788,3,1,Sun Jun 11 19:33:00 EDT 2017,1384297,"A thread dump will let you know if you are running out threads"
44486788,75976649,44486788,3,0,Mon Jun 12 04:26:00 EDT 2017,3564468,"@dunni Thanks. I didn't know that. I'll set it up and let you know."
44486788,44524287,44486788,2,1,Tue Jun 13 14:23:00 EDT 2017,5784273,"<p>You can  mitigate the idle connections problem by hiding your service behind an Nginx or HAProxy which close idle connections by default after a given timeout.</p>		<p>Another option is to set <code>server.connection-timeout</code> in application properties (see <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" rel="nofollow noreferrer">server properties</a>), but this appears to be applicable to HTTP only.</p>	"
44486788,76068123,44524287,3,0,Wed Jun 14 07:53:00 EDT 2017,5784273,"@amitection I would say your case is one of the reasons why HAProxy exists. As an upside you will also get load balancing when your service will go clustered."
44486788,76070394,44524287,3,0,Wed Jun 14 08:50:00 EDT 2017,3564468,"I have my VMs on Azure behind a load balancer. But thanks. I'll look into HAProxy"
44486788,76074174,44524287,3,0,Wed Jun 14 10:15:00 EDT 2017,5784273,"@amitection I think Azure load balancer also has idle timeout capabilities."
44486788,76063238,44524287,3,0,Wed Jun 14 05:29:00 EDT 2017,3564468,"I am aware of `server.connection-timeout` . I have set the socket timeout in `TcpNetServerConnectionFactory` and it is working. To do this more efficiently I was thinking of maintaining a Map of IOT_DEVICE_ID : Connection_Id and if multiple connections are being received from the same device I will close the earlier one forcibly."
