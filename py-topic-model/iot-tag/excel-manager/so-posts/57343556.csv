thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57343556,57343556,null,1,0,Sun Aug 04 03:25:00 EDT 2019,11879513,"<p>I am currently working on creating virtual IoT devices that can be used and placed inside the Unity3D editor. This would allow me to have switches and buttons that can control real world smart lights using Mozilla's IoT router framework. They have code for creating fake IoT devices for python, java, and c++ but nothing for C#. So I began working on porting the code over and quickly ran into my first issue. Their example programs register a DNS service I am not quite sure why I am assuming its the way the server code actually works but barring my lack of knowledge on that side I need to be able to register a DNS service on C#. I am a complete noobie in this area and havent done anything with DNS before and am also pretty inexperienced with C# as well. Just bear with me please though I am a fast learner and would really love to see this project work. So to start does anyone have an idea how to register a DNS service with C#?</p>		<p>Here is what the python code looks like that registers the service.</p>		<pre><code>self.service_info = ServiceInfo(	            '_webthing._tcp.local.',	            '{}._webthing._tcp.local.'.format(self.name),	            address=socket.inet_aton(get_ip()),	            port=self.port,	            properties={	                'path': '/',	            },	            server='{}.local.'.format(socket.gethostname()))	self.zeroconf = Zeroconf()	self.zeroconf.register_service(self.service_info)	</code></pre>		<p>Here is what the Java code looks like that registers the service.</p>		<pre><code>ServiceInfo serviceInfo = ServiceInfo.create("_webthing._tcp.local",	                                                     this.name,	                                                     null,	                                                     this.port,	                                                     "path=/");	this.jmdns.registerService(serviceInfo);	</code></pre>	"
57343556,101183838,57343556,3,0,Sun Aug 04 16:00:00 EDT 2019,429063,"One of your challenges may be that C# is a Microsoft-driven language and Microsoft has substantial "not invented here" resistance to mDNS to the degree that Windows did not even ship with mDNS capability until recently.  So it may be that you would need to find some 3rd party extension."
57343556,57343780,57343556,2,-1,Sun Aug 04 04:22:00 EDT 2019,9957014,"<p>visit <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.dns?view=netframework-4.8" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/dotnet/api/system.net.dns?view=netframework-4.8</a> It could be efficient. The following example queries the DNS database for information on the host www.contoso.com</p>		<pre><code> IPHostEntry hostInfo = Dns.GetHostEntry("www.contoso.com");	</code></pre>	"
57343556,101183540,57343780,3,0,Sun Aug 04 15:38:00 EDT 2019,11879513,"So I took a look at that library but the only functionality it has is the ability to give you information about a DNS address. I think what I need to do is register, advertise, or add a dns service. So my computer's up address would be available at whatever domain name I specifiy for example my computer. And yes this would only function properly locally on my network but that's okay."
57343556,101183794,57343780,3,0,Sun Aug 04 15:56:00 EDT 2019,429063,"Resolving a conventional DNS name has nothing to do with *registering* and mDNS service with an mDNS responder."
