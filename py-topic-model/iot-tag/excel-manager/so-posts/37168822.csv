thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37168822,37168822,null,1,1,Wed May 11 16:51:00 EDT 2016,678833,"<p>I have installed the last version of raspbian on my raspberry pi, and I have opened an account AWS IoT on Amazon, then in the IoT web interface I have created a thing, with "RaspberryPi_2" name and create certificate and connect the certificate to the thing, I have followed this guide:</p>		<p><a href="http://blog.getflint.io/blog/get-started-with-aws-iot-and-raspberry-pi" rel="nofollow">http://blog.getflint.io/blog/get-started-with-aws-iot-and-raspberry-pi</a></p>		<p>I have then created the script in the guide, to connect and subscribed the raspberry pi, this is my code:</p>		<pre><code>#!/usr/bin/python3		#required libraries	import sys                                 	import ssl	import paho.mqtt.client as mqtt		#called while client tries to establish connection with the server	def on_connect(mqttc, obj, flags, rc):	    if rc==0:	        print ("Subscriber Connection status code: "+str(rc)+" | Connection status: successful")	    elif rc==1:	        print ("Subscriber Connection status code: "+str(rc)+" | Connection status: Connection refused")		#called when a topic is successfully subscribed to	def on_subscribe(mqttc, obj, mid, granted_qos):	    print("Subscribed: "+str(mid)+" "+str(granted_qos)+"data"+str(obj))		#called when a message is received by a topic	def on_message(mqttc, obj, msg):	    print("Received message from topic: "+msg.topic+" | QoS: "+str(msg.qos)+" | Data Received: "+str(msg.payload))		#creating a client with client-id=mqtt-test	mqttc = mqtt.Client(client_id="mqtt-test")		mqttc.on_connect = on_connect	mqttc.on_subscribe = on_subscribe	mqttc.on_message = on_message		#Configure network encryption and authentication options. Enables SSL/TLS support.	#adding client-side certificates and enabling tlsv1.2 support as required by aws-iot service	mqttc.tls_set("/home/pi/aws_iot/things/raspberryPi_2/certs/aws-iot-rootCA.crt",	                certfile="/home/pi/aws_iot/things/raspberryPi_2/certs/0ea2cd7eb6-certificate.pem.crt",	                keyfile="/home/pi/aws_iot/things/raspberryPi_2/certs/0ea2cd7eb6-private.pem.key",	              tls_version=ssl.PROTOCOL_TLSv1_2,	              ciphers=None)		#connecting to aws-account-specific-iot-endpoint	mqttc.connect("A2GF7W5U5A46J1.iot.us-west-2.amazonaws.com", port=8883) #AWS IoT service hostname and portno		#the topic to publish to	mqttc.subscribe("$aws/things/RaspberryPi_2/shadow/update/#", qos=1) #The names of these topics start with $aws/things/thingName/shadow."		#automatically handles reconnecting	mqttc.loop_forever()	</code></pre>		<p>but when I do this command:</p>		<pre><code>python3 mqtt_test.py	</code></pre>		<p>or this command:</p>		<pre><code>python mqtt_test.py	</code></pre>		<p>and press enter, and the cursor flash and doesn't print anything and stay stuck there, someone can help me? </p>		<p>I haven't also understand if the client-id name should be the same of the things name, and the meaning of the subscribe path, for example in a tutorial I have found this:</p>		<pre><code>mqttc.publish("temperature", tempreading, qos=1)	</code></pre>		<p>why there isn't the complete path?</p>		<p>or this:</p>		<pre><code>$aws/things/RaspberryPi_2/shadow/update/delta	</code></pre>		<p>so I can put everything I want in the path?</p>		<p>thanks</p>	"
37168822,37664100,37168822,2,1,Mon Jun 06 18:09:00 EDT 2016,2726840,"<p>The code is subscribing to a topic but there is no one publishing to it. So, the code also has a <code>on_connect</code> function that would be triggered after a success connection. Is the message <code>"Subscriber Connection status code: ..."</code> being printed? If it is, the message from <code>on_subscribe</code> should also appear. Is it?</p>		<p>If it is not you have a problem before connect to the AWS server. Use <code>netstat</code> command to see where your Raspberry Pi is connected or not and post more debug information in this case.</p>		<p>If the connect and subscribe messages are shown and nothing happens after it, <em>this is normal because you are only subscribing</em> to a topic but not publishing anything.</p>		<p>Regarding topics, think of them as a directory structure. There is no strict rule for topic hierarchy. A "temperature" topic would be <code>temperature</code> topic on the server and a "temperature/livingroom" would be <code>temperature/livingroom</code>, you can subscribe to one, another or both on the same server. The path you choose for your things shall be meaningful to your application. A house, for instance, might be represented as:</p>		<p>house/kitchen/env/temperature	house/kitchen/env/humidity	house/kitchen/lamp/sinklamp	house/kitchen/lamp/mainlap	house/masterbed/env/temperature	house/masterbed/env/humidity	house/masterbed/lamp/readinglampleft	house/masterbed/lamp/readinglampright	house/masterbed/lamp/mainlamp	house/masterbed/lamp/mirrorlamp</p>		<p>And so on. </p>		<p>LetÂ´s say you have a thermostat at master bedroom. It is interested only in <code>temperature</code> but not <code>humidity</code>. It is also interested only in master bedroom temperature. This thermostat shall subscribe to <code>house/masterbed/env/temperature</code>. Opposite to this, a room wide panel that shows state of every <em>thing</em> in the room, would subscribe to <code>house/masterbed/#</code>, meaning "everything after house/masterbed". Read more on wildcards <a href="http://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices" rel="nofollow">here</a></p>		<p>The topic you subscribed for: <code>$aws/things/RaspberryPi_2/shadow/update/#</code> means, "every thing after $aws/things/RaspberryPi_2/shadow/update/".  Notice that his is a special topic, it starts with <code>$aws</code>, specially, it starts with <code>$</code> character. In the <a href="http://docs.aws.amazon.com/iot/latest/developerguide/topics.html" rel="nofollow">AWS context</a> this means:</p>		<blockquote>	  <p>Any topics beginning with $ are considered reserved and are not	  supported for publishing and subscribing except when working with the	  Thing Shadows service. For more information, see Thing Shadows.</p>	</blockquote>		<p>So you need to understand what <code>thing shadow</code> is. This is a AWS specific (and very util) concept. Please read <a href="http://docs.aws.amazon.com/iot/latest/developerguide/thing-shadow-mqtt.html" rel="nofollow">docs</a> on this subject.</p>		<p>Finally, I would you suggest you install a local broker (mosquitto is available on respbian) and try with it before got to AWS. This way you can master mqtt concept without connectivity issues. Later you put AWS to the mix.</p>	"
