thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
39404173,39404173,null,1,0,Fri Sep 09 05:03:00 EDT 2016,3734081,"<p>First of sorry for such an open ended question, but i did not know any other platform for posting such questions.</p>		<p>So basically i am working on an IoT platform where in field close to 2 million devices are supposed to be connected with few gateways. Now i have a requirement where i need to monitor heartbeat (periodic) of each device and on the basis of some missed heartbeats i want to add/remove the device from the network console.</p>		<p>I am planning to put a kafka queue between the devices and the gateways so that the periodic data can be queued and stored some where, however my problem starts when at a gateway level i have to monitor every heartbeat and decide which device has missed beats for a given soak period. I can't maintain a large data structure to keep the mapping, DB is going to be costly for a NRT or RT system, any suggestion how the design should be made for this.</p>		<p>My platform is Java driven, so any suggestions if some other Open Source platform can fit the bill or any design approach.</p>		<p>Thanks.</p>	"
39404173,66134503,39404173,3,0,Fri Sep 09 05:45:00 EDT 2016,3734081,"Wow no answer, no comment just down vote. misusing their capabilities is no doing good for any community. Anyways thanks."
39404173,39409725,39404173,2,1,Fri Sep 09 10:41:00 EDT 2016,5028275,"<p>Your use-case is a typical async ingestion + processing that happens all the time in big data systems.</p>		<p>Your choice of Kafka at the events ingestion is perfect (don't forget to look at ways of monitoring Kafka as well. Most people I know assume that Kafka is the magic pill and it will solve all their problems, only to find that the time they take their system to production, the lack of monitoring around the Kafka cluster has bitten them hard)</p>		<p>Now on the processing part at the gateway layer, you can look at systems like Spark (streaming)/Storm/Flink. I am quite familiar with Spark and your use-case looks more like spark streaming with windowing. It scales pretty well and also has an easy development cycle if you are already familiar with Scala (their Java APIs are also pretty straightforward).</p>		<p>You would not need a DB unless you want to maintain historical data of which device you have taken out and when. The output of Spark streaming job (after every window of soak time) can essentially communicate to your network console and take the device down. One thing to note is the soak time you have for your application - if it is big, then you might have to provision for more machines with RAM and disk. Spark is extremely fast as it maintains the entire window of data in memory (and flushing to disk if it can't hold in RAM)</p>	"
