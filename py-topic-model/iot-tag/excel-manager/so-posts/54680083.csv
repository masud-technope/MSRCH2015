thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
54680083,54680083,null,1,0,Wed Feb 13 21:57:00 EST 2019,6346353,"<p>I have a class where I have 2 functions as below;</p>		<pre><code>// Function to calculate the sum and average temperature	float read_samples(float *data, int num_samples)	{	    float sum = 0.0;	    float average = 0.0;		    for(int i = 1; i &lt; num_samples; i++ ) {	        data[i] = temperature.read();	        sum = sum + data[i];	        wait(1);	    }	    average = sum / (num_samples - 1);	    return average;	}		// Main Function that is called on running the application	int main()	{	    int num_samples = 12 / 1;	    float data[num_samples];	    //sw.fall(read_samples(data, num_samples));	    while(1) {	        wait(12);	        float result = read_samples(data, num_samples);	        lcd.printf("%.2f\n", result);	        //data[0];	    }	}	</code></pre>		<p>When I call the "wait(12);" method in Main, I want the code to at the same time to go execute the "read_samples" method while waiting, and when the "read_samples" is done return the value computed, then go ahead to display the computed result in the Main function. The computation should be during the 12 seconds while waiting.</p>		<p>However, what is happening right now is that during the 12 seconds while waiting, no execution is carried out, so after waiting for 12 seconds it goes to call the "read_samples" method and carries out execution for another 11 seconds. So the total time spent to display the next result is (12 + 11) 23 seconds. Please, how do I write my code to execute the "read_samples" method during the 12 seconds wait?</p>	"
54680083,96149069,54680083,3,1,Wed Feb 13 21:59:00 EST 2019,87189,"What is `wait` here? Where does `S` come from?"
54680083,96149109,54680083,3,0,Wed Feb 13 22:00:00 EST 2019,2684539,"Look at [`std::thread`](https://en.cppreference.com/w/cpp/thread/thread) and [`<future>`](https://en.cppreference.com/w/cpp/header/future)."
54680083,96149119,54680083,3,0,Wed Feb 13 22:00:00 EST 2019,65863,"Use worker threads to run code concurrently"
54680083,96149134,54680083,3,0,Wed Feb 13 22:01:00 EST 2019,4342498,"This is what `std::async` is for.  Launch an asynchronous task and then go about your business.  When you are ready for the the result then you call `get` from the returned `future`."
54680083,96150370,54680083,3,0,Wed Feb 13 22:58:00 EST 2019,6346353,"@tadman I just updated the question, S has the value of 1 second. Wait() tells the code to pause execution for the number of seconds inserted in the Wait() function."
54680083,96150373,54680083,3,0,Wed Feb 13 22:58:00 EST 2019,131930,"One easy way to do it would be to record the current time into a local variable, then call read_samples(), then record the current time again into a second local variable.  Then subtract the first timestamp from the second one, and wait() for (12 seconds minus that delta)"
54680083,96151653,54680083,3,0,Thu Feb 14 00:11:00 EST 2019,3166476,"What user4581301 asks is very relevant with the objective you have posted so far. So unless you have more plans... Why 'Wait`?"
54680083,96152754,54680083,3,0,Thu Feb 14 01:28:00 EST 2019,2785528,"I find no 'S' or 's' in the post code, only the comments?"
54680083,96163754,54680083,3,0,Thu Feb 14 10:13:00 EST 2019,6346353,"@2785528 I have replaced the value of S. S stands for 1 second."
54680083,96163815,54680083,3,0,Thu Feb 14 10:15:00 EST 2019,6346353,"@lakeweb If I don't have to wait, can you suggest any other way to run the read_samples() function while I am waiting for 12 seconds."
54680083,96177988,54680083,3,0,Thu Feb 14 16:45:00 EST 2019,3166476,"I don't know what OS/development system you are using. `wait` sounds like [std::sleep_until](https://en.cppreference.com/w/cpp/thread/sleep_until). If you want to block your main thread while you take a sample every second, that is what `read_samples` will do. Sleeping in `main` is not needed and gets in the way of your objective."
54680083,96149404,54680083,3,2,Wed Feb 13 22:13:00 EST 2019,4581301,"If the main thread is waiting for the sample collection, why go asynchronous at all?"
54680083,54706473,54680083,2,0,Fri Feb 15 09:41:00 EST 2019,107642,"<p>You can run the <code>read_samples</code> in a separate thread. E.g.:</p>		<pre><code>static float average = 0.0f;		// Function to calculate the sum and average temperature	void read_samples()	{	    int num_samples = 12 / 1;	    float data[num_samples];		    float sum = 0.0;		    for(int i = 1; i &lt; num_samples; i++ ) {	        data[i] = temperature.read();	        sum = sum + data[i];	        wait(1);	    }	    average = sum / (num_samples - 1);	}		// Main Function that is called on running the application	int main()	{	    //sw.fall(read_samples(data, num_samples));	    while(1) {	        Thread sampleThread;	        sampleThread.start(&amp;read_samples);		        wait(12);		        lcd.printf("%.2f\n", result);	        //data[0];	    }	}	</code></pre>		<p>You'll want to guard access to the <code>average</code> through a <a href="https://os.mbed.com/docs/mbed-os/v5.11/apis/mutex.html" rel="nofollow noreferrer">Mutex</a>.</p>	"
