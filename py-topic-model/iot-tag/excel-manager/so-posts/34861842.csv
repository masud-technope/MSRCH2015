thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
34861842,34861842,null,1,0,Mon Jan 18 18:44:00 EST 2016,5806750,"<p>I am using an IoT service in Bluemix, and am connecting to it with a Node.js express server and an Android device. </p>		<p>The Android app is based on the ibmiot starter app(<a href="https://github.com/ibm-messaging/iot-starter-for-android" rel="nofollow">https://github.com/ibm-messaging/iot-starter-for-android</a>). This connects with:<br>	URL: <code>&lt;org</code>>.messaging.internetofthings.ibmcloud.com:1883<br>	Topic format: iot-2/cmd/+/fmt/json<br>	Credentials: organization, deviceType, deviceId</p>		<p>The express server connects with the npm ibmiotf module, version 0.2.2. Connects with:<br>	URL:  <code>&lt;org</code>>.messaging.internetofthings.ibmcloud.com:8883<br>	Topic format: iot-2/type/<code>&lt;type</code>>/id/<code>&lt;id</code>>/cmd/<code>&lt;cmd</code>>/fmt/json<br>	Credentials: organization, id (Bluemix space name?), apiKey, apiToken</p>		<p>If I try to subscribe to a topic in the second format with the Android app, I am disconnected from the service due to the topic not being valid. However, the provided object (ApplicationClient) from the npm node contains functions such as publishDeviceCommand(deviceType, deviceId, commandType, format, data)<br>	which publishes to a topic in the second format, which the app cannot subscribe to. Is this reformatting of the topic styles due to different versions?</p>		<p>So, how can I publish to a valid topic with the express server that the app can subscribe to? Does this require writing my own version of publishDeviceCommand? This is feasible, but does not seem ideal. It also is a function within the provided npm module, changes would only be local and not remote. </p>		<p>I can view events that the app publishes to topics in the first format through the service Dashboard, but I cannot see the same for the express ApplicationClient - perhaps because it is not a registered device? </p>	"
34861842,57489724,34861842,3,0,Tue Jan 19 11:44:00 EST 2016,5806750,"I have added more information to the original question, but I was specifying the same org for both connections."
34861842,57464887,34861842,3,0,Mon Jan 18 19:46:00 EST 2016,4454969,"Are you connecting the android device without specifying an org?  Can you confirm if you are connecting as registered device?  such as: <Organisation ID>.messaging.internetofthings.ibmcloud.com"
34861842,34879769,34861842,2,2,Tue Jan 19 14:47:00 EST 2016,5811003,"<p>The difference here is that you are using the ibmiotf node.js package to connect to the IoT service in Bluemix as an application, while the Android app is connecting as a device.</p>		<p>When connecting as a device, you use a topic with the format </p>		<pre><code>iot-2/cmd/&lt;command_id&gt;/fmt/&lt;format&gt;	</code></pre>		<p>or </p>		<pre><code>iot-2/evt/&lt;event_id&gt;/fmt/&lt;format&gt;	</code></pre>		<p>When connecting as an application, you use a topic with the format</p>		<pre><code>iot-2/type/&lt;deviceType&gt;/id/&lt;deviceId&gt;/cmd/&lt;command_id&gt;/fmt/&lt;format&gt;	</code></pre>		<p>or</p>		<pre><code>iot-2/type/&lt;deviceType&gt;/id/&lt;deviceId&gt;/evt/&lt;event_id&gt;/fmt/&lt;format&gt;	</code></pre>		<p>What this means is that an application can publish and subscribe to any device in your organization, but a device can only publish and subscribe to topics specific to itself.</p>		<p>If the android app connects with deviceType=Android, deviceID=myTestDevice and then subscribes to</p>		<pre><code>iot-2/cmd/updates/fmt/json	</code></pre>		<p>and the node.js app publishes to</p>		<pre><code>iot-2/type/Android/id/myTestDevice/cmd/updates/fmt/json	</code></pre>		<p>then the device will receive the message.</p>		<p><a href="https://docs.internetofthings.ibmcloud.com/messaging/devices.html" rel="nofollow">https://docs.internetofthings.ibmcloud.com/messaging/devices.html</a></p>		<p><a href="https://docs.internetofthings.ibmcloud.com/messaging/applications.html" rel="nofollow">https://docs.internetofthings.ibmcloud.com/messaging/applications.html</a></p>	"
34861842,57586727,34879769,3,0,Thu Jan 21 14:39:00 EST 2016,5806750,"Works perfectly, thank you.    	Final question, when I publish to a topic with fmt/json and pass a JSON object as the message, I am told the message must be a string. I can do this by calling JSON.stringify(object). Is this the correct way of doing it?"
34861842,57603519,34879769,3,0,Thu Jan 21 22:17:00 EST 2016,5811003,"Yes that would be the correct way to do it."
34861842,57603710,34879769,3,0,Thu Jan 21 22:23:00 EST 2016,5811003,"The MQTT client doesn't actually make any use of the format specified in the topic string. The purpose of '/fmt/json' is for:	1. usability. You know in your application that the data you are expecting to receive on this topic should look like the given format.	2. IoTF historical data. The IoT service in Bluemix provides access to historical data for your devices. Messages published to a topic with '/fmt/json' are stored in the historical data.	https://docs.internetofthings.ibmcloud.com/reference/concepts.html#/historical-event-storage#historical-event-storage"
