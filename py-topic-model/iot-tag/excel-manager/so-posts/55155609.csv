thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
55155609,55155609,null,1,0,Thu Mar 14 05:37:00 EDT 2019,1389677,"<p>In our application we have a server which contains entities along with their relations and processing rules stored in DB. To that server there will be n no.of clients like raspberry pi , gateways, android apps are connected. </p>		<p>I want to push configuration &amp; processing rules to those clients, so when they read some data they can process on their own. This is to make the edge devices self sustainable, avoid outages when server/network is down. </p>		<p>How to push/pull the configuration. I don't want to maintain DBs at client and configure replication. But the problem is maintenance and patching of DBs for those no.of client will be tough.</p>		<p>So any other better alternative.?</p>		<p>At the same time I have to push logs to upstream (server). </p>		<p>Thanks in advance.</p>	"
55155609,97141341,55155609,3,0,Sat Mar 16 22:30:00 EDT 2019,1870387,"The answer depends also on the networking between the clients and the server: Is it LAN, WAN" Is it private, secured network or public Internet?"
55155609,55191629,55155609,2,0,Fri Mar 15 22:52:00 EDT 2019,3960558,"<p>I have been there. You need an on-device data store. For this range of embedded Linux, in order of growing development complexity:</p>		<ul>	<li><strong>Variables</strong>: Fast to change and retrieve, makes sense if the data fits in memory. Lost if the process ends.</li>	<li><strong>Filesystem</strong>: Requires no special libraries, just read/write access somewhere. Workable if the data is small enough to fit in memory and does not change much during execution (read on startup when lacking network, write on update from server). If your data can be structured as a few object variables, you could write them to JSON files, and there is plenty of documentation on other file storage options for Android apps.</li>	<li><strong>In-memory datastore</strong> like Redis: Lightweight dependency, can automate messaging and filesystem-stored backup. Provides a managed framework/hybrid of the previous two.</li>	<li><strong>Lightweight databases</strong>, especially <strong>SQLite</strong>: Lightweight SQL database, stored in one file and popular with Android apps (probably already installed on many of the target devices). It could work for frequent changes on a larger block of data in a memory-constrained environment, but does not look like a great fit. It gets worse for anything heavier.</li>	</ul>		<p><a href="https://redis.io/topics/replication" rel="nofollow noreferrer">Redis replication</a> is easy, but indiscriminate, so mainly sensible if your devices receive a changing but identical ruleset. Otherwise, in all these cases, the easiest transfer option may be to request and receive the whole configuration (GET a string, download a JSON file, etc.) and parse the received values.</p>	"
