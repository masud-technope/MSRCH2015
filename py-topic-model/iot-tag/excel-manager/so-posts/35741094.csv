thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
35741094,35741094,null,1,0,Wed Mar 02 07:35:00 EST 2016,794226,"<p>I'm trying to create an IOT hub that can be controlled locally (Intranet) or from Internet. The problem I'm facing is of state synchronization. The following points depict what's happening at my local and cloud server.</p>		<p>Let's say for an example on my my connected	Device is at state A.	Local Server Shows it at state A	Cloud Server shows it at state A	Cloud Server requests the state to be changed to B	Device State is now B	Network Problem	Local Server Shows it at state B	Cloud Server shows it at state A	Network Problem resolved	Cloud Server wants it to be at state C. Thinking it is at state B (which is not and this is the problem to be solved)	q1. How can I ensure the cloud server knows which state the hub is in before issuing commands?</p>		<p>-- I have looked for locking mechanisms (pessimistic concurrency). but since this is happening over a network. They can be really expensive.</p>		<p>q2. If we can allow the cloud server to issue arbitrary commands without knowing the current state of the HUB. Then what should be the logic of conflict resolution?</p>		<p>-- If we want to keep a simple conflict resolution mechanism of first come first server then we will have to synchronize time over the two servers which in itself is a problem.</p>	"
35741094,59290019,35741094,3,0,Sat Mar 05 05:54:00 EST 2016,371933,"Not wanting to rain on your parade, but being able to control your IoT hub locally is a horrible idea. It goes against everything that security experts are recommending. If you can control a device over a local intranet, you can be hacked, you must always assume so.  In a closed system, it would make sense, but what you're asking, access both from internet and intranet is bad, bad practice from a security perspective."
35741094,59290481,35741094,3,0,Sat Mar 05 06:32:00 EST 2016,794226,"@PedroG.Dias - Local Controlling is needed because the network is unreliable hence when the network if off the system shud be able to work independently"
35741094,59290516,35741094,3,0,Sat Mar 05 06:36:00 EST 2016,794226,"@PedroG.Dias - Can you suggest any other pattern which i can adopt"
35741094,35811207,35741094,2,1,Sat Mar 05 07:03:00 EST 2016,371933,"<p>Ok, one way to resolve this is as follows: </p>		<p>You have a CloudServer and a LocalServer. 	I would suggest that you use message queues (i.e. Azure Service Bus) to resolve this. </p>		<p>In your example, CloudServer issues a command, but the internet is not available locally. If you issue the command on a message queue, it will, eventually, reach your local server, and you can determine easilly if the message received has validity or not. Equally, the response will, eventually, when online, transmit its last state changes to the message queue.</p>		<p>It is important that you keep the notion of <strong>request</strong> and <strong>response</strong> as separate entities, meaning, if CloudServer has issued a request for state change, then this is just a request and nothing that you can confirm before you have an actual response. </p>		<p><strong>Security</strong></p>		<p>If you land on a message-based form of synchronization, you no longer have the huge concerns that I warned about initially. You can encrypt the content of the messages, as well as use encrypted connection(https) and if you use something like Azure Service Bus, then, an attacker, even if he by some miracle is able to pick up any message, he will never know where it came from or what/who is subscribing to it. Security Issue solved.</p>		<p>Final suggestion: </p>		<ul>	<li>TWO State change queues</li>	<li>One Queue for State Change Requests</li>	<li>One Queue for State Change Confirmations.  </li>	<li>You never assume a state just based on a server's request for state change</li>	</ul>		<p><strong>Scenarios:</strong> </p>		<p><em>Scenario 1 - all connected - the easy one</em></p>		<p>CloudServer sees last state as <strong>State A</strong>. 	CloudServer requests state change to <strong>State B</strong> (posting to queue)	LocalServer receives message, changes state, and posts confirmation to Confirmation Queue. 	CloudServer receives confirmation and can set the status. </p>		<p><em>Scenario 2 - connection is lost - the not so easy one</em></p>		<p>CloudServer assumes last state is <strong>State A</strong>	LocalServer has changed to <strong>State B</strong> and posted a message, however, since no connection, the message is waiting to transmit	CloudServer requests a state change to <strong>State C</strong>, posting request message	LocalServer sees the need for <strong>State C</strong> and does the change locally, posting a new message</p>		<p>In this scenario, things will sync up once the network is back, as you can see the message requests and responses now provide a history of what has happened. The only thing you need to do is to write the logic to handle things, i.e. Should the CloudServer request be ignored based on its age, or maybe sequence number etc.</p>		<p>I hope this gives you an idea of what I am thinking. The good bits here are that you have a management system that is pretty much immune to attacks simply by architecture. </p>	"
