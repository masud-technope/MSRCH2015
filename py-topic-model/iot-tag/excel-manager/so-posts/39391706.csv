thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
39391706,39391706,null,1,0,Thu Sep 08 13:02:00 EDT 2016,5068227,"<p>I am quite new to IoT, but I am building a system where I have multiple IoT devices in a home connected to internet using ESP8266 module. But I do not have a particular gateway in any home. I am relying on WiFi router. To convey any message to the device, from internet, I need to identify the particular device. 	I am using DDNS for the home router's IP. But how can I send requests coming from the server to all the devices connected. </p>		<p>I have this code in my ESP8266 modules. </p>		<p><strong>ESP 1:</strong></p>		<pre class="lang-cpp prettyprint-override"><code>#include &lt;ESP8266WebServer.h&gt;	#include &lt;ESP8266mDNS.h&gt;		MDNSResponder mdns;	ESP8266WebServer server(80);		void setup(){	server.on("/esp_unique_01/", [](){	    server.send(200, "text/html", webPage);	  });	  server.on("/esp_unique_01/socket1On", [](){	    server.send(200, "text/html", webPage);	    digitalWrite(gpio0_pin, HIGH);	    delay(1000);	  });	  server.on("/esp_unique_01/socket1Off", [](){	    server.send(200, "text/html", webPage);	    digitalWrite(gpio0_pin, LOW);	    delay(1000); 	  });	}	</code></pre>		<p><strong>ESP 2:</strong> </p>		<pre class="lang-cpp prettyprint-override"><code>#include &lt;ESP8266WebServer.h&gt;	#include &lt;ESP8266mDNS.h&gt;		MDNSResponder mdns;	ESP8266WebServer server(80);		void setup(){	server.on("/esp_unique_01/", [](){	    server.send(200, "text/html", webPage);	  });	  server.on("/esp_unique_02/socket1On", [](){	    server.send(200, "text/html", webPage);	    digitalWrite(gpio0_pin, HIGH);	    delay(1000);	  });	  server.on("/esp_unique_02/socket1Off", [](){	    server.send(200, "text/html", webPage);	    digitalWrite(gpio0_pin, LOW);	    delay(1000); 	  });	}	</code></pre>		<p>Both of these ESP modules are having a dynamic IP. Any lead would be highly appreciated.</p>	"
39391706,39393683,39391706,2,1,Thu Sep 08 14:31:00 EDT 2016,3082873,"<p>a mixture from the example of MDNS :</p>		<pre><code>  char hostString[16] = {0};	  sprintf(hostString, "ESP_%06X", ESP.getChipId());	  if (!MDNS.begin(hostString)) {	    Serial.println("Error setting up MDNS responder!");	  }	  Serial.println("mDNS responder started");		  // Start TCP (HTTP) server	  server.begin();	  Serial.println("TCP server started");		  // Add service to MDNS-SD	  MDNS.addService("http", "tcp", 80);	</code></pre>		<p>So you gonna have http service description for node1.  Run second node's web server on a different port and define it. </p>	"
39391706,40944149,39391706,2,1,Sat Dec 03 04:12:00 EST 2016,1324175,"<p>The solution is to assign <strong>static</strong> IP addresses to your ESP8266 modules and to use different ports to access them from internet. Here is the code to assign a static address to ESP8266:</p>		<pre class="lang-cpp prettyprint-override"><code>IPAddress ip(192,168,1,xx);               // desired static IP address	IPAddress gateway(192,168,1,yy);          // IP address of the router	IPAddress subnet(255,255,255,0);		WiFi.begin(ssid, password);	WiFi.config(ip, gateway, subnet);		while (WiFi.status() != WL_CONNECTED) {	  delay(500);	  Serial.print(".");	}	</code></pre>		<p>Now that you know local IP addresses of your ESP8266 devices you can choose ports to be forwarded to your ESPs. For example you can choose ports 8266, 8267, 8268, 8269, ... or any other above 1024 and then set the <strong>port forwarding</strong> in your <strong>router settings</strong> so port 8266 will be forwarded to the IP address of your first ESP and port 80, port 8267 will be forwarded to the IP address of your second ESP and port 80 etc.</p>		<p>Afterwards you can access your ESPs from internet using URLs looking like <code>http://xx.xx.xx.xx:8266</code>, <code>http://xx.xx.xx.xx:8267</code>, <code>http://xx.xx.xx.xx:8268</code>, <code>http://xx.xx.xx.xx:8269</code>, ...</p>		<p>Since you are already using dynamic DNS service to access your ESP8266 when there are no other ESPs in your local network, that means you can just add <code>:8266</code>, <code>:8267</code>, <code>:8268</code>, <code>:8269</code>, ... to the URL you are already using. In other words, if the URL consisting of <em>what you have chosen</em> + <em>the part generated by your dynamic DNS service</em> is <code>http://myhome.something.com</code> then you will now use <code>http://myhome.something.com:8266</code>, <code>http://myhome.something.com:8267</code> etc.</p>	"
