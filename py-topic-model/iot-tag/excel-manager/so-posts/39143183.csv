thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
39143183,39143183,null,1,1,Thu Aug 25 10:44:00 EDT 2016,5308481,"<p>My publisher and broker are working on different systems. I am using QOS=2 for delivery of messages.I am using python paho mqtt broker. It is further extension to 	<a href="https://stackoverflow.com/questions/36093078/mqtt-is-there-a-way-to-check-if-the-client-is-still-connected">MQTT - Is there a way to check if the client is still connected</a>   </p>		<p>1) When I publish a message to connected broker, it acknowledge me by calling on_publish() callback. but when I disconnected my broker running on different machine from the network, the publisher stores the publish message on local machine and again when I connect my broker to network it publishes all previous messages to broker. I think these messages stored as inflight messages (not confirmed), if these messages are inflight messages, then  where these messages are stored,is there any limit of these inflight messages as I have not include anything in my code regarding inflight messages.</p>		<p>2)In first case I disconnect my broker from the network, now I shutdown my broker and again connect to network,  my program call on_disconnect() callback says unexpected disconnection, then publishes all unpublished messages to broker.	    a) I am confused why on_disconnect() callback calls only when I shut down by broker not on when I disconnect my broker from my local network.	   b) on_disconnect() method calls only when my broker again connect to network.	      Is there any way if my broker disconnect suddenly, then immediately it will be informed to publisher?</p>		<p>3) I am using mqtt in real time gps tracking, I want to store messages to local db when publisher not connected to broker , but I can't find any way how publisher comes to know immediately when it disconnected from broker.</p>		<p>4) Is using QOS=2 is best way to ensure message delivery to broker or using local db for storage purpose when disconnected to broker and then sync automatically with local db to publish all messages</p>	"
