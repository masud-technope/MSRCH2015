thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57243449,57243449,null,1,0,Sun Jul 28 17:40:00 EDT 2019,8407516,"<p>I am using the following code in attempt to connect to Azure IoT Hub. It uses SAS, therefore no security certificates are needed. I am successfully connecting to Azure IoT Hub using the same M2MQTT library in C# but this code fails with:	Failed to connect.Connection refused, not authorized. Error Code= 5</p>		<p>I tried any possible combos of security parameters but at no avail. The SAS token is generated by DeviceExplorer.</p>		<pre><code>#! /usr/bin/python3.5	import serial	import time	import datetime	import os	import socket	import ssl	import logging	import paho.mqtt.client as mqtt	import sys	print(sys.executable)		def on_disconnect(client, userdata, rc):	    if rc==0:	        print("client disconnected OK")	        client.connected_flag=False		def on_connect(client, userdata, flags, rc):	    if rc==0:	        print("Connected OK")	        mqtt.Client.connected_flag=True	        mqtt.Client.bad_connection_params=False	    else:	        mqtt.Client.bad_connection_params=True		        if rc==1:	            print("Failed to connect. Connection refused, unacceptable 	protocol version. Error Code=", rc)	        elif rc==2:	            print("Failed to connect.Connection refused, identifier 	rejected. Error Code=", rc)	        elif rc==3:	            print("Failed to connect.Connection refused, server unavailable. Error Code=", rc)	        elif rc==4:	        print("Failed to connect.Connection refused, bad user name or password. Error Code=", rc)	        elif rc==5:	        print("Failed to connect.Connection refused, not authorized. Error Code=", rc)			def on_publish(client, userdata, mid):	    if rc==0:	        print("Data published OK: ", userdata)	    else:	        print("Failed to publish data. MessageID=", mid)	    pass		broker="myIoTHubName.azure-devices.net"	port=8883	DeviceID="MasterTag"	DeviceKey="myDeviceKey"	IoTHubName="myIoTHubName"	SasToken="SharedAccessSignature sr=myIoTHubName.azure-devices.net&amp;sig=..."		# Create client object	# 4 stands for MQTTv311	rpiclient = mqtt.Client("PahoClient-on-RPi-Gateway2", clean_session=True, userdata=None, protocol=4, transport="tcp") 		usernameFormat="{}{}{}"	username=usernameFormat.format(IoTHubName, ".azure-devices.net/", DeviceID)	password=SasToken		rpiclient.username_pw_set(username, password)	rpiclient.tls_set(tls_version=ssl.PROTOCOL_TLSv1_2)	rpiclient.tls_insecure_set(True)		# connection flag indicates that connection was made or not	mqtt.Client.connected_flag = False		# connection parameters are incorrect: ip address, port, authentication, etc	mqtt.Client.bad_connection_params=False		#assign function to callback	rpiclient.on_connect = on_connect		#assign function to callback	rpiclient.on_publish = on_publish		# bind the disconnect callback   	rpiclient.on_disconnect = on_disconnect		rpiclient.loop_start()		rpiclient.will_set("dwm/position", "Client PahoClient-on-RPi2 had unexpectedly disconnected", 1, True)		try:	    print("Connecting to MQTT broker ",broker)	    # Connect to the MQTT Broker	    rpiclient.connect(broker, port)	    time.sleep(1)		    # Wait in a loop until we are connected	    print("mqtt.Client.connected_flag={}, 	</code></pre>		<p>mqtt.Client.bad_connection_params={}".format(mqtt.Client.connected_flag, mqtt.Client.bad_connection_params))	        while mqtt.Client.connected_flag == False and mqtt.Client.bad_connection_params == False:	            print("Waiting for connection...");	            time.sleep(1)	        if mqtt.Client.bad_connection_params == True:	            rpiclient.loop_stop()	            sys.exit()</p>		<pre><code>except Exception as ex:	    print("Connection to MQTT Broker failed: ", ex)		rpiclient.loop_stop()		# Disconnect MQTT Client	rpiclient.disconnect()	</code></pre>		<p>Any advice is appreciated.</p>	"
57243449,57246276,57243449,2,0,Mon Jul 29 01:34:00 EDT 2019,8546089,"<p>When you use MQTT to connect the Azure IoT Hub directly, you need to connect over TLS/SSL. In order to establish a TLS connection, you may need to download and reference the DigiCert Baltimore Root Certificate, and then set the certificate for the TLS/SSL connection. Please see the document <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-mqtt-support#tlsssl-configuration" rel="nofollow noreferrer">Communicate with your IoT hub using the MQTT protocol</a>.</p>		<pre><code>client.tls_set(ca_certs=path_to_root_cert, certfile=None, keyfile=None,	               cert_reqs=ssl.CERT_REQUIRED, tls_version=ssl.PROTOCOL_TLSv1, ciphers=None)	client.tls_insecure_set(False)	</code></pre>	"
57243449,101024739,57246276,3,0,Tue Jul 30 00:21:00 EDT 2019,8407516,"I have difficulty to cope with your controversial document. The same document you are referring to (and other members of you team on your forum said the same) say that: "If you use X.509 certificate authentication, SAS token passwords are not required. For more information, see Set up X.509 security in your Azure IoT Hub". BTW, suppose you are right: I tried this approach in the past as well - using certificates and password - at no avail...If you want to I can publixh the entire source."
57243449,101024805,57246276,3,0,Tue Jul 30 00:27:00 EDT 2019,8407516,"Ok, I am not a scientist but I do follow systematic approach so I went back to the version of script that uses the approach you suggested and ran it without changes: ...and by some miracle - it worked! So, my apologies on ranting, but you still need to clean up your documentation that atat time very confusing..."
57243449,101026622,57246276,3,0,Tue Jul 30 03:22:00 EDT 2019,8407516,"I have to correct myself - the code that succeeded was one that uses SAS approach. In this code I removed all references to certificates. Therefore I was correct in my first point - no certificate required to in SAS approach. I am not sure if vise versa is correct - whether using certificates require password...that will be my next move..."
57243449,57248559,57243449,2,0,Mon Jul 29 06:55:00 EDT 2019,8084828,"<p>the following is a working example of the simulated <em>device1</em> connected to the Azure IoT Hub using a paho.Mqtt client library:</p>		<pre><code>from paho.mqtt import client as mqtt	import time	import ssl		def on_subscribe(client, userdata, mid, granted_qos):	print('Subscribed for m' + str(mid))		def on_connect(client, userdata, flags, rc):	    print("Connected with result code "+str(rc))		def on_message(client, userdata, message):	    print("Received message '" + str(message.payload) + "' on topic '" + message.topic + "' with QoS " + str(message.qos))		def on_log(client, userdata, level, buf):	    print("log: ",buf)		device_id = "device1"	iot_hub_name = "myIoTHub"	sas_token = "SharedAccessSignature sr=myIoTHub.azure-devices.net%2Fdevices%2Fdevice1&amp;sig=****&amp;se=1586926815"	client = mqtt.Client(client_id=device_id, protocol=mqtt.MQTTv311,  clean_session=False)	client.on_log = on_log	client.tls_set_context(context=None)		# Set up client credentials	username = "{}.azure-devices.net/{}/api-version=2018-06-30".format(iot_hub_name, device_id)	client.username_pw_set(username=username, password=sas_token)		# Connect to the Azure IoT Hub	client.on_connect = on_connect	client.connect(iot_hub_name+".azure-devices.net", port=8883)		# Publish 	client.publish("devices/{device_id}/messages/events/".format(device_id=device_id), payload="{}", qos=0, retain=False)		# Subscribing on the topic , 	client.on_message = on_message	client.on_subscribe = on_subscribe 	client.subscribe("devices/{device_id}/messages/devicebound/#".format(device_id=device_id))	client.subscribe("$iothub/twin/PATCH/properties/desired/#")	client.subscribe("$iothub/methods/POST/#")		client.loop_forever()	</code></pre>		<p><strong>Update:</strong></p>		<p>The sas_token for the specific device can be generated using the <em>Device Explorer</em> tool, see the following screen snippet:</p>		<p><a href="https://i.stack.imgur.com/CJxvv.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/CJxvv.png" alt="enter image description here"></a></p>		<p>and the output log should be looked like the following screen snippet:</p>		<p><a href="https://i.stack.imgur.com/dz2Jr.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/dz2Jr.png" alt="enter image description here"></a></p>	"
57243449,101024628,57248559,3,0,Tue Jul 30 00:11:00 EDT 2019,8407516,"I just ran my code with all the adjustments to a differences that I found looking at yours. I am getting now: "Failed to connect.Connection refused, server unavailable. Error Code= 3". If your code really works the only difference I see is in the SAS. I generated mine using DeviceExplorer. How did you generate yours? Mine has the form of: SharedAccessSignature sr=myIotHub-IoTHub.azure-devices.net&sig=****%2Fxxxxxxxxxxx%3D&se=1595980678  So, I do see a difference in format not just in its content..."
57243449,101026392,57248559,3,0,Tue Jul 30 02:59:00 EDT 2019,8084828,"see my update. It looks like you *not* generated a sas_token for a device."
57243449,101058616,57248559,3,0,Tue Jul 30 23:21:00 EDT 2019,8407516,"I had to postpone AWS IoT since my subscription in C# is not working... I had to post another question about it...I did read your article on CodeProject but that did not help...https://stackoverflow.com/questions/57281239/publish-with-python-to-azure-iot-hub-subscribe-with-c-sharp-not-working"
57243449,101026657,57248559,3,0,Tue Jul 30 03:24:00 EDT 2019,8407516,"So the approach of SAS as you pointed works as I managed to connect to Azure. The SAS I used as generated in DeviceExplorer is still different in format from your though (but I can live with that ;-)"
57243449,101026669,57248559,3,0,Tue Jul 30 03:26:00 EDT 2019,8407516,"My next mission is making to connection to AWS IoT work, something I have been struggling for days now..."
57243449,101027195,57248559,3,0,Tue Jul 30 04:12:00 EDT 2019,8084828,"have a look at this document for generating a sas token: https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-security, also there is a Cloud Explorer tool"
57243449,101027229,57248559,3,0,Tue Jul 30 04:14:00 EDT 2019,8084828,"for your next mission such as a connection to the AWS IoT, you should use the tag *aws-iot* for your question."
