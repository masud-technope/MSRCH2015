thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
30085458,30085458,null,1,0,Wed May 06 19:04:00 EDT 2015,4871950,"<p>I am trying to design create a cloud based system (IaaS) that will gather data from sensors (water pollution related activity) and upon certain events will decide to process the data for a specific sensor. 	Data characteristics are:	1. For each sensor data is being sent once every couple of days (up to 6 times a month)	2. each sensor reading contains about 5000 events that are encapsulated in 50-100 messages that are sent to the server (such "session" takes about 20 minutes where messages are sent every 5 seconds)	3. I am building the system to handle rate of 30,000 messages per second.	4. processing of the data shouldn't be real time , I have about 10 minutes once the "session" is finished to do the processing.	5. 90% of the sessions are not interesting and can be thrown away once they are finished. the other 10% have event or event encapsulated in the messages that according to them I need to decide if I need to process the entire session data and send an alert to the sensor that there is a pollution.</p>		<p>I created a tool that generates 5000 messages per second and I am trying to figure out which database would be the most optimal for my scenario.	These are the databases I am thinking to try:</p>		<ol>	<li><p>Cassandra - I will save for each session an in memory collection of keys. the keys are for the messages that are stored in cassandra. Once I detect a message that contains bad readings I will need to pull all of the other messages in the "session" and process them (that means 50-100 requests to cassandra). My concern here is about write performance (since I have many read and write operations) + I don't have a good strategy for deleting the 90% not needed sessions.</p></li>	<li><p>Couchbase - I will save a document for each "session" according to sensorID and will append each message to the document. Once I detect a message that contains bad readings I will only need to send one request for the document. My concern here is about the read performance.</p></li>	<li><p>Redis - use it like cassandra. I assume performance will be the best but I will need to handle the sharding and replication of data myself in order not to reach the memory limit</p></li>	</ol>		<p>I would love to hear which option would be the most appropriate</p>		<p>thanks</p>	"
30085458,48375506,30085458,3,1,Fri May 08 20:59:00 EDT 2015,1697575,"Couchbase has great read performance (I think it outperforms Cassandra), see http://blog.couchbase.com/dissecting-nosql-benchmark"
30085458,30089793,30085458,2,-1,Thu May 07 00:11:00 EDT 2015,4726739,"<p>This is an interesting one. If we go to basics of CAP Theorem and try to choose one DB based upon need of consistency, availability, and partition tolerance.</p>		<p>For High consistency and availability- Choose MySQL, PostgreSQL,Greenplum, Vertica, Neo4J.</p>		<p>For High availability and partition tolerance- Use Cassandra,Voldemort,Dynamo,CouchDB, Riak</p>		<p>For High consistency and partition tolerance- Use HBase, Redis, MongoDB,	BerkeleyDB, BigTable</p>		<p><strong>So my Vote is for Cassandra here.</strong></p>	"
30085458,48375439,30089793,3,1,Fri May 08 20:57:00 EDT 2015,1697575,"You didn't mention Couchbase. CouchDB is not Couchbase."
30085458,30148715,30085458,2,2,Sun May 10 07:17:00 EDT 2015,4508137,"<p>Reg. Redis â€“ You may consider using a DAAS (Data as a Service). The service will manage for you all the instances, clusters, scaling, data persistence and high availability settings.	One example, is <a href="https://redislabs.com/redis-cloud" rel="nofollow">Redis Cloud by Redis Labs</a></p>	"
