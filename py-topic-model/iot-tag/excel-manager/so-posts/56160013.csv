thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
56160013,56160013,null,1,0,Thu May 16 02:35:00 EDT 2019,4970496,"<p><strong>THE SETUP:</strong></p>		<ul>	<li>2 <a href="https://www.adafruit.com/product/2471" rel="nofollow noreferrer">ESP8266</a> Micro Controllers</li>	<li>2 <a href="https://www.adafruit.com/product/1782" rel="nofollow noreferrer">MCP9808</a> Temperature Sensors</li>	<li>1 Machine controlling both ESPs using Johnny-Five.</li>	</ul>		<p>Note: Each ESP8266 micro controller handles one MCP9808 Temperature Sensor.</p>		<p>This is a followup on <a href="https://stackoverflow.com/questions/56158333/johnny-five-i2c-controlling-multiple-temperature-sensors-using-esp8266">This question</a></p>		<p>Originally we thought the problem was lack of managing I2C addressing.  But as <a href="https://stackoverflow.com/users/2670348/john-romkey">John Romkey</a> wisely points out, we only have one sensor per controller, suggesting I2C addressing isn't the issue here.</p>		<p><strong>THE PROBLEM:</strong></p>		<p>In the code below we can create multiple boards, no problem, each board with its associated sensor.	And we can create two independent J5 <code>ThisThermometer</code> objects.	But both <code>ThisThermometer</code> objects return the reading from Controller/Sensor "A", ignoring Controller/Sensor "B"</p>		<p><strong>THE QUESTION:</strong></p>		<p>Is there something we can add to options under the <code>new five.Thermometer()</code> (i.e. <code>ThermOps</code>) that will tell J5 to associate the <code>ThisThermometer</code> objects with their respective Boards?</p>		<p>The bigger question: how to handle 2 micro controller / thermometer pairings under one script?</p>		<p><strong>THE CODE:</strong></p>		<pre><code>var five = require("johnny-five");	var {EtherPortClient}=require("etherport-client");	var Setups=[	    {id:"A", Ip:"192.168.1.101"},	    {id:"B", Ip:"192.168.1.102"}	];	InitSetups();		function InitSetups(){	    var Envs;	    Envs=[];	    Setups.forEach(function(ThisSetup, ThermometerCount){	        Envs.push({	            id:ThisSetup.Id,	            port: new EtherPortClient({	                host: ThisSetup.Ip,	                port: 3030	            }),	            repl: false	        });	    });	    new five.Boards(Envs).on("ready", function(){	        this.each(function(ThisBoard){	            var ThisThermometer, ThermOps;	            ThermOps={id:ThisBoard.id, controller:"MCP9808"};	            ThisThermometer=new five.Thermometer(ThermOps);	            //****2 Thermometer instances, but no way to associate with their respective boards.	            ThisThermometer.on("change", function(){	                console.log(this.id, this.fahrenheit);	            });	        });	    });	}	</code></pre>	"
