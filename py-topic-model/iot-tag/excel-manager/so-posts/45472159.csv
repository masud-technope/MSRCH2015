thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
45472159,45472159,null,1,0,Wed Aug 02 22:43:00 EDT 2017,704281,"<p>I got that downloader code running on Windows 10 IoT Core which tries to download a file to the applications local folder if it does not exist yet. If it does, it should return the path to that file.</p>		<blockquote>	  <p><strong>Spoiler</strong>: The code snippet itself is working, see below.</p>	</blockquote>		<pre><code>    private async Task&lt;string&gt; GetAsync(string url)	    {	        url = WebUtility.UrlDecode(url);		        string fileName = Path.GetFileName(url);		        var folder = ApplicationData.Current.LocalFolder;	        var destinationFile = await folder.CreateFileAsync(fileName, CreationCollisionOption.OpenIfExists);		        if (new FileInfo(destinationFile.Path).Length &gt; 0)	            return destinationFile.Path;		        var downloader = new BackgroundDownloader();	        var download = downloader.CreateDownload(new Uri(url), destinationFile);		        await download.StartAsync();		        return destinationFile.Path;	    }	</code></pre>		<p>Now, when the file does not exist, the code is running until line <code>await download.StartAsync()</code>. From there, it never returns.	In the folder, an empty file with the given name is existent but only 0kb in size - that one's created implicitly while calling <code>CreateFileAsync()</code> before (and that's why I check for <code>.Length</code> to check the file existence).</p>		<p><strong>Now comes the thing:</strong>	That code is never returning, but if I kill the application (after enough time), the file gets written to disk, <strong>so the download apparantly succeeded</strong> but it did not "flush" to the file system. That does not happen if I do not kill the app, so refreshing the Windows Explorer view or looking for the file properties does not show any change in size.</p>		<p>I'm getting crazy on this, could somebody give me a hint? All the tips and hints from articles like those here did not work on the Pi:</p>		<ul>	<li><a href="https://stackoverflow.com/questions/27894341/backgrounddownloader-getcurrentdownloadsasync-returns-completed-downloads">BackgroundDownloader.GetCurrentDownloadsAsync returns completed downloads	</a></li>	<li><a href="https://stackoverflow.com/questions/34795800/check-progress-of-download-operation-which-started-in-background-task">Check progress of download operation which started in background task	</a></li>	<li><a href="https://docs.microsoft.com/en-us/windows/uwp/networking/background-transfers#post-processing" rel="nofollow noreferrer">MSDN: Background transfers: Post processing</a></li>	</ul>		<hr>		<p><strong>Setup</strong></p>		<ul>	<li>Raspberry Pi 3</li>	<li>Windows 10 IoT Core 10.0.15063.0</li>	<li>Wired Ethernet connection</li>	<li>App capabilities (Package.appxmanifest)		<ul>	<li>Internet (Client &amp; Server)</li>	<li>Internet (Client)</li>	<li>Private Networks (Client &amp; Server)</li>	<li>Removable Storage</li>	</ul></li>	</ul>	"
45472159,77965065,45472159,3,0,Fri Aug 04 07:40:00 EDT 2017,8415952,"Oh my god, I thought it was just me! Been struggling on this for days already. I can confirm that there were something wrong when running it on a headless app. It works fine in a UI app (x86,x6 and arm). Funny that the app was working last week, then suddenly it stops downloading (it will stay forever there, but when you stop the app, that is the only time it will dump the data to the file. All I can remember is that there was this windows update in the device early this week/last weekend."
45472159,77908950,45472159,3,0,Thu Aug 03 03:15:00 EDT 2017,6601582,"Your code snippet runs in windows iot core headless app?"
45472159,77949849,45472159,3,0,Thu Aug 03 20:38:00 EDT 2017,704281,"It does, yes. Sorry for the late reply."
45472159,77954890,45472159,3,0,Fri Aug 04 01:14:00 EDT 2017,6601582,"It works in headed app. If possible you can use headed app instead for a workaround."
45472159,77990320,45472159,3,0,Fri Aug 04 19:50:00 EDT 2017,704281,"Thanks @RitaHan-MSFT, when I set up a headed app, I cannot get my RFID scanner to work. The app just hangs at `SpiDevice.FromIdAsync(devices[0].Id, settings);` (from https://stackoverflow.com/a/34357827/704281)"
45472159,50076164,45472159,2,1,Sat Apr 28 11:41:00 EDT 2018,777112,"<p>This hanging can be caused by Async and WPF context locking. Try to use <code>Task.Wait()</code> instead of <code>await</code>. WPF UI locks <code>awaits</code> easily.	I got my <code>await SpiDevice.FromIdAsync(devs[0].Id, set)</code> locked, and when I changed to <code>devTask.Wait()</code>, lock disappeared and device found from <code>devTask.Result</code>.</p>	"
45472159,87209313,50076164,3,0,Mon Apr 30 08:22:00 EDT 2018,704281,"Sounds fair, thanks for that. Unfortunately I cannot check it since we stopped that fun project in favor for others. One day I might come back to this."
