thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37931443,37931443,null,1,1,Mon Jun 20 20:40:00 EDT 2016,1854114,"<p>I'm new to Windows 10 IoT. I've been working with microcontrollers for several years, and maybe it's my bad habits. I'm building an application which needs to "ping" several GPIO until a specific combination is found between them. Once found, a graphical interface should do an animation.</p>		<p>My problem is as follow: What is the best way to continuos loop in the background while showing the graphical interface?</p>		<p>I'm currently doing as follow:</p>		<p>InitGPIO();</p>		<pre><code>timer = new DispatcherTimer();	timer.Interval = TimeSpan.FromMilliseconds(0.05);	timer.Tick += Timer_Tick;	if (init)	   timer.Start();	</code></pre>		<p>and</p>		<pre><code>private void Timer_Tick(object sender, object e)	{	      //Here I loop the GPIO. I f a comkbination is found, the graphical interface is triggered.	}	</code></pre>		<p>Is there a better way?</p>		<p>Thanks!</p>	"
37931443,39806618,37931443,2,0,Sat Oct 01 12:29:00 EDT 2016,2621693,"<p>Probably best not to attach yourself to a timer specifically because many sensors and controllers will have their own polling rates, and the GpioPin has its own event receiver for handling when the value changes.</p>		<p>If you bind everything to event receivers, then in your main program class you can simply loop <code>while(true) {}</code> after everything is initialized.</p>		<p>Because I'm only writing small projects for testing, and I often get up from my desk and forget to power off my raspi, I bake in a timeout to my loop so it automatically shuts off after 5 minutes.</p>		<pre><code>var timeout = DateTime.Now.AddMinutes(5);		while (DateTime.Now &lt; timeout) {	    Task.Delay(1000).Wait();	}	</code></pre>		<p>This will check every second if it's passed the timeout. A habit I got from playing around in Unity development (which also uses the while(true) concept) is to not actually let a loop run at max speed as it may end up chewing up CPU cycles. It's better to throw in even a simple 1 ms delay to an empty loop.</p>	"
