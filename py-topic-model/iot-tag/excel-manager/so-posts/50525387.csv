thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
50525387,50525387,null,1,0,Fri May 25 09:02:00 EDT 2018,9333556,"<p>I have a board that sends jsons with telemetry to Azure IoT hub (using http). I want to read telemetry data with my android device. I looked some examples of reading messages from IoT hub for android, but I found only how to read them from "Cloud to device feedback" endpoint. So now my application looks like:</p>		<p><em>Json from the board  ---->  "Events" endpoint   ---> Function application that resending json to "Cloud to device feedback" endpoint	----->   "Cloud to device feedback" endpoint  ----> Android device.</em></p>		<p>I'm a beginner in Azure, so I'm sure that exists smarter way to do that. <em>(Json from the board  ---->  "Events" endpoint   ---> Android device)</em>. I did it on my desktop, but looks like android doesn't work with some libraries from desktop project.</p>		<p>Does anybody know how can I do it? (maybe some guides or lessons)</p>		<p><a href="https://docs.microsoft.com/en-us/azure/iot-hub/quickstart-send-telemetry-java#register-a-device" rel="nofollow noreferrer">Desktop version</a></p>		<p>Part of android code:</p>		<pre><code>public void btnReceiveOnClick(View v) throws URISyntaxException, IOException	{	    System.out.println("Receiving:");	    Button button = (Button) v;		    // Comment/uncomment from lines below to use HTTPS or MQTT protocol	    //IotHubClientProtocol protocol = IotHubClientProtocol.HTTPS;	    IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;		    DeviceClient client = new DeviceClient(connString, protocol);		    if (protocol == IotHubClientProtocol.MQTT)	    {	        MessageCallbackMqtt callback = new MessageCallbackMqtt();	        Counter counter = new Counter(0);	        client.setMessageCallback(callback, counter);	    } else	    {	        MessageCallback callback = new MessageCallback();	        Counter counter = new Counter(0);	        client.setMessageCallback(callback, counter);	    }		    try	    {	        client.open();	    } catch (Exception e2)	    {	        System.out.println("Exception while opening IoTHub connection: " + e2.toString());	    }		    try	    {	        Thread.sleep(1000);	    } catch (InterruptedException e)	    {	        e.printStackTrace();	    }		    client.closeNow();		    try {	        ....		    }catch (JSONException je){	        ....	    }	}				// Our MQTT doesn't support abandon/reject, so we will only display the messaged received	// from IoTHub and return COMPLETE	static class MessageCallbackMqtt implements com.microsoft.azure.sdk.iot.device.MessageCallback	{	    public IotHubMessageResult execute(Message msg, Object context)	    {	        responce = new String(msg.getBytes(), Message.DEFAULT_IOTHUB_MESSAGE_CHARSET);	        Counter counter = (Counter) context;	        System.out.println(	                "[from MessageCallbackMqtt] Received message " + counter.toString()	                        + " with content: " + responce);		        counter.increment();	        return IotHubMessageResult.COMPLETE;	    }	}		static class EventCallback implements IotHubEventCallback	{	    public void execute(IotHubStatusCode status, Object context)	    {	        Integer i = (Integer) context;	        System.out.println("[from EventCallback]  IoT Hub responded to message " + i.toString()	                + " with status " + status.name());	    }	}		static class MessageCallback implements com.microsoft.azure.sdk.iot.device.MessageCallback	{	    public IotHubMessageResult execute(Message msg, Object context)	    {	        Counter counter = (Counter) context;	        System.out.println(	                "Received message " + counter.toString()	                        + " with content: " + new String(msg.getBytes(), Message.DEFAULT_IOTHUB_MESSAGE_CHARSET));		        int switchVal = counter.get() % 3;	        IotHubMessageResult res;	        switch (switchVal)	        {	            case 0:	                res = IotHubMessageResult.COMPLETE;	                break;	            case 1:	                res = IotHubMessageResult.ABANDON;	                break;	            case 2:	                res = IotHubMessageResult.REJECT;	                break;	            default:	                // should never happen.	                throw new IllegalStateException("Invalid message result specified.");	        }		        System.out.println("Responding to message " + counter.toString() + " with " + res.name());	        counter.increment();	        return res;	    }	}	</code></pre>	"
50525387,88062730,50525387,3,0,Fri May 25 09:06:00 EDT 2018,null,"you have to read telemetry data to android device?"
50525387,88063672,50525387,3,0,Fri May 25 09:33:00 EDT 2018,9333556,"I want to read messages incoming to IoT hub using my android phone"
50525387,50560266,50525387,2,0,Mon May 28 06:22:00 EDT 2018,8546089,"<p>You can refer to this <a href="https://docs.microsoft.com/en-us/azure/iot-hub/quickstart-send-telemetry-java#read-the-telemetry-from-your-hub" rel="nofollow noreferrer">document</a>.It shows how to read the telemetry from you IoT Hub with Java.In the ReadDeviceToCloudMessages.java sample, it connects to the service-side Events endpoint on your IoT Hub and receives the device-to-cloud messages.</p>		<p>BTW, you can get the <em>eventHubsCompatibleEndpoint</em>, eventHubsCompatiblePath and <em>iotHubSasKey</em> from Azure Portal simply. The <em>eventHubsCompatibleEndpoint</em> is in this format: </p>		<blockquote>	  <p>sb://xxxxxxxxxxxxxx.servicebus.windows.net/</p>	</blockquote>		<p><a href="https://i.stack.imgur.com/58D53.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/58D53.png" alt="enter image description here"></a></p>	"
50525387,88211494,50560266,3,0,Wed May 30 09:33:00 EDT 2018,9333556,"Thank you, I've already solve my problem almost the same way as you described here."
