thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
46571469,46571469,null,1,3,Wed Oct 04 18:10:00 EDT 2017,8591936,"<p><strong>Context</strong>: Each customer can have 100-1000 IoT-devices behind NAT. We have multiple customers. The aim is to manage these devices from outside. Devices use CoAP protocol, which uses by default udp. </p>		<p>There are few constraints.</p>		<ul>	<li>It is not possible to activate Port-Forwarding.</li>	<li>It is not possible to open a VPN connection.</li>	<li>Any changes in local network of IoT devices are not possible.</li>	</ul>		<p><strong>Problem</strong>	We'd like to open anytime a connection to device from outside. But there is the NAT which prevents it.  </p>		<p><strong>Options</strong>	As I understand, the device has to open initial request in order to communicate. </p>		<p><strong>Which of the following options is the best one regarding scalability and efficiency?</strong></p>		<ol>	<li>Each node sends udp pings in order to keep NAT connection open.</li>	<li>Each node uses TCP and sends keepalive to keep NAT connection open.</li>	<li>Each node communicates with udp to local proxy behind NAT. The proxy does mapping from coap to http. The proxy establishes connection to server with TCP and it sends keepalive in order to keep NAT connection open.</li>	<li>Same as option 3 but the local proxy uses WebSocket instead normal TCP.</li>	</ol>		<p>Thank you very much</p>	"
46571469,46585637,46571469,2,1,Thu Oct 05 12:28:00 EDT 2017,1870387,"<p>The official LWM2M answer to this is queuing mode, see slide 30 of <a href="https://www.slideshare.net/OpenMobileAlliance/oma-lwm2m-tutorial-by-arm-to-ietf-ace" rel="nofollow noreferrer">https://www.slideshare.net/OpenMobileAlliance/oma-lwm2m-tutorial-by-arm-to-ietf-ace</a> or slide 19 of <a href="https://mbed-media.mbed.com/filer_public/c1/c3/c1c35bec-5f0e-4a28-a422-115248c9a181/armmbed-lwm2m-webinar.pdf" rel="nofollow noreferrer">https://mbed-media.mbed.com/filer_public/c1/c3/c1c35bec-5f0e-4a28-a422-115248c9a181/armmbed-lwm2m-webinar.pdf</a> for more information. So the proposed solution is not listed under 1. to 4. above, but uses LWM2M protocol to send a "ping" in form of a registration update.</p>		<p>From a security viewpoint, if you deploy to public internet, I would suggest to:</p>		<p>a) you MUST use DTLS</p>		<p>b) you should support device firmware update and be able to deploy new firmware with patches very fast.</p>		<p>Personal view: LWM2M is broken by design by starting with the (wrong) idea that IoT devices are servers.</p>	"
46571469,91250888,46585637,3,0,Mon Sep 03 13:11:00 EDT 2018,50388,"@StefanVaillant I agree to your point of considering any device that listens as a "server". My suggestion is not to try to fit LwM2M into Client-Server model. Consider it more of a peer to peer, where any device could be server and client. It would be a bottleneck, if we try to map devices as server and client in the IoT context. Just my thought."
46571469,81193697,46585637,3,0,Sun Nov 05 13:22:00 EST 2017,1870387,"@yeniv All LWM2M projects I know (including OMA Test Fest) have a setup where the IoT device "listens" on a port to receive incoming data. From a pure technical viewpoint, I call this a "server". Note that this is also the root cause for the original question above.		I assume the documents you are referring to use a different meaning of Server as in "Server is a big computer"."
46571469,81002371,46585637,3,0,Tue Oct 31 03:57:00 EDT 2017,4045754,"Why do you say that "LWM2M is broken by design by starting with the (wrong) idea that IoT devices are servers"? The OMA specification says that a LwM2M Client is a logical component residing in the LwM2M Device. So the device has a LwM2M client and not a LwM2M server. OTOH, for CoAP is can be said so. CoAP assumes that the device is the server side."
