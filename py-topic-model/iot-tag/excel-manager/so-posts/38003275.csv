thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
38003275,38003275,null,1,-1,Thu Jun 23 23:04:00 EDT 2016,6100416,"<p>I am doing a IoT experiment with raspberry pis and sensors aiming to monitor temperature change. Each raspberry pi is connected to multiple sensors. My goal is to have one reading per sensor per second, store the data in a buffer(real buffer or a csv file) and publish the data to a broker. The program now is doing all things in queue. It turns out some delay. I have tested and it turns out the delay comes from reading process. Is there any way to reduce reading delay? Will multi threading solve this problem? If so, what I think is to create 3 thread. Sensor thread read the data and store in a buffer. Communicator thread connect to the broker, read the data in buffer and send it to the broker. Main thread will manage sensor thread and communicator thread. If I refactor the program in this way, do I write one sensor thread for each sensor or one sensor thread for all sensors?</p>		<p>Any suggestions will be greatly appreciated.</p>	"
38003275,63450805,38003275,3,4,Thu Jun 23 23:22:00 EDT 2016,206750,"The Pi should be able to handle one read of all your sensors once per second without any problem at all, even if you have a dozen sensors. Using threads sounds like over-engineering the problem. You should first check if the delay comes from reading from the sensor or writing the data out., then try to fix that problem first."
38003275,63472023,38003275,3,0,Fri Jun 24 13:45:00 EDT 2016,6100416,"How can I check where the delay come from? Currently, all sensors are on one breadboard, can it also be a possibility causing delay?"
38003275,38021364,38003275,2,0,Fri Jun 24 20:11:00 EDT 2016,770302,"<p>Before re-engineering your application, you should narrow down where the bottleneck is. To diagnose this, I would try logging the start and end of each read from your sensors to a string buffer you keep in memory. Do this for 30 seconds or so. Then, stop reading from the sensors and write the buffer to a log file. If the log file shows delays between the start and end of each of the sensor reads, then that's where the bottleneck is. If it doesn't, then the bottleneck is probably in continually writing your CSV file to disk.</p>	"
38003275,63567794,38021364,3,0,Mon Jun 27 22:56:00 EDT 2016,6100416,"Thanks for your answering. I have followed your instruction and the confirmed the delay come from the reading part. Since the delay is not uniformly distributed over time, I 'll like think it is a software problem rather than a hardware problem. Is there any suggestion on how to fix this problem?"
38003275,63568197,38021364,3,0,Mon Jun 27 23:18:00 EDT 2016,770302,"In that case, performing the reads on separate threads may be a viable solution. I would use one thread per sensor and have each one perform a read and dump the data into a common buffer. You'll have to make sure that your reads and writes to the buffer are synchronized."
