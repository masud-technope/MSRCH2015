thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
47530221,47530221,null,1,0,Tue Nov 28 11:16:00 EST 2017,5352886,"<p>I am new NATS. Not sure how NATS request reply works.</p>		<p>As per my understanding, this pattern can be use for bi-directional communication but questions is, Does it works between same message id/thread ? If not, can't we use two different queue for the same purpose? How it is different from pub-sub or queue pattern of NATS?</p>		<p>Can someone provide more use case on this?</p>		<p>Thanks.</p>	"
47530221,47537696,47530221,2,3,Tue Nov 28 17:36:00 EST 2017,7817149,"<p>You added <code>nats-streaming-server</code> tag, so I would first want to clarify that there is no request/reply API in NATS Streaming, because it does not really make sense.</p>		<p>In NATS, you would use request/reply when your publishing application wants to know that the subscribing application did receive and process the message. It is an end-to-end confirmation that the published message was received and processed. </p>		<p>It can also be simply because the subscribing application processes a job and send the result of that job back to the requestor.</p>		<p>A simple example would be:</p>		<pre><code>// Request will create an internal subscription on	// a private inbox and set it to the message's Reply	// field.	msg, err := nc.Request("job", payload, time.Second)	if err != nil {	    ...	} else {	    // msg is the reply sent by the subscribing application.	}	</code></pre>		<p>In the other side, you would have registered a subscription to handle the job requests.</p>		<pre><code>nc.Subscribe("job", func(req *nats.Msg) {	    // req is the request received by the publisher above.	    // Send back a reply to the request reply subject.	    nc.Publish(req.Reply, []byte(reply))	})	</code></pre>		<p>Not sure what language you use, but here is a link to the <a href="https://github.com/nats-io/go-nats#basic-usage" rel="nofollow noreferrer">Go client</a></p>	"
