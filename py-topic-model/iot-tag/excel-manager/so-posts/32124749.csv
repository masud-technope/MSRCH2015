thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
32124749,32124749,null,1,0,Thu Aug 20 17:36:00 EDT 2015,4086836,"<p>I'm trying to write a GSN wrapper for a REST service, which returns the following output when called from a browser:</p>		<p>1, 23.22</p>		<p>However, the wrapper that I wrote doesn't really work. Any ideas of what am I doing wrong?</p>		<p><strong>WRAPPER</strong></p>		<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;	&lt;virtual-sensor name="ForecastService" priority="10" &gt;	&lt;processing-class&gt;	    &lt;class-name&gt;org.openiot.gsn.vsensor.BridgeVirtualSensor&lt;/class-name&gt;	    &lt;init-params&gt;	        &lt;param name="allow-nulls"&gt;false&lt;/param&gt;	        &lt;param name="publish-to-lsm"&gt;true&lt;/param&gt;	    &lt;/init-params&gt;	    &lt;output-structure&gt;	        &lt;field name="rain" type="Integer" /&gt;	        &lt;field name="temperature" type="Double" /&gt;	    &lt;/output-structure&gt;	&lt;/processing-class&gt;	&lt;description&gt;weather forecast station&lt;/description&gt;	&lt;life-cycle pool-size="10"/&gt;	&lt;addressing&gt;	    &lt;predicate key="geographical"&gt;&lt;/predicate&gt;	&lt;/addressing&gt;	&lt;storage history-size="1" /&gt;	&lt;streams&gt;	    &lt;stream name="input1"&gt;	        &lt;source alias="source1" sampling-rate="1" storage-size="1"&gt;	            &lt;address wrapper="http-get"&gt;	                &lt;predicate key="url"&gt;http://192.168.1.100:8080/ForecastService/webresources/forecastservice/forecast/true/csv&lt;/predicate&gt;	                &lt;predicate key="rate"&gt;1000&lt;/predicate&gt;	            &lt;/address&gt;	            &lt;query&gt;select * from wrapper&lt;/query&gt;	        &lt;/source&gt;	        &lt;query&gt;select * from source1&lt;/query&gt;	    &lt;/stream&gt;	&lt;/streams&gt;	</code></pre>		<p></p>		<p><strong>OUTPUT</strong></p>		<pre><code>18:16:11.229 [VSensorLoader-Thread0] DEBUG org.openiot.gsn.beans.StreamSource - validate() called	18:16:11.229 [VSensorLoader-Thread0] DEBUG org.openiot.gsn.VSensorLoader - Preparing input streams for: forecastservice	18:16:11.230 [VSensorLoader-Thread0] DEBUG o.o.g.w.general.HttpGetWrapper - AXISWirelessCameraWrapper is now running @1000 Rate.	18:16:11.230 [VSensorLoader-Thread0] DEBUG org.openiot.gsn.VSensorLoader - Wrapper name: Http Receiver -- view name _774699928	18:16:11.230 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.240 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.240 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - The create table statement is : CREATE TABLE _774699928 (PK BIGINT NOT NULL IDENTITY, timed BIGINT NOT NULL, DATA Binary)	18:16:11.242 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - The create index statement is : CREATE  UNIQUE  INDEX _774699928_INDEX ON _774699928 (timed DESC)	18:16:11.244 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.250 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.251 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Dropping table structure: _sql_view_helper_ With query: Drop table if exists _sql_view_helper_	18:16:11.263 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.264 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - The create table statement is : CREATE TABLE _sql_view_helper_ (PK BIGINT NOT NULL IDENTITY, timed BIGINT NOT NULL, U_ID varchar(17))	18:16:11.264 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - The create index statement is : CREATE  INDEX _sql_view_helper__INDEX ON _sql_view_helper_ (timed DESC)	18:16:11.266 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.270 [VSensorLoader-Thread0] DEBUG o.o.g.b.w.TupleBasedSlidingHandler - The original Query : select * from wrapper	18:16:11.271 [VSensorLoader-Thread0] DEBUG o.o.g.b.w.TupleBasedSlidingHandler - The merged query : select * from  (select * from _774699928 where timed &gt;= (select distinct(timed) from _774699928 where timed in (select timed from _774699928 order by timed desc limit 1 offset 0 )) order by timed desc ) of the StreamSource source1 of the InputStream: input1	18:16:11.271 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.271 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Creating a view:create view __911689473 AS ( select * from  (select * from _774699928 where timed &gt;= (select distinct(timed) from _774699928 where timed in (select timed from _774699928 order by timed desc limit 1 offset 0 )) order by timed desc ) )	18:16:11.274 [VSensorLoader-Thread0] DEBUG o.o.gsn.wrappers.AbstractWrapper - Adding listeners:  Stream Source object:  Alias: source1 uidS: __911689473 Active source: [http-geturl = http://192.168.1.100:8080/ForecastService/webresources/forecastservice/forecast/true/csv,rate = 1000,]	18:16:11.274 [VSensorLoader-Thread0] DEBUG o.openiot.gsn.storage.StorageManager - Asking a con. to DB: jdbc:h2:file:MyFile =&gt; busy: 0, max-size: 8, idle: 1	18:16:11.277 [VSensorLoader-Thread0] ERROR org.openiot.gsn.VSensorLoader - The column : RAIN in the &gt;forecastservice&lt; table is not compatible with type : Integer. The actual type for this table (currently in the database): 2005	org.openiot.gsn.utils.GSNRuntimeException: The column : RAIN in the &gt;forecastservice&lt; table is not compatible with type : Integer. The actual type for this table (currently in the database): 2005	    at org.openiot.gsn.storage.StorageManager.tableExists(StorageManager.java:241) ~[classes/:na]	    at org.openiot.gsn.storage.StorageManager.tableExists(StorageManager.java:270) ~[classes/:na]	    at org.openiot.gsn.VSensorLoader.loadPlugin(VSensorLoader.java:255) ~[classes/:na]	    at org.openiot.gsn.VSensorLoader.loadPlugin(VSensorLoader.java:210) ~[classes/:na]	    at org.openiot.gsn.VSensorLoader.run(VSensorLoader.java:134) ~[classes/:na]	    at java.lang.Thread.run(Thread.java:745) [na:1.7.0_79]	</code></pre>	"
32124749,32140976,32124749,2,0,Fri Aug 21 12:59:00 EDT 2015,4086836,"<p>Basically you need to write your own REST service wrapper and read the results. In my case I had a weather forecast service, and wrote a wrapper called ForecastServiceWrapper. I mapped this wrapper in wrapper.properties with forecast-service-get and wrote the description of the virtual sensor and added it in VirtualSensor folder. Below is the description of the sensor.</p>		<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;	&lt;virtual-sensor name="ForecastService" priority="10" &gt;	    &lt;processing-class&gt;	        &lt;class-name&gt;org.openiot.gsn.vsensor.BridgeVirtualSensor&lt;/class-name&gt;	        &lt;init-params&gt;	            &lt;param name="allow-nulls"&gt;false&lt;/param&gt;	            &lt;param name="publish-to-lsm"&gt;true&lt;/param&gt;	        &lt;/init-params&gt;	        &lt;output-structure&gt;	            &lt;field name="rain" type="Integer" /&gt;	            &lt;field name="temperature" type="Double" /&gt;	        &lt;/output-structure&gt;	    &lt;/processing-class&gt;	    &lt;description&gt;weather forecast station&lt;/description&gt;	    &lt;life-cycle pool-size="10"/&gt;	    &lt;addressing&gt;	        &lt;predicate key="geographical"&gt;&lt;/predicate&gt;	    &lt;/addressing&gt;	    &lt;storage history-size="1" /&gt;	    &lt;streams&gt;	        &lt;stream name="input1"&gt;	            &lt;source alias="source1" sampling-rate="1" storage-size="1"&gt;	                &lt;address wrapper="forecast-service-get"&gt;	                    &lt;predicate key="url"&gt;http://192.168.1.100:8080/ForecastService/webresources/forecastservice/forecast/true/csv&lt;/predicate&gt;	                    &lt;predicate key="rate"&gt;1000&lt;/predicate&gt;	                &lt;/address&gt;	                &lt;query&gt;select * from wrapper&lt;/query&gt;	            &lt;/source&gt;	            &lt;query&gt;select * from source1&lt;/query&gt;	        &lt;/stream&gt;	    &lt;/streams&gt;	&lt;/virtual-sensor&gt;	</code></pre>	"
