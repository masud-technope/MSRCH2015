thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
50639809,50639809,null,1,0,Fri Jun 01 09:04:00 EDT 2018,8449495,"<p>Basically I am working on PIR sensor, when intruder is detected it goes to 1 min of sleep time. I want to reset this sleep time when  the intruder is detected during sleep time.	Below is the code:  </p>		<pre><code>`import RPi.GPIO as GPIO	import time		GPIO.setmode(GPIO.BCM)	GPIO.setup(18,GPIO.IN)		try:	    while True:	        i=GPIO.input(18)	        if i==1:	            print("Intruder")	            time.sleep(60)	        elif i==0:	            print("No intruder")	            time.sleep(60)	except KeyboardInterrupt:	    GPIO.cleanup()	    exit(0)`	</code></pre>	"
50639809,88289920,50639809,3,1,Fri Jun 01 09:13:00 EDT 2018,1767754,"`sleep` is blocking, while you are in sleep you can't call a different function. You could use a thread though, that coun'ts till 60"
50639809,88290252,50639809,3,0,Fri Jun 01 09:21:00 EDT 2018,8449495,"i m completely new in python can u please tell me how to use thread??"
50639809,50640990,50639809,2,0,Fri Jun 01 10:04:00 EDT 2018,5888317,"<p>Don't have a raspberry pi to hand... could try this, works with keyboard input in ipython. </p>		<pre><code>try:	    while True:	    # i=int(input('input number: '))	    i=int(i=GPIO.input(18))	        if i!=1:	            print("No intruder")	        else:	            print("Intruder")	        time.sleep(60)	</code></pre>	"
50639809,50640991,50639809,2,1,Fri Jun 01 10:04:00 EDT 2018,7529716,"<p>Here's a solution using thread:</p>		<pre><code>from threading import Thread, Event	import time		import RPi.GPIO as GPIO			class MyThread(Thread):	    def __init__(self, timeout=60):	        super(MyThread, self).__init__()	        self.intruder_spotted = Event()	        self.timeout = timeout		        self.daemon = True		    def run(self):	        while True:	            if self.intruder_spotted.wait(self.timeout):	                self.intruder_spotted.clear()	                print("Intruder")	            else:	                print("No intruder")				t = MyThread(60)		GPIO.setmode(GPIO.BCM)	GPIO.setup(18,GPIO.IN)		try:	    t.start()	    while True:	        i=GPIO.input(18)	        if i==1:	            t.intruder_spotted.set()		        time.sleep(1)		except KeyboardInterrupt:	    GPIO.cleanup()	    exit(0)	</code></pre>	"
50639809,88631606,50640991,3,0,Tue Jun 12 09:06:00 EDT 2018,8449495,"please help me out"
50639809,88631968,50640991,3,1,Tue Jun 12 09:16:00 EDT 2018,7529716,"Updated the int of the class my Thread. It's `\__init__\` not \__ini. And the call to the parent init with super."
50639809,88572377,50640991,3,0,Sun Jun 10 10:52:00 EDT 2018,8449495,"AssertionError: group argument must be None for now"
