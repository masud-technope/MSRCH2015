thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
30082322,30082322,null,1,5,Wed May 06 16:23:00 EDT 2015,2289331,"<p>I just wanted to start making experience with the DHT22/AM2302 (a temperature and humidity sensor), but I have no idea how to initialize and get the data of it ... I tried to use GpioPin:</p>		<pre><code>gpioController = GpioController.GetDefault();	if(gpioController == null)	{	    Debug.WriteLine("GpioController Initialization failed.");	    return;	}	sensorPin = gpioController.OpenPin(7); //Exception throws here	sensorPin.SetDriveMode(GpioPinDriveMode.Input);	Debug.WriteLine(sensorPin.Read());	</code></pre>		<p>but get the exception: "A resource required for this operation is disabled."</p>		<p>After that I took a look at the library for the unixoids and found this:</p>		<p><a href="https://github.com/technion/lol_dht22/blob/master/dht22.c" rel="nofollow">https://github.com/technion/lol_dht22/blob/master/dht22.c</a></p>		<p>But I have no idea how to realize that in VCSharp using Windows 10, anyone an idea or experience?</p>		<p>Thank you very much in advance!</p>		<p>UPDATE:</p>		<p>I got the hint, that there is not GPIO-Pin 7 and this is true, so I re-tried it, but the GPIO-Output seems to be just HIGH or LOW ... So I have to use the I2C or the SPI ... According to this Project, I decided to try it out with SPI: <a href="http://microsoft.hackster.io/windowsiot/temperature-sensor-sample" rel="nofollow">http://microsoft.hackster.io/windowsiot/temperature-sensor-sample</a> and making steps forward ... The difficulty now is to translate the above linked C-Library to the C-Sharp-SDK to receive the right data ... </p>		<pre><code>private async void InitSPI()	{	    try	    {	        var settings = new SpiConnectionSettings(SPI_CHIP_SELECT_LINE);	        settings.ClockFrequency = 500000;	        settings.Mode = SpiMode.Mode0;		        string spiAqs = SpiDevice.GetDeviceSelector(SPI_CONTROLLER_NAME);	        var deviceInfo = await DeviceInformation.FindAllAsync(spiAqs);	        SpiDisplay = await SpiDevice.FromIdAsync(deviceInfo[0].Id, settings);	    }	    catch(Exception ex)	    {	        Debug.WriteLine("SPI Initialization failed: " + ex.Message);	    }	}	</code></pre>		<p>This works not so well, to be clear: It works just once on starting up the raspberry pi2, then starting / remote debugging the application, but after exiting the application and re-start them, the SPI Initialization fails.</p>		<p>And now Im working on reading the data from the pin and will show some Code in a future update. Any comments, answers and or advices are still welcome. </p>	"
30082322,30834780,30082322,2,1,Sun Jun 14 21:32:00 EDT 2015,2723,"<p>DHT22 requires very precise timing.  Although Raspberry PI/Windows 10 IoT core is extremely fast, since it's an operating system where other things need to happen unless you write some sort of low-level driver (not C#) you won't be able to generate the timings necessary to communicate with a DHT22.  </p>		<p>What I do is use a cheap Arduino Mini Pro for about $5 with the sole purpose to generate and send the correct timings between the microcontroller and the Raspberry Pi, then setup some sort of communication channel between the Arduino Mini Pro (I2C, Serial) to pull the data from the Arduino.</p>	"
