thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
49141555,49141555,null,1,2,Tue Mar 06 23:12:00 EST 2018,9453777,"<p>I'm working on an Arduino-based RFID user access logger, but I'm having some issues while reading server responses.</p>		<p>My setup is the following:</p>		<p>-An Arduino Mega connected to an MFRC522 card reader and a ENC28J60 ethernet module (SS and RST pins of the MFRC522 are changed to avoid conflicts within the SPI bus).</p>		<p>-A local host server (on port 100) which contains a MySQL database and the necessary php files.</p>		<p>Currently the cards are read properly and the Arduino is succesfully updating variables in the database, however I'm not able to get the echos from the php file to be displayed through the serial monitor. To test if everything was OK from the server side, I've created a small html form and if I send it I get the necessary echos displayed in my browser.</p>		<p>I'm printing the value which client.available() returns and I'm always getting a false, although client.connected() returns true. Comparing my code to others found online there's no much difference. At this point I don't know what to try, I'm hopping you could help me with this!</p>		<p>I'm attaching the codes below:</p>		<p><strong>Arduino:</strong></p>		<pre><code>#include &lt;SPI.h&gt;	#include &lt;MFRC522.h&gt;	#include &lt;UIPEthernet.h&gt;		#include &lt;Wire.h&gt; 	#include &lt;LiquidCrystal_I2C.h&gt;		//----RFID----/	MFRC522 rfid(8, 9); //(SS pin, RST pin)	byte nuidPICC[4];		//----ETHERNET----/	#define DEBUG	EthernetClient client;	char server[] = "192.168.xxx.xxx";   //&lt;-Localhost	byte mac[] = { 0x54, 0x34, 0x41, 0x30, 0x30, 0x40 };		//----LCD----/	LiquidCrystal_I2C lcd(0x3F, 16, 2);		//----VARIABLES----/	int userid=0;		void setup() { 	  Serial.begin(9600);	  SPI.begin(); // Init SPI bus	  lcd.begin();	  pinMode(2,OUTPUT);		  //----RFID----/	  rfid.PCD_Init(); // Init MFRC522 		  //----ETHERNET----/	  Ethernet.begin(mac);	  #ifdef DEBUG	    Serial.println("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n");	    Serial.print("IP Address        : ");	    Serial.println(Ethernet.localIP());	    Serial.print("Subnet Mask       : ");	    Serial.println(Ethernet.subnetMask());	    Serial.print("Default Gateway IP: ");	    Serial.println(Ethernet.gatewayIP());	    Serial.print("DNS Server IP     : ");	    Serial.println(Ethernet.dnsServerIP());	    lcd.print("IP Address");	    lcd.setCursor(0,1);	    lcd.print(Ethernet.localIP());	    delay(2000);	    lcd.clear();	    lcd.noBacklight();	  #endif	}		void sender(){		  /*lcd.clear();	  lcd.backlight();	  lcd.setCursor(0,0);	  lcd.print("identifying");	  tone(2,900,400);*/		  if(client.connect(server, 100)){	    Serial.println("Conected");	  }	  //String query = "GET /uploader.php?userid=";	  //query=query+String(userid);	  //Serial.println(query);	  //client.print(query);		  client.print( "GET /uploader.php?userid=");	  client.print(12345);	  client.println(" HTTP/1.1");	  client.print("HOST: ");	  client.println(server);	  client.println();	  client.println();	  Serial.println("Data sent");		  delay(1000);		  Serial.println(client.connected());	  Serial.println(client.available());		  if(client.available())	        {	            Serial.println("ARDUINO: HTTP message received");	            Serial.println("ARDUINO: printing received headers and script response...\n");		            while(client.available())	            {	                char c = client.read();	                Serial.print(c);	            }	            //Code to display info through the serial monitor and the LCD	        }	        else	        {	            Serial.println("ARDUINO: no response received / no response received in time");	        }	  client.stop();	}		void reader(){	    userid=0;	  // Look for new cards	  if ( ! rfid.PICC_IsNewCardPresent())	    return;		  // Verify if the NUID has been readed	  if ( ! rfid.PICC_ReadCardSerial())	    return;		  // Store NUID into nuidPICC array	  for (byte i = 0; i &lt; 4; i++) {	    nuidPICC[i] = rfid.uid.uidByte[i];	    userid=userid+nuidPICC[i];	  }		  rfid.PICC_HaltA();		  rfid.PCD_StopCrypto1();		  sender();	}		void loop(){	  reader();	}	</code></pre>		<p><strong>Uploader.php</strong></p>		<pre><code>&lt;?php	$conexion = mysql_connect("localhost", "user", "pass");	mysql_select_db("db_name", $conexion);	mysql_query("SET NAMES 'utf8'");		$userid = $_GET ['userid'];		$sql1 = "SELECT nombre, ultima_entrada, ultimo_pago, dentro FROM usuarios WHERE id = '$userid'";	$retval = mysql_query( $sql1, $conexion );		if(! $retval ) {	  die('Could not get data: ' . mysql_error());	  echo "return error";	}		$row = mysql_fetch_array($retval, MYSQL_ASSOC);		$month = date('n',strtotime($row['ultimo_pago']));		$date = date('n');				if($month &lt; $date){	    echo "El usuario:{$row['nombre']} es moroso  &lt;br&gt; ";   	}else{	   if($row['dentro']==0){	       echo "Usuario:{$row['nombre']} accediendo al lab &lt;br&gt;";	       $sql2 = "UPDATE usuarios SET dentro='1', ultima_entrada = CURRENT_TIMESTAMP WHERE id = '$userid'";	       mysql_query($sql2);	   }elseif($row['dentro']==1){	       echo "Usuario:{$row['nombre']} saliendo del lab &lt;br&gt;";	       $sql3 = "UPDATE usuarios SET dentro='0', ultima_salida = CURRENT_TIMESTAMP WHERE id = '$userid'";	       mysql_query($sql3);	   }	}		mysql_close();		?&gt;	</code></pre>		<p><strong>SQL table</strong></p>		<pre><code>CREATE TABLE `usuarios` (	  `id` varchar(11) NOT NULL,	  `nombre` tinytext NOT NULL,	  `admin` tinyint(1) NOT NULL DEFAULT '0',	  `ultima_entrada` timestamp NULL DEFAULT NULL,	  `ultima_salida` timestamp NULL DEFAULT NULL,	  `tiempo_total` time DEFAULT NULL,	  `ultimo_pago` date DEFAULT NULL,	  `dentro` tinyint(1) NOT NULL DEFAULT '0',	  PRIMARY KEY (`id`),	  UNIQUE KEY `id` (`id`)	) ENGINE=MyISAM DEFAULT CHARSET=utf8;		INSERT INTO `usuarios` (`id`, `nombre`, `admin`, `ultima_entrada`, `ultima_salida`, `tiempo_total`, `ultimo_pago`, `dentro`) VALUES	('12345', 'John', 0, '2018-03-06 16:41:44', '2018-03-06 16:41:36', '00:00:00', '2018-03-01', 1);	</code></pre>		<p>NOTE: I'm using a dummy user Id, in the future this will be changed, now I only want to get a response from the server.</p>		<p>Thank you in advance!</p>	"
49141555,49158490,49141555,2,2,Wed Mar 07 18:01:00 EST 2018,9453777,"<p>Silly me! I found the solution to my problem in the comment section of this blog (from the author of the UIPEthernet lib itself!):</p>		<p><a href="https://www.tweaking4all.com/hardware/arduino/arduino-ethernet-data-push/#comment-21572" rel="nofollow noreferrer">https://www.tweaking4all.com/hardware/arduino/arduino-ethernet-data-push/#comment-21572</a></p>		<p>If you read the comment, Norbert says that delays should be avoided, and that is what I had wrong. In my code I have a beautiful 1 sec delay after the GET request. Removing it solved the problem. I've based my code on this one: <a href="http://www.smartsustainability.org/CIS508/?page_id=2203" rel="nofollow noreferrer">http://www.smartsustainability.org/CIS508/?page_id=2203</a> but it is made for different WIFI/Ethernet shields, not for ENC28J60, this is where the problem came from. (Not saying it is a bad code though).</p>		<p>In conclusion, the solution was to replace this line:</p>		<pre><code>delay(1000);	</code></pre>		<p>with this loop, which waits until client is available:</p>		<pre><code>while(!client.available()){}	</code></pre>		<p>Hope this will avoid future headaches!</p>	"
49141555,99448527,49158490,3,0,Mon Jun 03 12:04:00 EDT 2019,6362774,"I had the same problem with: `while (client.available()) { //stuff }` and I also resolved it by putting `while(!client.available()){}` before"
