thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44588005,44588005,null,1,0,Fri Jun 16 11:20:00 EDT 2017,7114715,"<p>I am running a Mosquitto broker locally on my PC. When I am trying to subscribe to a specific topic, I am getting the following error: </p>		<p><strong>C:\Users\Desktop\mosquitto>mosquitto_sub -h localhost -t sensors -d -v<br>	Client mosqsub/4204-lbl sending CONNECT<br>	Client mosqsub/4204-lbl received CONNACK<br>	Connection Refused: bad user name or password.</strong></p>		<p>I assume that I need to edit my mosquitto.conf file to allow access without a user name and a password...Is this possible? Can anyone advise me on how to do so? </p>		<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">	<div class="snippet-code">	<pre class="snippet-code-html lang-html prettyprint-override"><code># Config file for mosquitto	#	# See mosquitto.conf(5) for more information.	#	# Default values are shown, uncomment to change.	#	# Use the # character to indicate a comment, but only if it is the 	# very first character on the line.		# =================================================================	# General configuration	# =================================================================		# Time in seconds to wait before resending an outgoing QoS=1 or 	# QoS=2 message.	#retry_interval 20		# Time in seconds between updates of the $SYS tree.	# Set to 0 to disable the publishing of the $SYS tree.	#sys_interval 10		# Time in seconds between cleaning the internal message store of 	# unreferenced messages. Lower values will result in lower memory 	# usage but more processor time, higher values will have the 	# opposite effect.	# Setting a value of 0 means the unreferenced messages will be 	# disposed of as quickly as possible.	#store_clean_interval 10		# Write process id to a file. Default is a blank string which means 	# a pid file shouldn't be written.	# This should be set to /var/run/mosquitto.pid if mosquitto is	# being run automatically on boot with an init script and 	# start-stop-daemon or similar.	#pid_file		# When run as root, drop privileges to this user and its primary 	# group.	# Leave blank to stay as root, but this is not recommended.	# If run as a non-root user, this setting has no effect.	# Note that on Windows this has no effect and so mosquitto should 	# be started by the user you wish it to run as.	#user mosquitto		# The maximum number of QoS 1 and 2 messages currently inflight per 	# client.	# This includes messages that are partway through handshakes and 	# those that are being retried. Defaults to 20. Set to 0 for no 	# maximum. Setting to 1 will guarantee in-order delivery of QoS 1 	# and 2 messages.	#max_inflight_messages 20		# The maximum number of QoS 1 and 2 messages to hold in a queue 	# above those that are currently in-flight.  Defaults to 100. Set 	# to 0 for no maximum (not recommended).	# See also queue_qos0_messages.	#max_queued_messages 100		# Set to true to queue messages with QoS 0 when a persistent client is	# disconnected. These messages are included in the limit imposed by	# max_queued_messages.	# Defaults to false.	# This is a non-standard option for the MQTT v3.1 spec but is allowed in	# v3.1.1.	#queue_qos0_messages false		# This option sets the maximum publish payload size that the broker will allow.	# Received messages that exceed this size will not be accepted by the broker.	# The default value is 0, which means that all valid MQTT messages are	# accepted. MQTT imposes a maximum payload size of 268435455 bytes. 	#message_size_limit 0		# This option controls whether a client is allowed to connect with a zero	# length client id or not. This option only affects clients using MQTT v3.1.1	# and later. If set to false, clients connecting with a zero length client id	# are disconnected. If set to true, clients will be allocated a client id by	# the broker. This means it is only useful for clients with clean session set	# to true.	#allow_zero_length_clientid true		# If allow_zero_length_clientid is true, this option allows you to set a prefix	# to automatically generated client ids to aid visibility in logs.	#auto_id_prefix		# This option allows persistent clients (those with clean session set to false)	# to be removed if they do not reconnect within a certain time frame.	#	# This is a non-standard option in MQTT V3.1 but allowed in MQTT v3.1.1.	#	# Badly designed clients may set clean session to false whilst using a randomly	# generated client id. This leads to persistent clients that will never	# reconnect. This option allows these clients to be removed.	#	# The expiration period should be an integer followed by one of h d w m y for	# hour, day, week, month and year respectively. For example	#	# persistent_client_expiration 2m	# persistent_client_expiration 14d	# persistent_client_expiration 1y	#	# The default if not set is to never expire persistent clients.	#persistent_client_expiration		# If a client is subscribed to multiple subscriptions that overlap, e.g. foo/#	# and foo/+/baz , then MQTT expects that when the broker receives a message on	# a topic that matches both subscriptions, such as foo/bar/baz, then the client	# should only receive the message once.	# Mosquitto keeps track of which clients a message has been sent to in order to	# meet this requirement. The allow_duplicate_messages option allows this	# behaviour to be disabled, which may be useful if you have a large number of	# clients subscribed to the same set of topics and are very concerned about	# minimising memory usage.	# It can be safely set to true if you know in advance that your clients will	# never have overlapping subscriptions, otherwise your clients must be able to	# correctly deal with duplicate messages even when then have QoS=2.	#allow_duplicate_messages false		# The MQTT specification requires that the QoS of a message delivered to a	# subscriber is never upgraded to match the QoS of the subscription. Enabling	# this option changes this behaviour. If upgrade_outgoing_qos is set true,	# messages sent to a subscriber will always match the QoS of its subscription.	# This is a non-standard option explicitly disallowed by the spec.	#upgrade_outgoing_qos false		# =================================================================	# Default listener	# =================================================================		# IP address/hostname to bind the default listener to. If not	# given, the default listener will not be bound to a specific 	# address and so will be accessible to all network interfaces.	# bind_address ip-address/host name	#bind_address		# Port to use for the default listener.	#port 1883		# The maximum number of client connections to allow. This is 	# a per listener setting.	# Default is -1, which means unlimited connections.	# Note that other process limits mean that unlimited connections 	# are not really possible. Typically the default maximum number of 	# connections possible is around 1024.	#max_connections -1		# Choose the protocol to use when listening.	# This can be either mqtt or websockets.	# Websockets support is currently disabled by default at compile time.	# Certificate based TLS may be used with websockets, except that	# only the cafile, certfile, keyfile and ciphers options are supported.	#protocol mqtt		# When a listener is using the websockets protocol, it is possible to serve	# http data as well. Set http_dir to a directory which contains the files you	# wish to serve. If this option is not specified, then no normal http	# connections will be possible.	#http_dir		# Set use_username_as_clientid to true to replace the clientid that a client	# connected with with its username. This allows authentication to be tied to	# the clientid, which means that it is possible to prevent one client	# disconnecting another by using the same clientid.	# If a client connects with no username it will be disconnected as not	# authorised when this option is set to true.	# Do not use in conjunction with clientid_prefixes.	# See also use_identity_as_username.	#use_username_as_clientid		# -----------------------------------------------------------------	# Certificate based SSL/TLS support	# -----------------------------------------------------------------	# The following options can be used to enable SSL/TLS support for 	# this listener. Note that the recommended port for MQTT over TLS	# is 8883, but this must be set manually.	#	# See also the mosquitto-tls man page.		# At least one of cafile or capath must be defined. They both 	# define methods of accessing the PEM encoded Certificate 	# Authority certificates that have signed your server certificate 	# and that you wish to trust.	# cafile defines the path to a file containing the CA certificates.	# capath defines a directory that will be searched for files	# containing the CA certificates. For capath to work correctly, the	# certificate files must have ".crt" as the file ending and you must run	# "c_rehash &lt;path to capath&gt;" each time you add/remove a certificate.	#cafile	#capath		# Path to the PEM encoded server certificate.	#certfile		# Path to the PEM encoded keyfile.	#keyfile		# This option defines the version of the TLS protocol to use for this listener.	# The default value allows v1.2, v1.1 and v1.0, if they are all supported by	# the version of openssl that the broker was compiled against. For openssl &gt;=	# 1.0.1 the valid values are tlsv1.2 tlsv1.1 and tlsv1. For openssl &lt; 1.0.1 the	# valid values are tlsv1.	#tls_version		# By default a TLS enabled listener will operate in a similar fashion to a	# https enabled web server, in that the server has a certificate signed by a CA	# and the client will verify that it is a trusted certificate. The overall aim	# is encryption of the network traffic. By setting require_certificate to true,	# the client must provide a valid certificate in order for the network	# connection to proceed. This allows access to the broker to be controlled	# outside of the mechanisms provided by MQTT.	#require_certificate false		# If require_certificate is true, you may set use_identity_as_username to true	# to use the CN value from the client certificate as a username. If this is	# true, the password_file option will not be used for this listener.	#use_identity_as_username false		# If you have require_certificate set to true, you can create a certificate	# revocation list file to revoke access to particular client certificates. If	# you have done this, use crlfile to point to the PEM encoded revocation file.	#crlfile		# If you wish to control which encryption ciphers are used, use the ciphers	# option. The list of available ciphers can be optained using the "openssl	# ciphers" command and should be provided in the same format as the output of	# that command.	# If unset defaults to DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH	#ciphers DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH		# -----------------------------------------------------------------	# Pre-shared-key based SSL/TLS support	# -----------------------------------------------------------------	# The following options can be used to enable PSK based SSL/TLS support for	# this listener. Note that the recommended port for MQTT over TLS is 8883, but	# this must be set manually.	#	# See also the mosquitto-tls man page and the "Certificate based SSL/TLS	# support" section. Only one of certificate or PSK encryption support can be	# enabled for any listener.		# The psk_hint option enables pre-shared-key support for this listener and also	# acts as an identifier for this listener. The hint is sent to clients and may	# be used locally to aid authentication. The hint is a free form string that	# doesn't have much meaning in itself, so feel free to be creative.	# If this option is provided, see psk_file to define the pre-shared keys to be	# used or create a security plugin to handle them.	#psk_hint		# Set use_identity_as_username to have the psk identity sent by the client used	# as its username. Authentication will be carried out using the PSK rather than	# the MQTT username/password and so password_file will not be used for this	# listener.	#use_identity_as_username false		# When using PSK, the encryption ciphers used will be chosen from the list of	# available PSK ciphers. If you want to control which ciphers are available,	# use the "ciphers" option.  The list of available ciphers can be optained	# using the "openssl ciphers" command and should be provided in the same format	# as the output of that command.	#ciphers		# =================================================================	# Extra listeners	# =================================================================		# Listen on a port/ip address combination. By using this variable 	# multiple times, mosquitto can listen on more than one port. If 	# this variable is used and neither bind_address nor port given, 	# then the default listener will not be started.	# The port number to listen on must be given. Optionally, an ip 	# address or host name may be supplied as a second argument. In 	# this case, mosquitto will attempt to bind the listener to that 	# address and so restrict access to the associated network and 	# interface. By default, mosquitto will listen on all interfaces.	# Note that for a websockets listener it is not possible to bind to a host	# name.	# listener port-number [ip address/host name]	#listener		# The maximum number of client connections to allow. This is 	# a per listener setting.	# Default is -1, which means unlimited connections.	# Note that other process limits mean that unlimited connections 	# are not really possible. Typically the default maximum number of 	# connections possible is around 1024.	#max_connections -1		# The listener can be restricted to operating within a topic hierarchy using	# the mount_point option. This is achieved be prefixing the mount_point string	# to all topics for any clients connected to this listener. This prefixing only	# happens internally to the broker; the client will not see the prefix.	#mount_point		# Choose the protocol to use when listening.	# This can be either mqtt or websockets.	# Certificate based TLS may be used with websockets, except that only the	# cafile, certfile, keyfile and ciphers options are supported.	#protocol mqtt		# When a listener is using the websockets protocol, it is possible to serve	# http data as well. Set http_dir to a directory which contains the files you	# wish to serve. If this option is not specified, then no normal http	# connections will be possible.	#http_dir		# Set use_username_as_clientid to true to replace the clientid that a client	# connected with with its username. This allows authentication to be tied to	# the clientid, which means that it is possible to prevent one client	# disconnecting another by using the same clientid.	# If a client connects with no username it will be disconnected as not	# authorised when this option is set to true.	# Do not use in conjunction with clientid_prefixes.	# See also use_identity_as_username.	#use_username_as_clientid		# -----------------------------------------------------------------	# Certificate based SSL/TLS support	# -----------------------------------------------------------------	# The following options can be used to enable certificate based SSL/TLS support	# for this listener. Note that the recommended port for MQTT over TLS is 8883,	# but this must be set manually.	#	# See also the mosquitto-tls man page and the "Pre-shared-key based SSL/TLS	# support" section. Only one of certificate or PSK encryption support can be	# enabled for any listener.		# At least one of cafile or capath must be defined to enable certificate based	# TLS encryption. They both define methods of accessing the PEM encoded	# Certificate Authority certificates that have signed your server certificate	# and that you wish to trust.	# cafile defines the path to a file containing the CA certificates.	# capath defines a directory that will be searched for files	# containing the CA certificates. For capath to work correctly, the	# certificate files must have ".crt" as the file ending and you must run	# "c_rehash &lt;path to capath&gt;" each time you add/remove a certificate.	#cafile	#capath		# Path to the PEM encoded server certificate.	#certfile		# Path to the PEM encoded keyfile.	#keyfile		# By default an TLS enabled listener will operate in a similar fashion to a	# https enabled web server, in that the server has a certificate signed by a CA	# and the client will verify that it is a trusted certificate. The overall aim	# is encryption of the network traffic. By setting require_certificate to true,	# the client must provide a valid certificate in order for the network	# connection to proceed. This allows access to the broker to be controlled	# outside of the mechanisms provided by MQTT.	#require_certificate false		# If require_certificate is true, you may set use_identity_as_username to true	# to use the CN value from the client certificate as a username. If this is	# true, the password_file option will not be used for this listener.	#use_identity_as_username false		# If you have require_certificate set to true, you can create a certificate	# revocation list file to revoke access to particular client certificates. If	# you have done this, use crlfile to point to the PEM encoded revocation file.	#crlfile		# If you wish to control which encryption ciphers are used, use the ciphers	# option. The list of available ciphers can be optained using the "openssl	# ciphers" command and should be provided in the same format as the output of	# that command.	#ciphers		# -----------------------------------------------------------------	# Pre-shared-key based SSL/TLS support	# -----------------------------------------------------------------	# The following options can be used to enable PSK based SSL/TLS support for	# this listener. Note that the recommended port for MQTT over TLS is 8883, but	# this must be set manually.	#	# See also the mosquitto-tls man page and the "Certificate based SSL/TLS	# support" section. Only one of certificate or PSK encryption support can be	# enabled for any listener.		# The psk_hint option enables pre-shared-key support for this listener and also	# acts as an identifier for this listener. The hint is sent to clients and may	# be used locally to aid authentication. The hint is a free form string that	# doesn't have much meaning in itself, so feel free to be creative.	# If this option is provided, see psk_file to define the pre-shared keys to be	# used or create a security plugin to handle them.	#psk_hint		# Set use_identity_as_username to have the psk identity sent by the client used	# as its username. Authentication will be carried out using the PSK rather than	# the MQTT username/password and so password_file will not be used for this	# listener.	#use_identity_as_username false		# When using PSK, the encryption ciphers used will be chosen from the list of	# available PSK ciphers. If you want to control which ciphers are available,	# use the "ciphers" option.  The list of available ciphers can be optained	# using the "openssl ciphers" command and should be provided in the same format	# as the output of that command.	#ciphers		# =================================================================	# Persistence	# =================================================================		# If persistence is enabled, save the in-memory database to disk 	# every autosave_interval seconds. If set to 0, the persistence 	# database will only be written when mosquitto exits. See also	# autosave_on_changes.	# Note that writing of the persistence database can be forced by 	# sending mosquitto a SIGUSR1 signal.	#autosave_interval 1800		# If true, mosquitto will count the number of subscription changes, retained	# messages received and queued messages and if the total exceeds	# autosave_interval then the in-memory database will be saved to disk.	# If false, mosquitto will save the in-memory database to disk by treating	# autosave_interval as a time in seconds.	#autosave_on_changes false		# Save persistent message data to disk (true/false).	# This saves information about all messages, including 	# subscriptions, currently in-flight messages and retained 	# messages.	# retained_persistence is a synonym for this option.	#persistence false		# The filename to use for the persistent database, not including 	# the path.	#persistence_file mosquitto.db		# Location for persistent database. Must include trailing /	# Default is an empty string (current directory).	# Set to e.g. /var/lib/mosquitto/ if running as a proper service on Linux or	# similar.	#persistence_location		# =================================================================	# Logging	# =================================================================		# Places to log to. Use multiple log_dest lines for multiple 	# logging destinations.	# Possible destinations are: stdout stderr syslog topic file	#	# stdout and stderr log to the console on the named output.	#	# syslog uses the userspace syslog facility which usually ends up 	# in /var/log/messages or similar.	#	# topic logs to the broker topic '$SYS/broker/log/&lt;severity&gt;', 	# where severity is one of D, E, W, N, I, M which are debug, error, 	# warning, notice, information and message. Message type severity is used by	# the subscribe/unsubscribe log_types and publishes log messages to	# $SYS/broker/log/M/susbcribe or $SYS/broker/log/M/unsubscribe.	#	# The file destination requires an additional parameter which is the file to be	# logged to, e.g. "log_dest file /var/log/mosquitto.log". The file will be	# closed and reopened when the broker receives a HUP signal. Only a single file	# destination may be configured.	#	# Note that if the broker is running as a Windows service it will default to	# "log_dest none" and neither stdout nor stderr logging is available.	# Use "log_dest none" if you wish to disable logging.	#log_dest stderr		# If using syslog logging (not on Windows), messages will be logged to the	# "daemon" facility by default. Use the log_facility option to choose which of	# local0 to local7 to log to instead. The option value should be an integer	# value, e.g. "log_facility 5" to use local5.	#log_facility		# Types of messages to log. Use multiple log_type lines for logging	# multiple types of messages.	# Possible types are: debug, error, warning, notice, information, 	# none, subscribe, unsubscribe, websockets, all.	# Note that debug type messages are for decoding the incoming/outgoing	# network packets. They are not logged in "topics".	#log_type error	#log_type warning	#log_type notice	#log_type information		# Change the websockets logging level. This is a global option, it is not	# possible to set per listener. This is an integer that is interpreted by	# libwebsockets as a bit mask for its lws_log_levels enum. See the	# libwebsockets documentation for more details. "log_type websockets" must also	# be enabled.	#websockets_log_level 0		# If set to true, client connection and disconnection messages will be included	# in the log.	#connection_messages true		# If set to true, add a timestamp value to each log message.	#log_timestamp true		# =================================================================	# Security	# =================================================================		# If set, only clients that have a matching prefix on their 	# clientid will be allowed to connect to the broker. By default, 	# all clients may connect.	# For example, setting "secure-" here would mean a client "secure-	# client" could connect but another with clientid "mqtt" couldn't.	#clientid_prefixes		# Boolean value that determines whether clients that connect 	# without providing a username are allowed to connect. If set to 	# false then a password file should be created (see the 	# password_file option) to control authenticated client access. 	# Defaults to true.	allow_anonymous true		# In addition to the clientid_prefixes, allow_anonymous and TLS 	# authentication options, username based authentication is also 	# possible. The default support is described in "Default 	# authentication and topic access control" below. The auth_plugin 	# allows another authentication method to be used.	# Specify the path to the loadable plugin and see the 	# "Authentication and topic access plugin options" section below.	#auth_plugin</code></pre>	</div>	</div>	</p>	"
44588005,76166060,44588005,3,0,Fri Jun 16 12:26:00 EDT 2017,7114715,"Done ! Yes mosquitto is running as a service and I restarted it after editing the file. Weird tho !"
44588005,76166770,44588005,3,0,Fri Jun 16 12:44:00 EDT 2017,504554,"Are you confident that the service is actually using that file, as the edit you have made will not change anything as that option defaults to true. Are there any other copies of that file on the system? If not I suggest you stop the service and run the broker manually from the command line so you can see the log output."
44588005,76167138,44588005,3,0,Fri Jun 16 12:53:00 EDT 2017,7114715,"True, I made that edit because it wasnt working at the beginning, I could bemy problem. I tried also running the broker from the command prompt, and I still got the same issue."
44588005,76164091,44588005,3,1,Fri Jun 16 11:35:00 EDT 2017,504554,"It would probably help if you showed your current mossquito.conf file so we can see what you currently have configured"
44588005,76164584,44588005,3,0,Fri Jun 16 11:49:00 EDT 2017,7114715,"I only removed the comments on this line in the configuration file, otherwise, it is all commented out:                                                          	------->allow_anonymous true"
44588005,76164737,44588005,3,1,Fri Jun 16 11:52:00 EDT 2017,504554,"Edit the question and include the whole config file so we can actually see what's there. Also is mosquitto running as a service, did you restart the service after editing the file."
