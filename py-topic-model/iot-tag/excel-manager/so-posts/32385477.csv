thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
32385477,32385477,null,1,0,Thu Sep 03 21:10:00 EDT 2015,5280153,"<p>I am working on a simple android app to do Internet-of-Things functions using the WunderBar Relayr toolkit to have sensors send data back to the android app so as to display the data. I am trying to emulate the sample temperature display app as shown in the wunderbar relayr website as well as the relayr GitHub repository so as to understand how the sensor and app communicate.</p>		<p>I am able to activate the master module as well as the humidity/temperature sensor, but even though the sensors work fine, the readings in the app is shown to be constant for example: 22*C. My app does not seem to be collecting the data</p>		<p>I can log in using my credentials, but then instead of my name being displayed, it displays another name.How can I resolve this issue?	The code is shown below.</p>		<p>ThermometerDemoActivity.java:</p>		<pre><code>package com.vasansdomain.pavan.thermometer;		//import the Android classes we will need	import android.support.v7.app.ActionBarActivity;	import android.os.Bundle;	import android.view.Menu;	import android.view.MenuItem;	import android.view.View;	import android.widget.TextView;	import android.widget.Toast;		import java.util.ArrayList;	import java.util.List;		//import the relayr SDK	import io.relayr.RelayrSdk;		import io.relayr.model.DeviceModel;	import io.relayr.model.Reading;	import io.relayr.model.Transmitter;	import io.relayr.model.TransmitterDevice;	import io.relayr.model.User;	import rx.Observable;	import rx.Observer;	import rx.Subscriber;	import rx.Subscription;	import rx.android.schedulers.AndroidSchedulers;	import rx.functions.Func1;	import rx.schedulers.Schedulers;	import rx.subscriptions.Subscriptions;		public class ThermometerDemoActivity extends ActionBarActivity	{	    private TextView mWelcomeTextView;	    private TextView mTemperatureValueTextView;	    private TextView mTemperatureNameTextView;	    private TransmitterDevice mDevice;	    private Subscription mUserInfoSubscription = Subscriptions.empty();	    private Subscription mTemperatureDeviceSubscription =     Subscriptions.empty();		    /**	     * Once the Activity has been started, the onCreate method will be   called	     * @param savedInstanceState	    */	    @Override	    protected void onCreate(Bundle savedInstanceState)	    {	        super.onCreate(savedInstanceState);	        View view = View.inflate(this, R.layout.activity_thermometer_demo, null);	        mWelcomeTextView = (TextView) view.findViewById(R.id.txt_welcome);	        mTemperatureValueTextView = (TextView)   view.findViewById(R.id.txt_temperature_value);	        mTemperatureNameTextView = (TextView) view.findViewById(R.id.txt_temperature_name);	        setContentView(view);		        //we use the relayr SDK to see if the user is logged in by caling the isUserLoggedIn function	        if (RelayrSdk.isUserLoggedIn())	        {	            updateUiForALoggedInUser();	        }	        else	        {	            updateUiForANonLoggedInUser();	            logIn();	        }	    }		    /**	     * When Android is ready to draw any menus it initiates the	     * "prepareOptionsMenu" event, this method is caled to handle that	     * event.	     * @param menu	     * @return	     */	    @Override	    public boolean onPrepareOptionsMenu(Menu menu)	    {		        //remove any previous items from the menu	        menu.clear();		        //Check to see if the user is logged in	        if (RelayrSdk.isUserLoggedIn())	        {		            //if the user is logged in, we ask Android to draw the menu	            //we defined earlier in the thermometer_demo_logged_in.xml	            //file	            getMenuInflater().inflate(R.menu.thermometer_demo_logged_in, menu);	        }	        else	        {		            //otherwise we return the	            //thermometer_demo_not_logged_in.xml file	            getMenuInflater().inflate(R.menu.thermometer_demo_not_logged_in, menu);	        }		        //we must return this, so that any other classes interested in	        //the prepare menu event can do something.	        return super.onPrepareOptionsMenu(menu);	    }		    /**	     * When a menu item is selected, we see which item was called and	     * decide what to do according to the item.	     */	    @Override	    public boolean onOptionsItemSelected(MenuItem item)	    {		        //if the user selected login	        if (item.getItemId() == R.id.action_log_in)	        {		            //we call the login method on the relayr SDK	            logIn();	            return true;	        }	        else if (item.getItemId() == R.id.action_log_out)	        {		            //otherwise we call the logout method defined later in this     class	            logOut();	            return true;	        }	        return super.onOptionsItemSelected(item);	    }		    /**	     * The LogIn method definition	     */	    private void logIn() {	                  RelayrSdk.logIn(this).observeOn(AndroidSchedulers.mainThread()).subscribe(new    Observer&lt;User&gt;() {	            @Override	            public void onCompleted() {	            }		            @Override	            public void onError(Throwable e) {	                Toast.makeText(ThermometerDemoActivity.this, R.string.unsuccessfully_logged_in, Toast.LENGTH_SHORT).show();	                updateUiForANonLoggedInUser();	            }		            @Override	            public void onNext(User user) {	                Toast.makeText(ThermometerDemoActivity.this, R.string.successfully_logged_in, Toast.LENGTH_SHORT).show();	                invalidateOptionsMenu();	                updateUiForALoggedInUser();	            }	        });	    }		    /**	     * Called when the user logs out	     */	    private void logOut()	    {	        unSubscribeToUpdates();		        //call the logOut method on the relayr SDK	        RelayrSdk.logOut();		        //call the invalidateOptionsMenu this is defined in the	        //Activity class and is used to reset the menu option	        invalidateOptionsMenu();		        //use the Toast library to display a message to the user	        Toast.makeText(this, R.string.successfully_logged_out, Toast.LENGTH_SHORT).show();	        updateUiForANonLoggedInUser();	    }		    private void updateUiForANonLoggedInUser()	    {	        mTemperatureValueTextView.setVisibility(View.GONE);	        mTemperatureNameTextView.setVisibility(View.GONE);	        mWelcomeTextView.setText(R.string.hello_relayr);	    }		    private void updateUiForALoggedInUser()	    {	        mTemperatureValueTextView.setVisibility(View.VISIBLE);	        mTemperatureNameTextView.setVisibility(View.VISIBLE);	        loadUserInfo();	    }		    private void loadUserInfo()	    {	        mUserInfoSubscription = RelayrSdk.getRelayrApi().getUserInfo().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Subscriber&lt;User&gt;() {	            @Override	            public void onCompleted() {	            }		            @Override	            public void onError(Throwable e) {	                Toast.makeText(ThermometerDemoActivity.this, R.string.something_went_wrong, Toast.LENGTH_SHORT).show();	                e.printStackTrace();	            }		            @Override	            public void onNext(User user) {	                String hello = String.format(getString(R.string.hello), user.getName());	                mWelcomeTextView.setText(hello);	                loadTemperatureDevice(user);	            }	        });	    }		    private void loadTemperatureDevice(User user)	    {	        mTemperatureDeviceSubscription = RelayrSdk.getRelayrApi().getTransmitters(user.id).flatMap(new Func1&lt;List&lt;Transmitter&gt;, Observable&lt;List&lt;TransmitterDevice&gt;&gt;&gt;() {	            @Override	            public Observable&lt;List&lt;TransmitterDevice&gt;&gt; call(List&lt;Transmitter&gt; transmitters) {		                // This is a naive implementation. Users may own many WunderBars or other	                // kinds of transmitter.	                if (transmitters.isEmpty())	                    return Observable.from(new    ArrayList&lt;List&lt;TransmitterDevice&gt;&gt;());	                return   RelayrSdk.getRelayrApi().getTransmitterDevices(transmitters.get(0).id);	            }	    }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Subscriber&lt;List&lt;TransmitterDevice&gt;&gt;() {	        @Override	        public void onCompleted() {	        }		        @Override	        public void onError(Throwable e) {	            Toast.makeText(ThermometerDemoActivity.this, R.string.something_went_wrong, Toast.LENGTH_SHORT).show();	            e.printStackTrace();	        }		        @Override	        public void onNext(List&lt;TransmitterDevice&gt; devices) {	            for (TransmitterDevice device : devices) {	                if (device.model.equals(DeviceModel.TEMPERATURE_HUMIDITY.getId())) {	                    subscribeForTemperatureUpdates(device);	                    return;	                }	            }	        }	    });	}		@Override	protected void onPause()	{	    super.onPause();	    unSubscribeToUpdates();	}		private void unSubscribeToUpdates()	{	    if (!mUserInfoSubscription.isUnsubscribed())	        mUserInfoSubscription.unsubscribe();	    if (!mTemperatureDeviceSubscription.isUnsubscribed())	        mTemperatureDeviceSubscription.unsubscribe();	    if (mDevice != null)	        RelayrSdk.getWebSocketClient().unSubscribe(mDevice.id);	}		@Override	protected void onResume()	{	    super.onResume();	    if (RelayrSdk.isUserLoggedIn())	    {	        updateUiForALoggedInUser();	    }	    else	    {	        updateUiForANonLoggedInUser();	    }	}		private void subscribeForTemperatureUpdates(TransmitterDevice device)	{	    mDevice = device;	    RelayrSdk.getWebSocketClient().subscribe(device).observeOn(AndroidSchedulers.mainThread()).subscribe(new Subscriber&lt;Reading&gt;() {	        @Override	        public void onCompleted() {	        }		        @Override	        public void onError(Throwable e) {	            Toast.makeText(ThermometerDemoActivity.this, R.string.something_went_wrong, Toast.LENGTH_SHORT).show();	            e.printStackTrace();	        }		        @Override	        public void onNext(Reading reading) {	            if (reading.meaning.equals("temperature"))	                mTemperatureValueTextView.setText(reading.value + "˚C");	        }	    });	}	</code></pre>		<p>}</p>		<p>ThermometerDemoApplication.java:</p>		<pre><code>package com.vasansdomain.pavan.thermometer;		import android.app.Application;	import io.relayr.demo.thermometer.RelayrSdkInitializer;		public class ThermometerDemoApplication extends Application	{	    @Override	    public void onCreate()	    {	        super.onCreate();	        RelayrSdkInitializer.initSdk(this);	    }	}	</code></pre>		<p>AndroidManifest.xml</p>		<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;	</code></pre>		<p></p>		<pre><code>&lt;uses-permission android:name="android.permission.INTERNET" /&gt;	&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;		&lt;application	    android:allowBackup="true"	    android:icon="@drawable/thermometer"	    android:label="@string/app_name"	    android:theme="@style/AppTheme"	    android:name=".ThermometerDemoApplication" &gt;	    &lt;activity	        android:name=".ThermometerDemoActivity"	        android:label="@string/app_name"	        android:screenOrientation="portrait"&gt;	        &lt;intent-filter&gt;	            &lt;action android:name="android.intent.action.MAIN" /&gt;	            &lt;category android:name="android.intent.category.LAUNCHER" /&gt;	        &lt;/intent-filter&gt;	    &lt;/activity&gt;	&lt;/application&gt;	</code></pre>		<p></p>		<p>activity_demo_thermometer.xml:</p>		<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"	xmlns:tools="http://schemas.android.com/tools"	android:layout_width="match_parent"	android:layout_height="match_parent"	android:orientation="vertical"	android:paddingLeft="@dimen/activity_horizontal_margin"	android:paddingRight="@dimen/activity_horizontal_margin"	android:paddingTop="@dimen/activity_vertical_margin"	android:paddingBottom="@dimen/activity_vertical_margin"	tools:context=".ThermometerDemoActivity"	android:background="#FFFFFF"	android:gravity="center"&gt;		&lt;TextView	    android:id="@+id/txt_welcome"	    android:text="@string/hello_relayr"	    android:layout_width="wrap_content"	    android:layout_height="wrap_content"	    android:textColor="#000000"	    android:textSize="20dp" /&gt;		&lt;TextView	    android:id="@+id/txt_temperature_value"	    android:layout_width="wrap_content"	    android:layout_height="wrap_content"	    android:textSize="60sp"	    android:paddingTop="25dp"	    android:paddingBottom="25dp"/&gt;		&lt;TextView	    android:id="@+id/txt_temperature_name"	    android:text="@string/title_temperature"	    android:layout_width="wrap_content"	    android:layout_height="wrap_content"	    android:textSize="30sp"	    android:layout_gravity="center"	    android:paddingBottom="25dp"/&gt;		&lt;/LinearLayout&gt;	</code></pre>		<p>strings.xml</p>		<pre><code>&lt;resources&gt;	&lt;string name="app_name"&gt;Thermometer&lt;/string&gt;	&lt;string name="action_settings"&gt;Settings&lt;/string&gt;	&lt;string name="hello_relayr"&gt;Hello Relayr!!!&lt;/string&gt;	&lt;string name="hello"&gt;Hello %s!&lt;/string&gt;	&lt;string name="action_log_in"&gt;Log in&lt;/string&gt;	&lt;string name="action_log_out"&gt;Log out&lt;/string&gt;	&lt;string name="successfully_logged_in"&gt;You were successfully logged in!&lt;/string&gt;	&lt;string name="successfully_logged_out"&gt;You were successfully logged out!&lt;/string&gt;	&lt;string name="unsuccessfully_logged_in"&gt;There was a problem in the log in.&lt;/string&gt;	&lt;string name="something_went_wrong"&gt;Oops! Something went wrong&lt;/string&gt;	&lt;string name="title_temperature"&gt;Temperature&lt;/string&gt;	&lt;/resources&gt;	</code></pre>		<p>This is the code for the mock mode of the app:debug->java->io->relayr->demo->thermometer</p>		<pre><code>package io.relayr.demo.thermometer;		import android.content.Context;	import io.relayr.RelayrSdk;	public abstract class RelayrSdkInitializer {	    public static void initSdk(Context context) {	        new RelayrSdk.Builder(context).inMockMode(true).build();	    }	}	</code></pre>		<p>This is the code for the release mode of the app:release->java->io->relayr->demo->thermometer</p>		<pre><code>package io.relayr.demo.thermometer;	import android.content.Context;	import io.relayr.RelayrSdk;	public class RelayrSdkInitializer {	    public static void initSdk(Context context) {	        new RelayrSdk.Builder(context).inMockMode(false).build();    }	}	</code></pre>		<p>Is the answer possibly related to tweaking the RelayrSdkInitializer class in the debug file of the app</p>	"
32385477,32403373,32385477,2,0,Fri Sep 04 17:15:00 EDT 2015,5301659,"<p>Build a release version of the app and try again. The debug version only provides mock data.	Because if you see another name (Hugo Domenech) than you are building the app in debug mode and that's why you see mocked data.</p>	"
32385477,52732264,32403373,3,0,Mon Sep 07 08:00:00 EDT 2015,5301659,"I wouldn't say it's much different.	You can take a look at this project (https://github.com/relayr/android-tell-me-when). 	It's a simple IFTTT app that uses Relayr Wunderbar and sensor data.		If you need any other help you can also ask on Relayr forum."
32385477,52684258,32403373,3,0,Sat Sep 05 00:02:00 EDT 2015,5280153,"Hey Bernard...thanks for the info. Also, can you tell me about building the released version? Even though I have made android apps which work on real devices, this is my first experience in creating an android-IoT product so I am not sure how I should go about it....Thanks"
