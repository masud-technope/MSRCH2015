thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
56057935,56057935,null,1,0,Thu May 09 11:01:00 EDT 2019,4065769,"<p>I'm trying to subscribe to a topic via my Android application. Even though it connects successfully subscription fails. As soon as I perform subscription call, IOT connectivity fails and gives an error log as stated below. Want to Know where have I done any wrong coding ?	All the resources of IOT policy is given due to testing purposes to find a clue.</p>		<pre><code>{	  "Version": "2012-10-17",	  "Statement": [	   {	      "Effect": "Allow",	      "Action": "iot:*",	      "Resource": "*"	   }	 ]	}	</code></pre>		<p>I referred AWS-amplify for my development.	<a href="https://aws-amplify.github.io/docs/android/pubsub" rel="nofollow noreferrer">https://aws-amplify.github.io/docs/android/pubsub</a></p>		<p>1 .Connecting to IOT</p>		<pre><code>    private var mAWSMobileClient : AWSMobileClient = AWSMobileClient.getInstance()	    private lateinit var mIotDataManager: AWSIotMqttManager	    private lateinit var mAttachedPolicyReq: AttachPolicyRequest	    private lateinit var mAwsIOTClient: AWSIotClient	    private lateinit var mAwsCredentials: AWSCredentials		 private fun connectToIOT() {	        Thread(Runnable {	            var mDeviceIdentity = Settings.Secure.getString(this.contentResolver, Settings.Secure.ANDROID_ID)		            mIotDataManager = AWSIotMqttManager(mDeviceIdentity, &lt;iot endpoint&gt;)	            mIotDataManager.keepAlive = 50	            mIotDataManager.isAutoReconnect = false	            mIotDataManager.connectionStabilityTime = 100		            mAwsCredentials = mAWSMobileClient.awsCredentials	            mAwsIOTClient = AWSIotClient(mAWSMobileClient)	            mAwsIOTClient.setRegion(Region.getRegion(Regions.AP_SOUTHEAST_2))		            mAttachedPolicyReq = AttachPolicyRequest()	            mAttachedPolicyReq.policyName = "test_policy"	            mAttachedPolicyReq.target = mAWSMobileClient.identityId	            mAwsIOTClient.attachPolicy(mAttachedPolicyReq)		            try {	                mIotDataManager.connect(mAWSMobileClient, object : AWSIotMqttClientStatusCallback {	                    override fun onStatusChanged(	                        status: AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus?,	                        throwable: Throwable?	                    ) {	                        when (status) {	                            AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.ConnectionLost -&gt; {}		                            AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.Connected -&gt; {}		                            AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.Connecting -&gt; {}		                            AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.Reconnecting -&gt; {}		                        else -&gt; {		                        }	                    }	                }	            })	        } catch (e: Exception) {	            Log.d("IOT Data Manager Connection Errror : $e")	        }	    }).start()	}	</code></pre>		<ol start="2">	<li><p>Subscription Method</p>		<pre><code>fun subscribeToThing() {	        if(mConnected) {	            Thread(Runnable {	                mThingsName = "$mThingsName/shadow/get/accepted"	                var message: String? = null	                try {	                    mIotDataManager.subscribeToTopic(	                        mThingsName,	                        AWSIotMqttQos.QOS1,	                        object : AWSIotMqttNewMessageCallback {	                            override fun onMessageArrived(topic: String?, data: ByteArray?) {		                                try {	                                    message = String(data!!, Charsets.UTF_8)	                                } catch (e: UnsupportedEncodingException) {	                                    Log.d("Unsupported Encoding error :$e")	                                }	                            }	                        })	                } catch (e: Exception) {	                    Log.d("Subscription error :$e")	                }	        }).start()	    } else {	        Log.d("IOT Not Connected")	        }	}	</code></pre></li>	</ol>		<p>Result Log :</p>		<blockquote>	  <p>W/AWSIotMqttManager: connection is Lost</p>	  	  <p>Subscription error :com.amazonaws.AmazonClientException: Client error	  when subscribing.</p>	</blockquote>	"
