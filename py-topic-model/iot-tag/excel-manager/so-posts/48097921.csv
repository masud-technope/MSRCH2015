thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
48097921,48097921,null,1,0,Thu Jan 04 14:58:00 EST 2018,6224790,"<p>I'm currently working on an IoT project and I want to log the execution of my software and hardware.	I want to log them then send them to some DB in case I need to have a look at my device remotely.</p>		<p>The wip IoT device will have to be as minimal as possible so the act of having to write very often inside a flash memory module seems weird to me. 	I know that it will run the RTOS OS Nucleus on an Cortex-M4 with some modules connected through SPI.</p>		<p>Can someone with more expertise enlighten me ? </p>		<p>Thanks.</p>	"
48097921,83171056,48097921,3,1,Thu Jan 04 15:06:00 EST 2018,597607,"Is this for your personal use or are you going to provide it to others? Remotely logging their activity might not be appreciated."
48097921,83175221,48097921,3,0,Thu Jan 04 17:00:00 EST 2018,6224790,"@BoPersson It will not be sensitive informations, it will literally be debug/warning/log file from the program I will develop.		So the logging is not really about the activity. I can garantee there will ne be any problem with that. 		Hope it clarifies"
48097921,83577877,48097921,3,0,Wed Jan 17 08:34:00 EST 2018,584518,"This has nothing to do with C, IoT or RTOS. It is a question about data memories and would more suitable for https://electronics.stackexchange.com/."
48097921,48115920,48097921,2,0,Fri Jan 05 14:48:00 EST 2018,1819452,"<p>You will have to estimate your hourly/daily/whatever data volume that needs to go into the log and extrapolate to the expected lifetime of your product. Microcontroller flash usually isn't made for logging and thus it features neither enduring flash cells (some 10K-100K write cycles usually compared to 1M or more for dedicated data chips - look it up in the uC spec sheet) nor wear leveling. Wear leveling is any method which prevents software from writing to the same physical cell too frequently (which would e.g. be the directory for a simple file system).	For your log you will have to create a quite clever or complex method to circumvent any flash lifetime problems.	But the problems don't stop there: usually the MCU isn't able to read from Flash memory when writing to it where "writing" means a prolonged (several microseconds up to milliseconds depending on the chip) sequence of instructions controlling the internal Flash statemachine (programming voltage, saturation times, etc.) until the new values have reliably settled in the memory. And, maybe you guessed it, "reading" in this context also means reading instructions, that is you have to make sure that whichever code and interrupts that may occur during the Flash write are only executing code in RAM, cache or other memories and not in the normal instruction memory. It is doable but the more complex the SW system that you are running above the HW layer, the less likely it will work reliably.</p>	"
48097921,83276693,48115920,3,0,Mon Jan 08 11:20:00 EST 2018,6224790,"Thank you for your answer, it was very helpful !"
48097921,83277736,48115920,3,0,Mon Jan 08 11:54:00 EST 2018,1819452,"@Pazka Shameless plug: in case you need external programming services, give me a wink!"
