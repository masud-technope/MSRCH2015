thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37375922,37375922,null,1,1,Sun May 22 15:01:00 EDT 2016,4829317,"<p>Similar with Restful syntax in Jersey or other framework, I could fetch the variable in the Restful uri path like that:</p>		<pre><code>@Path("/users/{username}")	public class UserResource {		    @GET	    @Produces("text/xml")	    public String getUser(@PathParam("username") String userName) {	        ...	    }	}	</code></pre>		<p>but in californium, the syntax is different, I try these codes but it is not correct:</p>		<pre><code>class usersextends CoapResource {		    public users() {	        super("users/{username}");	    }		    @Override	    public void handleGET(CoapExchange exchange) {		        exchange.respond("The username is "+ ???????);	    }	}	</code></pre>		<p>How could I use the same function as first piece of code did? Another thing is where I can find official document introduce the API? I just saw the source code and try to find the solution now.</p>	"
37375922,62264864,37375922,3,0,Sun May 22 16:27:00 EDT 2016,504554,"If this is CoAP what does it have  to do with MQTT?"
37375922,62265229,37375922,3,0,Sun May 22 16:46:00 EDT 2016,4829317,"@hardillb I am implementing a data receiver on Android device (receive sensor data from lower level device). CoAP and MQTT could both satisfy the requirement, but I found it seems there is no existing MQTT broker project for android. I also want to ask solution from MQTT but forget to add it."
37375922,37585919,37375922,2,1,Thu Jun 02 07:59:00 EDT 2016,5929409,"<p>Create your own MessageDeliverer and change findResource method:</p>		<pre><code>public class MyMessageDeliverer implements MessageDeliverer {		  private final Resource root;		  public MyMessageDeliverer(Resource root) {	    this.root = root;	  }		  /* You can use  implementation of methods from ServerMessageDeliverer */	  @Override	  public void deliverRequest(Exchange exchange) {	  }		  @Override	  public void deliverResponse(Exchange exchange, Response response) {	  }		  /* method returns last known Resource instead of null*/	  private Resource findResource(List&lt;String&gt; list) {	    LinkedList&lt;String&gt; path = new LinkedList&lt;String&gt;(list);	    Resource current = root;	    Resource last = null;	    while (!path.isEmpty() &amp;&amp; current != null) {	      last = current;	      String name = path.removeFirst();	      current = current.getChild(name);	    }	    if (current == null) {	      return last;	    }	    return current;	  }	}	</code></pre>		<p>Use your MessageDeliverer:</p>		<pre><code>server = new CoapServer();	server.setMessageDeliverer(new MyMessageDeliverer(server.getRoot()));	</code></pre>		<p>Add your Resource to server:</p>		<pre><code>server.add(new Users());	</code></pre>		<p>Request /users/{username} will be delivered to your Users resource. Fetch the variable from request URI:</p>		<pre><code>public class Users extends CoapResource {		  public Users() {	    super("users");	  }		  public void handleGet(CoapExchange exchange) {	    List&lt;String&gt; uri = exchange.getRequestOptions().getUriPath();	    uri.remove("users");	    String username = uri.remove(0);		    //for query params:	    Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();	    for (String p : exchange.getRequestOptions().getUriQuery()) {	      String[] parts = p.split("=");	      params.put(parts[0], parts[1]);	    }	    String param = params.get("param");		  }		}	</code></pre>	"
