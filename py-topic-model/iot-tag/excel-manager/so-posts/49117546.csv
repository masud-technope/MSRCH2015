thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
49117546,49117546,null,1,0,Mon Mar 05 18:54:00 EST 2018,5696129,"<p>I'm currently using this as a learning example:</p>		<p><a href="https://os.mbed.com/teams/mqtt/code/MQTTPacket/file/aedcaf7984d5/samples/simple-publish.txt/" rel="nofollow noreferrer">https://os.mbed.com/teams/mqtt/code/MQTTPacket/file/aedcaf7984d5/samples/simple-publish.txt/</a></p>		<p>However, some of the code is specific to whatever embedded system the example is using.</p>		<p>What I got so far is:</p>		<pre><code>#include "hw_util.h"	#include "MQTTPacket.h"	#include &lt;string.h&gt;	#include &lt;sys/types.h&gt;	#include &lt;sys/socket.h&gt;	int main (void) {			    int i;	    float temperatura;	    unsigned char buffer[50];						    MQTTPacket_connectData data = MQTTPacket_connectData_initializer;	    int rc = 0;	    char buf[200];	    int buflen = sizeof(buf);	    MQTTString topicString = MQTTString_initializer;	    char* payload = "I'm Alive";	    int payloadlen = strlen(payload);	    int len = 0;	    data.clientID.cstring = "Testing";	    data.keepAliveInterval = 20;	    data.cleansession=1;	    data.MQTTVersion=3;	    len = MQTTSerialize_connect(buf,buflen,&amp;data);	    topicString.cstring="SampleTopic";	    len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, topicString, payload, payloadlen);		    printf("Hello world");	    rc = 0;	    while(1)	    {		        ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);								    }	}	</code></pre>		<p>I downloaded HiveMQ, which is a Broker and it's running:</p>		<p>2018-03-05 19:28:08,195 INFO  - Starting TCP listener on address 0.0.0.0 and port 1883</p>		<p>Now what I want to do, is send something like "Hello World" to this Broker or to Putty or something that would display the entire MQTT payload. How does C handle this? The documentation helped me understand what's going on but didnt really help me write C code, since I am still very new to it. </p>	"
49117546,49220601,49117546,2,0,Sun Mar 11 13:38:00 EDT 2018,5696129,"<p>This took a while but I figured it out. There are still plenty of kinks to work out, but at least it sends an MQTT(Wireshark approved) packet to localhost.</p>		<ol>	<li>Create an MQTT packet using this library: <a href="https://os.mbed.com/teams/mqtt/code/MQTTPacket/" rel="nofollow noreferrer">https://os.mbed.com/teams/mqtt/code/MQTTPacket/</a></li>	</ol>		<p>Using this code: </p>		<pre><code>MQTTPacket_connectData data = MQTTPacket_connectData_initializer;	char buf[200];		MQTTString topicString = MQTTString_initializer;	data.clientID.cstring = "TESTIRAM";	data.keepAliveInterval = 20;	data.cleansession=1;	data.MQTTVersion=3;	len = MQTTSerialize_connect(buf,buflen,&amp;data);	topicString.cstring="ka";	len += MQTTSerialize_publish(buf + len, buflen - len, 0, 0, 0, 0, 	topicString, payload, payloadlen);	</code></pre>		<ol start="2">	<li>Set up a socket:</li>	</ol>		<p>This code worked for me, but its LINUX SPECIFIC!</p>		<pre><code>#include "hw_util.h"	#include "MQTTPacket.h"	#include &lt;string.h&gt;	#include &lt;sys/types.h&gt;	#include &lt;sys/socket.h&gt;	#include &lt;netinet/in.h&gt;	#include &lt;arpa/inet.h&gt;	#include&lt;stdio.h&gt;	#include&lt;stdlib.h&gt;	#include&lt;unistd.h&gt;	char buf[200];	int mysock=0;	char *host = "127.0.0.1";	int port = 1883;	mysock = socket(AF_INET, SOCK_STREAM, 0);	</code></pre>		<p>AF_INET specifies IPv4 and SOCK_STREAM specifies TCP.</p>		<ol start="3">	<li>Connect to socket</li>	</ol>		<p>Use this: </p>		<pre><code>struct sockaddr_in cliaddr;		int rc = 0;	    //initialize the host address		    memset(&amp;cliaddr, 0, sizeof(cliaddr));	    //specify IPv4 protocol	    /*following includes are necessary for this:#include &lt;sys/types.h&gt;	    #include &lt;sys/socket.h&gt;	    #include &lt;netinet/in.h&gt;	    #include &lt;arpa/inet.h&gt;*/	    cliaddr.sin_family = AF_INET;	    //intialize the IP address of the host as "127.0.0.1"	    cliaddr.sin_addr.s_addr = inet_addr(host);	    //initialize the port, 1883	    cliaddr.sin_port = htons(port);	    //client has no bind	    //socket()&gt;connect()-&gt;send()&lt;-&gt;recv()-&gt;close	    int statusConn = connect(mysock,(const struct sockaddr*)&amp;cliaddr,sizeof(cliaddr));	    if(statusConn=0){	        printf("Success!");	    }	    if(statusConn=-1){	        printf("Connect unsuccessful!\n");	</code></pre>		<ol>	<li>Send over socket!</li>	</ol>		<p>This should work:</p>		<pre><code>while(1)	{	        printf("Sending to hostname %s port %d\n", host, port);	        //infinite loop, sending packets to the specified ASOCKET	        //after sending sleep for 10 seconds	        //sleep uses unistd.h		        printf("Sent packets: ");		        int countSend = send(mysock ,buf,buflen,0);		        printf("%d",countSend);		        printf("\n");	        sleep(10);	}	</code></pre>		<p>Some of the imports might be useless and some might be Linux specific. I'm moving onto AT commands so most of the issues in this code won't transfer to the new codebase. </p>	"
