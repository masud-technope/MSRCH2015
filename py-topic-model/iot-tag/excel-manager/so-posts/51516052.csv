thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
51516052,51516052,null,1,6,Wed Jul 25 09:58:00 EDT 2018,2894239,"<p>I have aws lambda function that generates IOT websocket URL as below.</p>		<pre><code>const v4 = require('aws-signature-v4');	const crypto = require('crypto');		const WSSURL = v4.createPresignedURL(	        'GET',	        process.env.IOT_ENDPOINT_HOST.toLowerCase(),	        '/mqtt',	        'iotdevicegateway',	        crypto.createHash('sha256').update('', 'utf8').digest('hex'),	        {	            'key': process.env.IOT_ACCESS_KEY,	            'secret': process.env.IOT_SECRET_KEY,	            'protocol': 'wss',	            'region': process.env.IOT_AWS_REGION,	        }	    );	</code></pre>		<p>and I have mqttjs at client side that use this url and try to connect web socket as following.</p>		<pre><code>var options = {	        will    : {	            topic  : LAST_WILL_TOPIC,	            payload: getMessageString(wss_userId, wss_email, wss_userType, {})	        },	        clientId: wss_userType + '||' + wss_userId	    };		    wssClient = mqtt.connect(WSSURL, options); 	</code></pre>		<p>This code was working perfect before few months but now connection doesn't initiate and gives following error </p>		<pre><code>failed: Error during WebSocket handshake: Unexpected response code: 403	</code></pre>	"
51516052,94971283,51516052,3,0,Mon Jan 07 05:56:00 EST 2019,2894239,"Form last few days error started again and reason for that was AWS has changed IOT endpoint URL. kindly double check that part also if this error is happening again."
51516052,53320582,51516052,2,3,Thu Nov 15 13:28:00 EST 2018,8592382,"<p>Our team have run into this issue recently too.</p>		<p>The problem in the <code>aws-signature-v4</code> module with version > 1.2.0.</p>		<p>Here is a <a href="https://github.com/department-stockholm/aws-signature-v4/blob/5ed9870fa71353eecce50d2882969396a81a4955/index.js#L161" rel="nofollow noreferrer">code</a>:</p>		<pre><code>`options.sessionToken = options.sessionToken || process.env.AWS_SESSION_TOKEN;` 	</code></pre>		<p>AWS lambda by default has a <code>AWS_SESSION_TOKEN</code> in <code>process.env</code></p>		<p>You should use STS to assume role and use sessionToken from it</p>		<pre><code>import v4 from 'aws-signature-v4' // ^1.3.0	import STS from 'aws-sdk/clients/sts'		const { IOT_ENDPOINT_HOST, IOT_ROLE_ARN } = process.env	const sts = new STS()		const createSocketUrl = async () =&gt; {	  const data = await sts	    .assumeRole({	      RoleArn: IOT_ROLE_ARN,	      RoleSessionName: `some-role-session-name`,	      DurationSeconds: 3600	    })	    .promise()		  return v4.createPresignedURL(	    'GET',	    IOT_ENDPOINT_HOST,	    '/mqtt',	    'iotdevicegateway',	    '',	    {	      key: data.Credentials.AccessKeyId,	      secret: data.Credentials.SecretAccessKey,	      sessionToken: data.Credentials.SessionToken,	      protocol: 'wss'	    }	  )	}	</code></pre>		<p>or if you don't want to use STS</p>		<pre><code>import v4 from 'aws-signature-v4' // ^1.3.0		const { IOT_ENDPOINT_HOST, IOT_ACCESS_KEY_ID, IOT_SECRET_ACCESS_KEY } = process.env		const createSocketUrl = () =&gt; {	  const { AWS_SESSION_TOKEN } = process.env		  delete process.env['AWS_SESSION_TOKEN']		  const url = v4.createPresignedURL(	    'GET',	    IOT_ENDPOINT_HOST,	    '/mqtt',	    'iotdevicegateway',	    '',	    {	      key: IOT_ACCESS_KEY_ID,	      secret: IOT_SECRET_ACCESS_KEY,	      protocol: 'wss'	    }	  )	  process.env['AWS_SESSION_TOKEN'] = AWS_SESSION_TOKEN		  return url	}	</code></pre>	"
51516052,93543953,53320582,3,0,Fri Nov 16 05:51:00 EST 2018,2894239,"Second method without STS works for me.."
