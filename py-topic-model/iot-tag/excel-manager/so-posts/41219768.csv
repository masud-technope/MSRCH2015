thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
41219768,41219768,null,1,0,Mon Dec 19 09:48:00 EST 2016,5674870,"<p>I'm quite new to Lua and Embedded programming. I'm working on a project: </p>		<p>IoT node that can be abstractedinto two parts: sensor and a board that runs Open WRT with Lua 5.1. I'm writing script that would be called from crontab every minute.</p>		<ol>	<li>In my script I'm accessing data from the sensor via package written with C. The result of reading data from sensor is 'hexadecimal numbers returned in string:</li>	</ol>		<hr>		<pre><code>4169999a4180cccd41c9851f424847ae4508e0003ddb22d141700000418e666641c87ae14248147b450800003dc8b439 	</code></pre>		<ol start="2">	<li>Then convert it (string) to values I need and POST it to API.</li>	</ol>		<p><strong>Problem:</strong> </p>		<p>Sometimes API is not reachable due to poor network connection.	So I need to implement system where I would read a data from a sensor and then if API is not responding, I would save it to a FIFO queue (buffer). And then next time when script is called to read it would be sending 'old' records first and the newest one and the end.</p>	"
41219768,41219980,41219768,2,0,Mon Dec 19 10:00:00 EST 2016,6834680,"<pre><code>local queue_filespec = [[/path/to/your/queue/file]]	-- Initially your "queue file" (regular file!) must contain single line:	-- return {}		local function operation_with_queue(func)	  local queue = dofile(queue_filespec)	  local result = func(queue)	  for k, v in ipairs(queue) do	    queue[k] = ("%q,\n"):format(v)	  end	  table.insert(queue, "}\n")	  queue[0] = "return {\n"	  queue = table.concat(queue, "", 0)	  local f = assert(io.open(queue_filespec, "w"))	  f:write(queue)	  f:close()	  return result	end		function add_to_queue(some_data)	  operation_with_queue(	    function(queue)	      table.insert(queue, some_data)	    end	  )	end		function extract_from_queue()	  -- returns nil if queue is empty	  return operation_with_queue(	    function(queue)	      return table.remove(queue, 1)	    end	  )	end	</code></pre>		<p>Usage example:</p>		<pre><code>add_to_queue(42)	add_to_queue("Hello")	print(extract_from_queue()) --&gt; 42	print(extract_from_queue()) --&gt; Hello	print(extract_from_queue()) --&gt; nil	</code></pre>	"
41219768,69666777,41219980,3,0,Tue Dec 20 01:33:00 EST 2016,5674870,"Thanks for answer, but I don't think this would work out for me. I need to keep those records somewhere in file, because my script is called periodically (every minute) and as far as I concerned each time that script runs from scratch (it declares and creates all the variables with default values)"
41219768,69677683,41219980,3,0,Tue Dec 20 09:37:00 EST 2016,5674870,"Thanks for  updating code. But I'm not sure what you mean by saying 'regular file', can I use binary file (buffer.bin)? I tried your script in interactive mode on my board and the very first call for a `add_to_queue(42)` gave me following error: `queue.lua:23: bad argument #1 to 'insert' (table expected, got nil)`"
41219768,69678865,41219980,3,0,Tue Dec 20 10:05:00 EST 2016,6834680,"You must create your file and manually write the line `return {}` to it before running the program.  "Regular file" means "not a special file (such as pipe, socket, device,...)".  This file will store only text data, but you can give it any name you like, including "buffer.bin"  :-)"
41219768,69858149,41219980,3,0,Mon Dec 26 06:36:00 EST 2016,5674870,"@ Egor Skriptunoff Thanks again, it works now."
