thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
53676929,53676929,null,1,0,Fri Dec 07 21:19:00 EST 2018,10641814,"<p>I'm honestly at a loss here. I'm trying to store an SSID and password that the user sends through a post request in the flash EEPROM section. To do that I convert the data sent from the post request to a char array and index it to EEPROM. The SSID runs without any problems, but the password always ends up with junk data before it even gets to EEPROM.	Here is the bit of code in question:</p>		<pre><code>// Recieve data from the HTTP server	void changeConfig(String parameter, String value){	  int memoffset = 0;	  if(parameter == "ssid")	    memoffset = 0;	  else if(parameter == "pass")	    memoffset = 32;	  else	    return;	  #ifdef DEBUG	  Serial.println("Updating Data");	  Serial.print("Param: ");	  Serial.println(parameter);	  Serial.print("Value: ");	  Serial.println(value);	  #endif	  EEPROM.begin(64);	  char _data[sizeof(value)];	  value.toCharArray(_data, sizeof(value));	  for(int i = memoffset; i &lt; memoffset + sizeof(value); i++)	  {	    #ifdef DEBUG	      Serial.print("addr ");	      Serial.print(i);	      Serial.print(" data ");	      Serial.println(_data[i]);	      #endif 	      EEPROM.write(i,_data[i]);	  }	  EEPROM.end();	}	</code></pre>		<p>And the Serial monitor output:<br>	Post parameter: ssid, Value: NetworkName<br>	Updating Data<br>	Param: ssid<br>	Value: NetworkName<br>	addr 0 data N<br>	addr 1 data e<br>	addr 2 data t<br>	addr 3 data w<br>	addr 4 data o<br>	addr 5 data r<br>	addr 6 data k<br>	addr 7 data N<br>	addr 8 data a<br>	addr 9 data m<br>	addr 10 data e<br>	addr 11 data â?€<br>	Post parameter: pass, Value: Networkpass<br>	Updating Data<br>	Param: pass<br>	Value: Networkpass<br>	addr 32 data |<br>	addr 33 data (<br>	addr 34 data ï¿½<br>	addr 35 data ?<br>	addr 36 data L<br>	addr 37 data â?›<br>	addr 38 data ï¿½<br>	addr 39 data ?<br>	addr 40 data â??<br>	addr 41 data â?€<br>	addr 42 data â?€<br>	addr 43 data â?€<br></p>		<p>As you can see, when the name of the POST parameter is ssid, it works alright. With pass on the other hand, the char array is just filled with gibberish. Any insight would be helpful. I'm using platformio in the arduino environment. Generic ESP01 with 1M of flash.	Thanks in advance. </p>	"
53676929,94211963,53676929,3,1,Fri Dec 07 21:27:00 EST 2018,5245033,"I am not sure what memoffset there is supposed to do. When you print value, it is clear that it is written there without any offset. Also, I do not know what 'String' is, but I find it hard to believe that sizeof() is what you need."
53676929,94212836,53676929,3,0,Fri Dec 07 22:09:00 EST 2018,10641814,"memoffset is used because SSID occupies the first 32 bytes of EEPROM (0-31), while password the next 32 (32-63). String is a class, much like char array but it can be initialised without size, it is the type returned from the HTTP server callback when a POST request is received. Size of is used to "convert" the string to a char array since that is needed to write to EEPROM"
53676929,94213125,53676929,3,0,Fri Dec 07 22:25:00 EST 2018,5245033,"But you are reading your values with offsets as well! You i starts with offset, and you are accessing value at the offset. This can't be right."
53676929,94213269,53676929,3,0,Fri Dec 07 22:37:00 EST 2018,3133316,"@Daniel -- You should have printed `sizeof(value)` in your debugging output.  That may have given you more indication of what is wrong when you stated `char _data[sizeof(value)];`.  You would have seen that no matter what string data `value` contained, the `sizeof` wouldn't have changed."
53676929,53677466,53676929,2,-1,Fri Dec 07 22:17:00 EST 2018,2670348,"<p>You're using <code>sizeof()</code> incorrectly.</p>		<p><a href="https://en.cppreference.com/w/cpp/language/sizeof" rel="nofollow noreferrer"><code>sizeof()</code> tells you the size of the object, at compile time.</a> </p>		<p>Try this experiment - run this code:</p>		<pre><code>#include &lt;Arduino.h&gt;		void setup() {	  String x("");	  String y("abc");	  String z("abcdef");		  Serial.begin(115200);		  delay(1000);		  Serial.println(sizeof(x));	  Serial.println(sizeof(y));	  Serial.println(sizeof(z));	}		void loop() {	}	</code></pre>		<p>On my ESP8266 this outputs:</p>		<pre><code>12	12	12	</code></pre>		<p>That's because it takes 12 bytes using this development environment to represent a <code>String</code> object (it might be different on a different CPU and compiler). The <code>String</code> class dynamically allocates storage, so <code>sizeof</code> can tell you nothing about how long the string itself is, only the compile-time size of the object.</p>		<p>For the <code>String</code> class, you should use its <code>length()</code> method. Your lines:</p>		<pre><code>char _data[sizeof(value)];	value.toCharArray(_data, sizeof(value));	for(int i = memoffset; i &lt; memoffset + sizeof(value); i++)	</code></pre>		<p>should be written as</p>		<pre><code>char _data[value.length()];	value.toCharArray(_data, value.length());	for(int i = memoffset; i &lt; memoffset + value.length(); i++)	</code></pre>		<p>For more information see the <a href="https://www.arduino.cc/reference/en/language/variables/data-types/stringobject/" rel="nofollow noreferrer">documentation on the String class</a>.</p>		<p>You'll likely still have issues with string terminators. C and C++ terminate <code>char</code> array strings with the null character '\0', adding an extra byte to the length of the strings. So your code should more likely be:</p>		<pre><code>void changeConfig(String parameter, String value){	  int memoffset = 0;	  if(parameter == "ssid")	    memoffset = 0;	  else if(parameter == "pass")	    memoffset = 33;	  else	    return;	  #ifdef DEBUG	  Serial.println("Updating Data");	  Serial.print("Param: ");	  Serial.println(parameter);	  Serial.print("Value: ");	  Serial.println(value);	  #endif	  EEPROM.begin(66);	  char _data[value.length() + 1];	  value.toCharArray(_data, value.length() + 1);	  for(int i = memoffset; i &lt; memoffset + value.length() + 1; i++)	  {	    #ifdef DEBUG	      Serial.print("addr ");	      Serial.print(i);	      Serial.print(" data ");	      Serial.println(_data[i]);	      #endif 	      EEPROM.write(i,_data[i]);	  }	  EEPROM.end();	}	</code></pre>		<p>to allow the string terminators to work correctly for 32 character SSIDs and passwords. But the fundamental issue that's breaking your code is the incorrect use of <code>sizeof</code>.</p>	"
53676929,94213621,53677466,3,0,Fri Dec 07 22:59:00 EST 2018,10641814,"Thanks for the explanation!"
53676929,53677608,53676929,2,0,Fri Dec 07 22:33:00 EST 2018,5245033,"<p>You have two problems with your code.</p>		<p>First, you are using <code>sizeof</code> incorrectly. Sizeof returns the size of the <code>String</code> object, but you are trying to get the length of the contained string. Sizeof is not the right tool for that, instead you should use whatever API <code>String</code> offers to read the size of the string.</p>		<p>The next problem is your usage of offsets. The following code snippet is all wrong:</p>		<pre><code>char _data[sizeof(value)];	value.toCharArray(_data, sizeof(value));	for(int i = memoffset; i &lt; memoffset + sizeof(value); i++)	{	  ...	  EEPROM.write(i,_data[i]);	</code></pre>		<p>Your <code>i</code> starts with offset of 32, so you are trying to access element with index 32 in your <code>_data</code> array. But <code>_data</code> stores characters starting from the index 0, and since the length of array is actually 12 (sizeof of <code>String</code> is always 12) by accessing element with index 32 you are going beyond it's bounds, and obviously find garbage there (in C++ parlance, it is called undefined behavior).</p>		<p>Last, but not the least, C++ is an extremely complicated language, which can't be learned by 'trial and error'. Instead, you need to methodically study, preferably using one of the good C++ books. The list of those can be found here: <a href="https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list">The Definitive C++ Book Guide and List</a></p>	"
53676929,94213510,53677608,3,0,Fri Dec 07 22:53:00 EST 2018,10641814,"Thanks, coming from high level languages its confusing as to which function I should use sometimes. Also wow, I must have had a massive brainfart not to spot trying to read an out of i dex array. Thanks for your clear explanation!"
