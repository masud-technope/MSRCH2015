thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
53643381,53643381,null,1,0,Thu Dec 06 01:40:00 EST 2018,3181634,"<p>I am building an IOT project with MQTT protocol and javascript </p>		<p>It reads data from MQTT client and send the data to the broker, the api engine - dotted area in the image - built with javascript, has MQTT client within itself and listening to the broker. </p>		<p>In the local environment, I can run the broker fine and can communicate with it from the api engine, but in production, I have no clue how and where to install the broker and the api engine. </p>		<p>My guess is I install the broker on one of the MQTT broker cloud (i.e cloudmqtt.com) then deploy the api engine to Heroku or something and have the MQTT client in the api engine point to the MQTT broker cloud to listen to.  </p>		<p>Hope that someone could give me a tip of advice. 	( I am not allowed to embed an image yet, so here is a link) 	<a href="https://i.stack.imgur.com/j8pDq.png" rel="nofollow noreferrer">architecture</a></p>	"
53643381,94146001,53643381,3,0,Thu Dec 06 01:48:00 EST 2018,4661625,"I think it depends on what kinds of device your MQTT client is. Is it smartphone or embedded device?"
53643381,94146120,53643381,3,0,Thu Dec 06 01:58:00 EST 2018,3181634,"It's an embedded device and have sensors and actuators."
53643381,56867117,53643381,2,0,Wed Jul 03 09:35:00 EDT 2019,10898304,"<p>you can run Mosca mqtt broker in 2 different ways, 1. standalone mode or in 2. embedded in your javascript application, means when you deploy your nodejs API engine it runs along with the Mosca mqtt broker. In the latter case, you do not have to use cloudmqtt separately.</p>		<p>so once you keep publishing data from devices using mqtt-client to the Mosca broker you can subscribe from your mediation billing servers and from other apps. using the database you can leverage the monetization and control data while the mqtt pub-sub handles the IoT telemetry data according to the implemented QoS.</p>	"
53643381,53646214,53643381,2,0,Thu Dec 06 07:07:00 EST 2018,8000909,"<p>This is my advice on the architecture. </p>		<p>The manager application you are building should be always part of the broker. The manager should be a client to the Broker.  By this approach you will have more control over the devices. </p>		<ol>	<li>You should allow your broker to store data into a Database / Big Data Engine. or Your app should receive the data from the broker via an integrated method call and process it and store it at the back end.  </li>	<li>If you want to run your application and broker as two separate components, your app should read the data stored by Broker to DB and then process it. The write from your application to Broker should be via a REST call and not MQTT for greater control. </li>	<li>Your Mobile App / Web App should connect to your Application via HTTP/HTPS. In few cases, For dynamic data loading on Browser you can use MQTT, however for business cases, you may need to process the data before it goes to the User UI, we advice websocket push of processed data from your application server. </li>	</ol>		<p>Our advice to all our clients is to use MQTT only for the edge device to Broker communication and use REST for everything else.</p>		<p>Ranjith</p>		<p>Bevywise Networks</p>	"
53643381,94161065,53646214,3,0,Thu Dec 06 12:31:00 EST 2018,3181634,"Current data flow is : MQTT client -> MQTT broker -> API Engine (express, mongoose, socket) -> DB, then API Engine -> web/mobile app.   Are you saying the MQTT broker should be a part of the API Engine ?"
53643381,94181670,53646214,3,0,Fri Dec 07 00:33:00 EST 2018,8000909,"how is the MQTT broker --> API Engine communicates, I saw a MQTT Client inside your (express , mongoose , socket, MQTTClient) layer.   Both broker and API Engine should operate over a same data store.		Hope this is clear."
53643381,94215863,53646214,3,1,Sat Dec 08 02:34:00 EST 2018,3181634,"Got it Thank you !"
53643381,53646209,53643381,2,0,Thu Dec 06 07:07:00 EST 2018,1659476,"<p>I built a product with a very similar architecture using Heroku for my app, with a <a href="https://elements.heroku.com/addons/cloudmqtt" rel="nofollow noreferrer">CloudMQTT Heroku add-on</a>. </p>		<p>When you use CloudMQTT, you get an MQTT broker "as a service". So you don't "install" your MQTT broker anywhere. You simply equip your MQTT clients (in your IOT device/hub and in your API backend) with the appropriate access credentials to publish/subscribe to your CloudMQTT instance.  </p>	"
53643381,94160912,53646209,3,0,Thu Dec 06 12:27:00 EST 2018,3181634,"Thank you for your comment!"
