thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37529769,37529769,null,1,1,Mon May 30 15:58:00 EDT 2016,1460665,"<p>I have recently started in the domain of IoT. Though, during R&amp;D, I have seen lots of small examples over internet where people are lightning up LEDs connected to a Raspberry board, using internet and mobile app. But, that's just OK for small learning projects. I want to understand what software tools and hardware it takes to build a working IoT system on a large scale. Lets take 2 example projects :</p>		<ol>	<li>Smart Home - Controlling Home Devices over-the-internet through mobile app.</li>	<li>Smart Garbage - Dustbins across the city that send data to a central server, whether they are filled or empty.</li>	</ol>		<p>I want to get an idea, how will I get the things operational for above two sample projects, to a production level? What are the possible designs I can adopt?</p>		<p>If I had to work on Smart Home Project, the best I can think of is I put a <code>Raspberry</code> board in the house connected to internet, install a TCP/IP server like <code>apache</code>, code the backend in <code>PHP</code> to handle requests (in <code>JSON</code>) from mobile apps acting as clients , and execute the scripts (written in <code>bash</code>) locally on the board to control different peripherals connected to it, depending on the type of request.	e.g. controlFan.sh, controlLight.sh, controlGarageDoor.sh, etc.</p>		<p>And, if I had to work on the second project, I now put the Raspberry board on each dustbin connected to a central server. This time, I don't need a server on the dustbins. There will be a central TCP/IP server, at the city's Garbage Collection Department, which will expose APIs in the form of URLs like :</p>		<pre><code>www.xyz.com/uploadStats?key=passcode&amp;dustbinID=&lt;ID&gt;&amp;garbageAmount=&lt;percent&gt;	</code></pre>		<p>Simply hitting the url via a cron job will suffice the job.</p>		<p>I understand that my architecture is naive and might not suit the production level of quality. So I request if any of you have worked on such project, what architecture and softwares did you use? How were your clients and servers programmed to communicate?</p>	"
37529769,87282492,37529769,3,0,Wed May 02 10:24:00 EDT 2018,1714692,"Did you find any starting point such a detailed book regarding HW architecture, protocols etc.? I have read something but they are always too generic."
37529769,37530755,37529769,2,0,Mon May 30 17:09:00 EDT 2016,6401380,"<p>The question is generic. There are plenty solutions for each of your examples, with their limitations, expenses, and levels of complexity. I'll give my personal perspective on each of your examples:</p>		<ol>	<li><p>Smart house. I don't see any complications in terms of "production" scale. The architecture you've described will do the job. Of course you must consider the following:</p>		<ul>	<li>Security. Encrypt your access to Raspberry Pi with SSL or similar. Think about authentication, etc...</li>	<li>In terms of marketing product I'd go for "smart house server" rather than simple Raspberry Pi board. It will include your home router, CCTV control, lights, garage, etc... </li>	<li>I've done something similar before. Use DynDNS at your home server to make it available to the Internet. </li>	</ul></li>	<li><p>Smart Garbage. Designing the garbage bin by itself is a project. How it is powered? How does it know about it's status?	In terms of network solution, I'd go for M2M communication, with GPS based connection to a dedicated server (domain, of course). The server will gather and manage all the data from every and each garbage bin. </p>		<ul>	<li>You need an embedded device at each bin with controller + GSM module + sensors + power solution.</li>	<li>Connect them to a dedicated domain backed server. </li>	<li>Write some service that will accept clients (trash bins) and store their telemetry data in SQL database. The telemetry format can be JSON or whatever you want.</li>	</ul></li>	</ol>		<p>Hope it helps. </p>	"
