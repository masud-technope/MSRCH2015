thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
32475983,32475983,null,1,2,Wed Sep 09 09:33:00 EDT 2015,713208,"<p>i am trying to send a audio file(<code>wav</code>) from a <code>IoT</code> Device to <code>Eventhub</code>. As <code>Eventhub</code> has size restriction of 64Kb per message ,each message is chunked into a <code>7kb</code> byte array and sent to <code>Eventhub</code>. i am trying to achieve maximum send rate <em>[not crossing the threshold]</em> from client.</p>		<p>Recording a live audio , save it in file stream and chunk it for sending. i avoided this part with custom stream implementation</p>		<pre><code>public class CustomAudioStream : IRandomAccessStream{	    public IAsyncOperationWithProgress&lt;uint, uint&gt; WriteAsync(IBuffer buffer)	        {	            return AsyncInfo.Run&lt;uint, uint&gt;((token, progress) =&gt;	             {	                 return Task.Run(() =&gt;	                 {	                     using (var memoryStream = new MemoryStream())	                     {	                         using (var outputStream = memoryStream.AsOutputStream())	                         {	                             outputStream.WriteAsync(buffer).AsTask().Wait();		                             var byteArray = memoryStream.ToArray();		                             //bytes are ready to send from here 	                             ChunkedEventSender(this, byteArray);	#if DEBUG	                             Debug.WriteLine("Array Length:  " + byteArray.Length + "    MemoryStream length:" + memoryStream.Length);	#endif 	                             return (uint)memoryStream.Length;	                         }	                     }	                 });	             });	        }	   }	</code></pre>		<p>But i am not able to send the byte at same speed here with REST implementation. for Sending i am using a third party wrapper so i can't do at that side. </p>		<p>But i can span thread to make application responsive while interacting  so i use</p>		<pre><code> Task.Factory.StartNew(()=&gt;{ 	          BackgroundSender(byte[data]);	        });	</code></pre>		<p>i don't want to wait for Task to complete neither the outcome of Task.but when i do this most of the my request are getting "<code>Request Timed out</code>" and Application is getting stuck because of those request.</p>		<p>Is there anyway i can make application responsive without blocking the thread. </p>		<hr>		<p>Edit: Currently Applied <code>Parallel.Invoke</code> and not loosing a single message and application is also responsive but sending drop drastically to 2-3 message/Second</p>		<p>Should i switch to Multi Thread model rather than using Async. Found Simlar Question like this <a href="https://stackoverflow.com/questions/16194054/is-async-httpclient-from-net-4-5-a-bad-choice-for-intensive-load-applications?rq=1">Is async HttpClient from .Net 4.5 a bad choice for intensive load applications?</a></p>	"
32475983,52853817,32475983,3,0,Thu Sep 10 08:41:00 EDT 2015,57508,"`Parallel.Invoke` is multithreaded ... ??"
32475983,52853908,32475983,3,0,Thu Sep 10 08:43:00 EDT 2015,713208,"No its Not Like that,"
32475983,52854052,32475983,3,0,Thu Sep 10 08:47:00 EDT 2015,57508,"Please read [the documentation on `Parallel.Invoke`](https://msdn.microsoft.com/en-us/library/system.threading.tasks.parallel.invoke.aspx): *Executes each of the provided actions, possibly in parallel.*"
32475983,52854869,32475983,3,0,Thu Sep 10 09:06:00 EDT 2015,713208,"As i said it not exactly managed multithreaded environment.it will execute function on another thread in parllel if possible. i am looking for at least 10k request processing in less than a second , Which its not giving me."
32475983,52854972,32475983,3,0,Thu Sep 10 09:09:00 EDT 2015,57508,"*i am looking for at least 10k request processing in less than a second* 1) Why? 2) Sending? 3) Receiving? 4) Don't you think that outgoing ports will be a bottleneck (if turnaround timing is greater than a second...)? 5) Is there a way for bulk transactions?"
32475983,52855623,32475983,3,0,Thu Sep 10 09:25:00 EDT 2015,713208,"Why 10K , cause i am getting byte data at that burst. and i have to pass at same burst cause its media file if i want to reconstruct stream from bytes at other end. Yes Agree with you on bottleneck but the request duration is very short lived ~1-3 sec.so i won't be facing on client end . i hope that"
32475983,52856068,32475983,3,1,Thu Sep 10 09:35:00 EDT 2015,713208,"Hahah, May Be.... Actually i trying send to send microphone data on eventhub. When microphone is got activated i am not waiting for it write in a file,rather a custom implemented writeasync and sending byte as soon i am getting them."
32475983,52856117,32475983,3,1,Thu Sep 10 09:36:00 EDT 2015,713208,"only i was trying to avoid write time and again conversion to bytes. and yeah there 64K size restriction also on event hub"
32475983,52855772,32475983,3,0,Thu Sep 10 09:28:00 EDT 2015,57508,"So this is a perfect example for an [XY-Problem](http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem)! Reconstructing the stream on the other end also requires the same order of the chunks ... And this is something I doubt you will achieve! So instead of sending chunks, is there a chance to open a stream and continuously write to it? Anyway, I strongly believe that you should rephrase your question to better match the underlying problem!"
32475983,33552155,32475983,2,0,Thu Nov 05 18:30:00 EST 2015,1563723,"<p>You are being throttled by azure eventhub. Calculate your total ingress and egress and select the required number of throughput.  </p>		<p>Each throughput unit entitles the following capabilities: 1 MB/s Ingress, 2 MB/s egress, and up to 84 GB of event storage. Go to the scale tab in the service bus namespace and increase throughput unit as necessary.	<a href="https://i.stack.imgur.com/ljlLo.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ljlLo.png" alt="enter image description here"></a></p>	"
32475983,34163596,32475983,2,0,Tue Dec 08 18:44:00 EST 2015,4840671,"<p>"Request timed out" doesn't necessarily mean you are being throttled I guess. I'd look for the detail property and check the error code . If you see 50002 as the error code, then that means you are throttled and you might increase the TU as necessary. FYI, a single TU supports up to a 1000 events per second.</p>		<p>Hope this helps!</p>	"
