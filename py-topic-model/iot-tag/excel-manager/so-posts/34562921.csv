thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
34562921,34562921,null,1,7,Sat Jan 02 05:28:00 EST 2016,18735,"<p>The title says it all, I would like to get and set audio volume level for a Universal Windows (iot) application.  </p>		<p>It can be either the sound level associated with my particular application - which would be ideal; or it can be the system sound level - if necessary / possible.   </p>		<p>I am using visual studio 2015 </p>		<p>I've been searching for examples / samples but have come up dry.</p>		<p>Any help would be appreciated.</p>		<p>(of note this is not a duplicate question - I want to  get and set audio volume level for a Universal Windows application - this can not be done via a COM object in uwp - nor do uwp apps use VBScript or JScript)</p>	"
34562921,56879270,34562921,3,0,Sat Jan 02 15:52:00 EST 2016,95190,"@Rob-The answer you linked is correct."
34562921,56879288,34562921,3,0,Sat Jan 02 15:52:00 EST 2016,95190,"@Codexer - UWP apps don't use VBScript or JScript."
34562921,56876598,34562921,3,0,Sat Jan 02 13:40:00 EST 2016,18735,"it isn't possible to access arbitrary COM objects from a Universal Windows app - ref: http://stackoverflow.com/questions/32042324/how-to-create-a-com-object-in-a-uwp-application-c"
34562921,56906967,34562921,3,0,Sun Jan 03 19:57:00 EST 2016,881188,"Usually (at least that is how I always find the solution) is in a C++ code that is not available in C#, like for instance the system fonts, system type (7'' or more), tomorrow I can take a look if there is something in that way"
34562921,34588404,34562921,2,0,Mon Jan 04 09:50:00 EST 2016,4788286,"<p>Look at the source code of this: <a href="https://github.com/File-New-Project/EarTrumpet" rel="nofollow">https://github.com/File-New-Project/EarTrumpet</a> </p>		<p>It'll contain what you're looking for.</p>	"
34562921,57082720,34588404,3,1,Fri Jan 08 02:18:00 EST 2016,18735,"I tried delving deep into this but couldn't come up with the needed code - when I got down deep I found code that matches what naudio does; but I can't get naudio to work on the windows iot platform either - doesn't want to enumerate the sound devices.  <rant> I can't believe something so simple as changing the audio volume is so hard to work out. </rant>"
34562921,38552930,34562921,2,0,Sun Jul 24 14:10:00 EDT 2016,6190907,"<p>You can control the audio volume for your own application with the MediaPlayer Volume property.  It doesn't control the overall system volume but it does allow you to set your own applications volume.</p>		<p><a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.media.playback.mediaplayer.volume.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/apps/windows.media.playback.mediaplayer.volume.aspx</a></p>		<p>For example, I have a view model where I expose the following property and to which I have a slider control's value property bound.  (My slider's Min is 0 and its Max is 100 which is why I'm converting the 0-1 value of the MediaPlayer's volume property to the range of 0-100.)  </p>		<p>(NOTE: I also have a "BackgroundAudioService" singleton to wrap the reference to the background audio MediaPlayer like the UWP sample background audio project on github demonstrates, but its just a reference to the MediaPlayer.)</p>		<pre><code>    public double Volume	    {	        get	        {   	            this.volume = (BackgroundAudioService.Instance.CurrentPlayer.Volume * 100);	            return this.volume;	        }		        set	        {	            this.volume = value;	            BackgroundAudioService.Instance.CurrentPlayer.Volume = (this.volume / 100);	            this.RaisePropertyChanged();	        }	    }	</code></pre>		<p>If this doesn't work maybe try checking and setting the system's volume because this method only controls your app's volume.</p>	"
34562921,38810256,34562921,2,0,Sun Aug 07 02:05:00 EDT 2016,2410379,"<p>I was looking for the same thing and I found what I was looking for. So, I felt obligated to post (and share) my findings here.</p>		<p>In order to control the entire system volume, you can do so using the <a href="https://msdn.microsoft.com/en-us/windows/uwp/style/sound?f=255&amp;MSPPError=-2147217396" rel="nofollow"><code>Sound Global API</code></a>.</p>		<pre><code>ElementSoundPlayer.Volume = 0.5f;	</code></pre>		<blockquote>	  <p>All sounds within the app can be dimmed with the Volume control. However, sounds within the app cannot get louder than the system volume.</p>	</blockquote>	"
34562921,46015057,34562921,2,0,Sat Sep 02 14:57:00 EDT 2017,3108054,"<p>Actually it is documented.</p>		<p>You can get or set the volume of an audio device the same way that we used to do in desktop apps using <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd370892(v=vs.85).aspx" rel="nofollow noreferrer">IAudioEndpointVolume</a>, the documentation states that it is supported in Windows Store Apps.   </p>		<p>In order to activate this interface for a specific device in a UWP app, you need to use the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/jj128298(v=vs.85).aspx" rel="nofollow noreferrer">ActivateAudioInterfaceAsync</a> function. There are <a href="https://github.com/Microsoft/Windows-universal-samples/blob/6370138b150ca8a34ff86de376ab6408c5587f5d/Samples/WindowsAudioSession/cpp/WASAPIRenderer.cpp" rel="nofollow noreferrer">UWP sample codes</a> showing how to use this function to activate the <code>IAudioClient</code> interface. You can do the same thing but for the <code>IAudioEndpointVolume</code> interface.</p>		<p>Finally, for now, this API is only available in C++. if you want to do it from a C# or VB UWP App, you can create a RuntimeComponent in C++CX that will provide this feature to your app.</p>	"
34562921,49385590,34562921,2,0,Tue Mar 20 13:30:00 EDT 2018,414994,"<p>There's no need to make a WinRT component. Instead you can use P/Invoke to access the win32 audio interfaces. </p>		<p>Take a look at <a href="https://gist.github.com/wbokkers/74e05ccc1ee2371ec55c4a7daf551a26" rel="nofollow noreferrer">my code (Gist)</a> for how to do this in C#.</p>	"
