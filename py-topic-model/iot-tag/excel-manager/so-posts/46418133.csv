thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
46418133,46418133,null,1,1,Tue Sep 26 05:01:00 EDT 2017,902280,"<p>I've walked through the IoT tutorial in the AWS console for setting up a Linux/Java device, which downloads a zip file, and ultimately uses the code here: <a href="https://github.com/aws/aws-iot-device-sdk-java" rel="nofollow noreferrer">https://github.com/aws/aws-iot-device-sdk-java</a>. When I run the start.sh script from the zip, I see an UnknownHostException, and the script fails.</p>		<pre><code>Cert file:../java-thing.cert.pem Private key: ../java-thing.private.key	Sep 21, 2017 10:23:11 PM com.amazonaws.services.iot.client.mqtt.AwsIotMqttConnectionListener onFailure	WARNING: Connect request failure	MqttException (0) - java.net.UnknownHostException: a2vnfud9kry2r9.iot.us-east-1.amazonaws.com	        at org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java:38)	        at org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG.run(ClientComms.java:664)	        at java.lang.Thread.run(Thread.java:748)	Caused by: java.net.UnknownHostException: a2vnfud9kry2r9.iot.us-east-1.amazonaws.com	        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)	        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)	        at java.net.Socket.connect(Socket.java:589)	        at sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:668)	        at org.eclipse.paho.client.mqttv3.internal.TCPNetworkModule.start(TCPNetworkModule.java:70)	        at org.eclipse.paho.client.mqttv3.internal.SSLNetworkModule.start(SSLNetworkModule.java:86)	        at org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG.run(ClientComms.java:650)	        ... 1 more	</code></pre>		<p>Diagnosing the connectivity, as suggested in the official docs, has no issue; it connects just fine:</p>		<pre><code>openssl s_client -connect a2vnfud9kry2r9.iot.us-east-1.amazonaws.com:8443 -CAfile root-CA.crt -cert java-thing.cert.pem -key java-thing.private.key	</code></pre>		<p>What's also odd is that pinging the client endpoint works, but other tools like telnet fail to resolve the hostname. </p>		<p>What am I doing wrong?</p>	"
46418133,79793699,46418133,3,0,Tue Sep 26 05:01:00 EDT 2017,902280,"Could this be an issue with IPv6 on Linux? I've tried the same tutorial on OSX and it works fine."
46418133,46698636,46418133,2,0,Wed Oct 11 22:41:00 EDT 2017,902280,"<p>I figured out how to work around this: set <code>-Djava.net.preferIPv4Stack=true</code>. </p>		<p>The IoT endpoints in AWS support both IPv6 and IPv4, and, out of the box, Java will prefer IPv6. From the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/ipv6_guide/index.html" rel="nofollow noreferrer">docs</a>:</p>		<blockquote>	  <p>The Java networking stack first checks whether IPv6 is supported on	  the underlying OS. If IPv6 is supported, it tries to use the IPv6	  stack. More specifically, on dual-stack systems, it creates an IPv6	  socket.</p>	</blockquote>		<p>Seems like perhaps something in my Ubuntu network config is not set up right for IPv6 to work properly. If anyone can shed some light on why, that would be awesome.</p>		<p>My issue is probably linked to <a href="https://stackoverflow.com/questions/10378471/how-to-support-both-ipv4-ipv6-on-java">this one</a>.</p>	"
