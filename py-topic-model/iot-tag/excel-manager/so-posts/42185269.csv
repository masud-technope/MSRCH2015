thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42185269,42185269,null,1,1,Sun Feb 12 07:37:00 EST 2017,7552587,"<p>Can anyone help me figure out how to piece these two pieces of code together so I get the result I need? My eyes are crossing from looking at this. I know this is a breeze for probably everyone other than myself, but I am not a programmer and this is just for one small personal project.</p>		<p>So far, after hours and hours of reading and watching any videos I could find relating to Arduino, Pubnub and sensors, I have sensor reading publishing to Pubnub. I created a Freeboard account for visualization and that's all working. The problem is, the data being published is wrong.</p>		<p>Basically, I'm wanting to read a battery voltage and publish it to PubNub. I can get the Arduino (Uno R3) to read the voltage and I can adjust the values in the code to match the actual voltage. The problem I run into is taking that bit of code that works and stuffing it into the JSON array that gets published to PubNub.</p>		<p>If anyone would be willing to help me and maybe explain a little (or not - I'm okay if I just get it working), I would SO appreciate the time, help and effort.</p>		<p>Thanks!</p>		<p>//Each sketch works indepently. I need to merge them to get the correct reading published.</p>		<p>//VoltagePubNub.ino	(This is the one that publishes, which is what I want. I just want the published value to be the value of the second sketch.)</p>		<hr>		<pre><code>    #include &lt;SPI.h&gt;	    #include &lt;Ethernet.h&gt;	    #include &lt;PubNub.h&gt;	    #include &lt;aJSON.h&gt;		    // Some Ethernet shields have a MAC address printed on a sticker on the shield;	    // fill in that address here, or choose your own at random:	    const static byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };		    // Memory saving tip: remove myI and dnsI from your sketch if you	    // are content to rely on DHCP autoconfiguration.	    IPAddress myI(192, 168, 2, 114);	    IPAddress dnsI(8, 8, 8, 8);			    const static char pubkey[] = "publish_key";	    const static char subkey[] = "subscribe_key";	    const static char channel[] = "channel_name";	    char uuid[] = "UUID";		    #define NUM_CHANNELS 1  // How many analog channels do you want to read?	    const static uint8_t analog_pins[] = {A0};    // which pins are you reading?		    void setup()	    {	      Serial.begin(9600);	      Serial.println("Serial set up");		      Ethernet.begin((byte*) mac, myI, dnsI);	      Serial.println("Ethernet set up"); 	        delay(1000);		      Serial.println("Ethernet set up");		      PubNub.begin(pubkey, subkey);	      Serial.println("PubNub set up");	            delay(5000);	    }		    void loop()	    {		      Ethernet.maintain();		      EthernetClient *client;		            // create JSON objects	            aJsonObject *msg, *analogReadings;	            msg = aJson.createObject();	            aJson.addItemToObject(msg, "analogReadings", analogReadings = aJson.createObject());		            // get latest sensor values then add to JSON message	            for (int i = 0; i &lt; NUM_CHANNELS; i++) {	              String analogChannel = String(analog_pins[i]);	              char charBuf[analogChannel.length()+1];	              analogChannel.toCharArray(charBuf, analogChannel.length()+1);	              int analogValues = analogRead(analog_pins[i]);	              aJson.addNumberToObject(analogReadings, charBuf, analogValues);	            }		            // convert JSON object into char array, then delete JSON object	            char *json_String = aJson.print(msg);	            aJson.deleteItem(msg);		            // publish JSON formatted char array to PubNub	      Serial.print("publishing a message: ");	      Serial.println(json_String);	            client = PubNub.publish(channel, json_String);	      if (!client) {	        Serial.println("publishing error");	      } else	            free(json_String);	      client-&gt;stop();		      delay(5000);	    }	</code></pre>		<p>//VoltageSensor.ino</p>		<p>(This is the one with the correct value, but no publish feature.)</p>		<hr>		<pre><code>    int analogInput = A0;	    float vout = 0.0;	    float vin = 0.0;	    float R1 = 31000.0; //  	    float R2 = 8700.0; // 	    int value = 0;	    int volt = 0;	    void setup(){	       pinMode(analogInput, INPUT);	       Serial.begin(9600);	       Serial.print("DC VOLTMETER");	       Serial.println("");	    }	    void loop(){	       // read the value at analog input	       value = analogRead(analogInput);	       vout = (value * 4.092) / 1024.0;	       vin = vout / (R2/(R1+R2)); 		    Serial.print("INPUT V= ");	    Serial.println(vin,2);	   delay(2000);	    }	</code></pre>	"
42185269,42191898,42185269,2,2,Sun Feb 12 19:02:00 EST 2017,7552587,"<p>It may not be the most glamorous or the proper way of doing it, but I got this to do what I need. I edited the first sketch with the following code:</p>		<hr>		<pre><code>    // create JSON objects	    aJsonObject *msg, *analogReadings;	    msg = aJson.createObject();	    aJson.addItemToObject(msg, "analogReadings", analogReadings = aJson.createObject());			    // get latest sensor values then add to JSON message	    for (int i = 0; i &lt; NUM_CHANNELS; i++) {	      float vout = 0.0;	      float vin = 0.0;	      float R1 = 33060.0; //  	      float R2 = 7600.0; // 	      int value = 0;	      int volt = 0;		      //Serial.print("INPUT V= ");	      //Serial.println(vin,2);		      String analogChannel = String(analog_pins[i]);		      value = analogRead(analog_pins[i]);	      vout = (value * 4.092) / 1024.0;	      vin = vout / (R2/(R1+R2));          		      char charBuf[analogChannel.length()+1];	      analogChannel.toCharArray(charBuf, analogChannel.length()+1);	      float theVoltage = (vin);	      int analogValues = analogRead(analog_pins[i]);	      aJson.addNumberToObject(analogReadings, charBuf, theVoltage);	    }		    // convert JSON object into char array, then delete JSON object	    char *json_String = aJson.print(msg);	    aJson.deleteItem(msg);	</code></pre>		<hr>		<p>Now the value is published to PubNub and is graphed on Freeboard.io at <a href="https://freeboard.io/board/vSCYME" rel="nofollow noreferrer">this link</a> .</p>	"
