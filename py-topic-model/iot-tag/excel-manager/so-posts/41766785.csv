thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
41766785,41766785,null,1,0,Fri Jan 20 15:12:00 EST 2017,4039826,"<p>I have an issue with MQTT lib ( <a href="https://pypi.python.org/pypi/paho-mqtt/1.1" rel="nofollow noreferrer">https://pypi.python.org/pypi/paho-mqtt/1.1</a> ).</p>		<p>I want to have async and sync tasks for multiple requests, but it seems I cannot get around an issue to make a response on web, for requested url /mqtt when actual subscribed message is received, because on_message is a callback function.</p>		<pre><code>@app.route('/mqtt', methods=['POST', 'GET'])	def main():	            client = mqtt.Client()	            client.on_connect = on_connect	            client.on_message = on_message	            test = on_message	            client.username_pw_set('x', 'x')	            client.connect("x", 1883, 60)	            client.subscribe("/message/1")		            client.loop_forever()		            # how do I get the message from callback function on_message and then stop loop_forever?	#I thought about: return msg but it doesn't work.			def on_connect(client, userdata, flags, rc):	    print("Connected with result code " + str(rc))		# The callback for when a PUBLISH message is received from the server.	def on_message(client, userdata, msg):	    #how to pass this msg to the main function?			    print(msg.topic + " " + str(msg.payload))	</code></pre>	"
41766785,42734647,41766785,2,0,Sat Mar 11 11:31:00 EST 2017,4951655,"<p>To stop loop_forever when get message, you can use <code>client.disconnect</code></p>		<p>Sample code:</p>		<pre><code>def on_message(client, userdata, msg):	    print(msg.topic + " " + str(msg.payload))	    client.disconnect() # disconnect when get message	</code></pre>		<p>To pass message to main function, you can simply use global variable. But my suggestion is to start another process for mqtt client, pass variables via shared memory. It's a lot of overhead for connecting to mqtt broker every time got a GET or POST .</p>	"
