thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
55067027,55067027,null,1,0,Fri Mar 08 16:15:00 EST 2019,10641764,"<p>I have my own docker image that I pull to create a new container. I try building it using my <code>deployment.template.json</code> with the port information and other parameters. If I use a raw docker command it works fine. But through iotedge (<code>deployment.template.json</code>) build it never exposes the port for the host machine.</p>		<p>Note, I have already authenticated to my registry. The image does get built and the logs have no errors. The exposed port does not work. It happens to be an ASP.net app.</p>		<p>Example JSON snippet:</p>		<pre><code>"my-container": {	    "version": "1.0",	    "type": "docker",	    "status": "running",	    "restartPolicy": "always",	    "settings": {	      "image": "my-azure-container-registry/my-container-image:0.0.1.amd64",	      "createOptions": "{\"Env\":[\"dns-search=myorganization.org\"],\"HostConfig\":{\"PortBindings\":{\"8080/tcp\":[{\"HostPort\":\"8083\"}]}}}"	    }	}	</code></pre>		<p>Then my docker command looks like this and does what it's "supposed" to do.</p>		<pre><code>docker run -d -p 8083:8080 --dns-search myorganization.org my-azure-container-registry/my-container-image:0.0.1.amd64	</code></pre>		<p>If I run <code>docker port &lt;my-container-name&gt;</code>, I get nothing.</p>		<p>And <code>docker inspect</code> shows me this:</p>		<pre><code>"HostConfig": {	    "Binds": null,	    "ContainerIDFile": "",	    "LogConfig": {	        "Type": "json-file",	        "Config": {}	    },	    "NetworkMode": "default",	    "PortBindings": {	        "8080/tcp": [	            {	                "HostIp": "",	                "HostPort": "8083"	            }	        ]	    },	</code></pre>		<p>So, why are they different? </p>	"
