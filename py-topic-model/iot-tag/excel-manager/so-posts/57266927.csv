thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57266927,57266927,null,1,0,Tue Jul 30 08:00:00 EDT 2019,11263905,"<ol>	<li><p>Trying to print values of the MAXREFDES100's sensors to the serial terminal, however only able to print some of the other sensors such as the MAX30205 and BMP28. Able to print out the BMP28 and MAX30205 sensor reading to the serial terminal. I'm not very sure on how to call the function to read the MAX30101 Sensor values.</p></li>	<li><p>The following is what I have done implementing in c</p></li>	</ol>		<h1>include "mbed.h"</h1>		<pre><code>#include "MAX14720.h"	#include "MAX30205.h"	#include "MAX30101.h"	#include "BMP280.h"		//Define all I2C addresses	#define MAX30205_I2C_SLAVE_ADDR_TOP (0x92)	#define MAX30205_I2C_SLAVE_ADDR_BOTTOM (0x90)	#define MAX14720_I2C_SLAVE_ADDR (0x54)	#define MAX30101_I2C_SLAVE_ADDR (0xAE)	#define BMP280_I2C_SLAVE_ADDR (0xEC)		#define HVOUT_VOLTAGE 4500 // set to 4500 mV		// I2C Masters	I2C i2c1(I2C1_SDA, I2C1_SCL);	I2C i2c2(I2C2_SDA, I2C2_SCL);		// Top local Temperature Sensor	MAX30205 MAX30205_top(&amp;i2c1, MAX30205_I2C_SLAVE_ADDR_TOP);		// Botttom local Temperature Sensor	MAX30205 MAX30205_bottom(&amp;i2c1, MAX30205_I2C_SLAVE_ADDR_BOTTOM);		// Barometric Pressure Sensor	BMP280 bmp280_pres(&amp;i2c1, BMP280_I2C_SLAVE_ADDR);		//PMIC	MAX14720 max14720(&amp;i2c2,MAX14720_I2C_SLAVE_ADDR);		// Optical Oximeter	MAX30101 max30101(&amp;i2c2, MAX30101_I2C_SLAVE_ADDR);		DigitalOut led(LED1);		//Serial 	Serial pc(USBTX, USBRX);	InterruptIn Button(SW1);		void turnOff()	{	    //write the power down command to PMIC	    max14720.shutdown();    	}	int main()	{		    // Override the default value of boostEn to BOOST_ENABLED	    max14720.boostEn = MAX14720::BOOST_ENABLED;	    // Note that writing the local value does directly affect the part	    // The buck-boost regulator will remain off until init is called	    max14720.init();	    // Turn LED signal on to make buck-boost output visible	    max14720.boostSetVoltage(HVOUT_VOLTAGE);	    led = 0;		    // Initialise the BMP280	    bmp280_pres.init(BMP280::OVERSAMPLING_X16_P, BMP280::OVERSAMPLING_X2_T, BMP280::FILT_4, BMP280::NORMAL_MODE, BMP280::T_62_5);		    // Use the POR configuration register values		    //Temperature sensor variables	    uint16_t rawTemp_top;	    uint16_t rawTemp_bottom ;	    float celsius_top, celsius_bottom;	    float fahrenheit_top, fahrenheit_bottom;		    //barometric sensor variables	    char bmp280_rawData = 0;	    float Temp_degC, Press_Pa, Press_Bar;		    //optical sensor variables	    uint8_t fifo_waterlevel_mark;	    uint8_t sample_avg;	    uint8_t sample_rate;	    uint8_t pulse_width;	    uint8_t red_led_current;	    uint8_t ir_led_current;		    wait(2);		    //Endless loop	    while(1) 	    {	        /* Temperature Sensor Settings */		        //Read Temperature	        MAX30205_top.readTemperature(&amp;rawTemp_top);	        MAX30205_bottom.readTemperature(&amp;rawTemp_bottom);   	        // Read BMP280 Temp. and Pressure	        bmp280_pres.ReadCompDataRaw(&amp;bmp280_rawData);	        bmp280_pres.ToFloat(&amp;bmp280_rawData, &amp;Temp_degC, &amp;Press_Pa);	        // Convert to Celsius	        celsius_top = MAX30205_top.toCelsius(rawTemp_top);	        celsius_bottom = MAX30205_bottom.toCelsius(rawTemp_bottom);		        // Convert to Fahrenheit	        fahrenheit_top = MAX30205_top.toFahrenheit(celsius_top);	        fahrenheit_bottom = MAX30205_bottom.toFahrenheit(celsius_bottom);			        /* Barometric Sensor Settings */		        Press_Bar = Press_Pa / 100000;		        /* Optical Sensor settings */	        //max30101.SpO2mode_init(fifo_waterlevel_mark, sample_avg, sample_rate,pulse_width, red_led_current, ir_led_current);	        max30101.HRmode_init(fifo_waterlevel_mark,sample_avg,sample_rate,pulse_width,red_led_current);     		        /* Printing various sensor values */	        pc.printf("***** MAX30205 Temperature Sensor Reading *****\n\r");	        pc.printf("Top Temperature: %.2f\370 C\n\rBottom Temperature: %.2f\370 C \n\rTop Temperature in Farenheit: %.2f\370 F\n\rBottom Temperature in Farenheit %.2f\370 F\n\n\r", celsius_top, celsius_bottom, fahrenheit_top, fahrenheit_bottom);		        pc.printf("***** BMP280 Barometric Sensor Reading *****\n\r");	        pc.printf("Temp_degC : %.2f , Press_Bar is %.2f , Press_pa is %.2f\n\n\r",Temp_degC, Press_Bar, Press_Pa);		        pc.printf("***** MAX30101 Optical Sensor Reading [HR mode]*****\n\r");	        pc.printf("Optical Sensor Value [fifo_waterlevel_mark: %d]\n\rOptical Sensor Value[sample_avg: %d]\n\rOptical Sensor Value[pulse_width: %d]\n\n\r", fifo_waterlevel_mark,sample_avg,pulse_width);			        pc.printf("***** ECG Sensor Reading *****\n\r");		        pc.printf("-------------------------------------------------\n\n\n\r");		        wait(5);				    }	}	</code></pre>	"
57266927,101123938,57266927,3,0,Thu Aug 01 19:52:00 EDT 2019,429063,"You have code, what happens that is different from your expectation?  What can you learn by reading the documentation of the class that seems to exist for this sensor?"
