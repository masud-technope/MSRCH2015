thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
43480716,43480716,null,1,-1,Tue Apr 18 19:32:00 EDT 2017,3291504,"<p>I have a requirement where I am continuously sending data to IoT hub and If Internet connectivity is went down I need to store it on Local database like SQL.</p>		<p>To Send data to IoT hub we have asyn method that is "deviceClient.SendEventAsync"	where device client is the object of DeviceClient class.</p>		<p>Now since this is asyn method it is not throwing any exception when no internet connection is there hence I am not able to catch this and store into local sql db.</p>		<p>Inside method my code is like </p>		<pre><code>    try	    {	    await deviceClient.SendEventAsync(message) ;	    }	    catch(AggregateException)	    {	      //If exception found then store same msg to local database.	    }    	    catch(Exception ex)	    {	     //If exception found then store same msg to local database.	    }	</code></pre>		<p>But I am never getting any exception in case of any fault or no internet connectivity and the execution of code is keep going.</p>		<p>Please help me to tackle this issue.</p>		<p>Also let me know in case there are any other ways to capture exception while calling any asyn method. </p>		<p>Please find the entire code structure that I am using for this operation.</p>		<pre><code>namespace D2CDeviceDataSender	{	    class Program	    {	        private static DeviceClient deviceClient;	        private static string iotHubUri = string.Empty;	        private static string deviceKey = string.Empty;	        private static string deviceName = string.Empty;		        static void Main(string[] args)	        {	            try	            {	                iotHubUri = ConfigurationManager.AppSettings["IoTHubURI"].ToString();	                deviceName = ConfigurationManager.AppSettings["DeviceName"].ToString();	                deviceKey = ConfigurationManager.AppSettings["DeviceKey"].ToString();	                deviceClient = DeviceClient.Create(iotHubUri, new DeviceAuthenticationWithRegistrySymmetricKey(deviceName, deviceKey), Microsoft.Azure.Devices.Client.TransportType.Mqtt);		                Task.Factory.StartNew(() =&gt; SendDeviceToCloudMessagesAsync1());	                Console.ReadLine();	            }	            catch (Exception ex)	            {	                Console.WriteLine(ex.Message);	                Console.WriteLine("Press any key to exit.....");	                Console.ReadLine();	            }	        }		        public static async Task SendDeviceToCloudMessagesAsync1()	        {	            while (true)	            {	                try	                {	                    double avgWindSpeed = 10; // m/s	                    Random rand = new Random();	                    double currentWindSpeed = avgWindSpeed + rand.Next();	                    var telemetryDataPoint = new	                    {	                        DeviceCode = "myFirstDevice",	                        Date = DateTime.UtcNow,	                    };		                    string messageString = JsonConvert.SerializeObject(telemetryDataPoint);	                    var message = new Message(Encoding.ASCII.GetBytes(messageString));	                    Task taskresult = deviceClient.SendEventAsync(message);	                    await taskresult;	                    Console.WriteLine("Data sent to IoT hub :" + DateTime.Now + " " + messageString);	                }	                catch (IotHubCommunicationException ex)	                {	                    Console.WriteLine(ex.Message);	                    Console.WriteLine(ex.InnerException);	                    Console.WriteLine("Internet connectivity down insert data to local database !");	                }	                catch (AggregateException ex)	                {	                    Console.WriteLine(ex.Message);	                    Console.WriteLine(ex.InnerException);	                    Console.WriteLine("Internet connectivity down insert data to local database !");	                }	                catch (Exception ex)	                {	                    Console.WriteLine(ex.Message);	                    Console.WriteLine(ex.InnerException);	                    Console.WriteLine("Internet connectivity down insert data to local database !");	                }		                Thread.Sleep(5000);	            }	        }		    }	}	</code></pre>		<p>Below are my two observation that is:</p>		<ol>	<li>This code will  throwing  exception  only one time when internet	connectivity get down.</li>	<li>From next iteration the "await taskresult;" method in stop	responding and from on ward iteration so I am not able to capture any	exception.</li>	</ol>		<p>Please revert back with your feedback. </p>	"
43480716,74037080,43480716,3,0,Wed Apr 19 09:06:00 EDT 2017,158285,"@astaykov Your statement about try catching on __async void__ generating AggregateExceptions is unclear. Can you explain what you mean in more detail. __async void__ will never deliver an exception to a surrounding catch block. Perhaps you mean something else."
43480716,74034944,43480716,3,0,Wed Apr 19 08:13:00 EDT 2017,605134,"@bradgonesurfing you can browse the source code (of the SDK btw) freely on [GitHub](https://github.com/Azure/azure-iot-sdk-csharp). But you will not find an issue there. And I dare to comment like that, because I have seen already a number of developers doing this mistakes: (1) Do not understand the Async / Await design pattern as described by Microsoft; (2) Do not understand the Retry Logic design pattern and the fact that all Azure SDKs do have built-in retry logic which can be controlled. And in case of IoT SDK the default operation timeout on the connection is 3 Minutes + the retry logic!"
43480716,74035036,43480716,3,0,Wed Apr 19 08:16:00 EDT 2017,605134,"The source code of IoT SDK will not help you here, but the full code sample including method signature and calling method signature of the provided code sample."
43480716,74030738,43480716,3,0,Wed Apr 19 06:20:00 EDT 2017,158285,"@astaykov I don't see any evidence that he is calling async void methods. Also async void doesn't result in aggregate exceptions in the try catch. Async void exceptions cannot be caught. They get delivered to the synchronization context and have to be handled some other way other than try catch."
43480716,74030794,43480716,3,0,Wed Apr 19 06:21:00 EDT 2017,158285,"Please provide the implementation for SendEventAsync all the way down to the place where the network call gets made. Have you at least set a breakpoint in visual studio and confirmed an exception is raised. If so you can paste the stack trace here as well."
43480716,74200388,43480716,3,0,Sun Apr 23 18:51:00 EDT 2017,3291504,"Hello Guys I have just update your required piece of code please give your feedback or suggestion."
43480716,74023546,43480716,3,2,Tue Apr 18 23:34:00 EDT 2017,402366,"Can you provide the signature for method where that code is and the calling code?"
43480716,74023606,43480716,3,0,Tue Apr 18 23:38:00 EDT 2017,605134,"common missunderstanding of the Async/Await pattern. You are performing these actions in an Async method which returns **void** instead of **task**- That's why you end up with aggregate exception instead of the real exceptions. And you cannot properly detect loss of connectivity. Please read carefully and thoughtfully [this article](https://msdn.microsoft.com/en-us/library/mt674882.aspx) and fix all your async methods. Then ask your question again!"
43480716,43491507,43480716,2,0,Wed Apr 19 09:22:00 EDT 2017,50911,"<p>I have the following code in a loop that continuously sends messages to IoT Hub:</p>		<pre><code>try	{	    await deviceClient.SendEventAsync(message);	    Console.WriteLine("{0} &gt; Sending message: {1}", DateTime.Now, messageString);	}	catch (AggregateException e)	{	    Console.WriteLine("{0} &gt; Error Sending message: {1}", DateTime.Now, messageString);	    Console.WriteLine("AggregateException: {0} ", e.Message);	}	</code></pre>		<p>If I set this running, and then disconnect the computer from the network, I see this in the output:</p>		<pre><code>19/04/2017 09:11:47 &gt; Sending message: {"deviceId":"myFirstDevice","windSpeed":10.042793008518775}	19/04/2017 09:11:52 &gt; Sending message: {"deviceId":"myFirstDevice","windSpeed":8.5088816902175921}	19/04/2017 09:11:58 &gt; Sending message: {"deviceId":"myFirstDevice","windSpeed":10.399840490147398}	19/04/2017 09:12:22 &gt; Error Sending message: {"deviceId":"myFirstDevice","windSpeed":10.388208727533094}	AggregateException: One or more errors occurred.	</code></pre>		<p>This shows that you can catch AggregateExceptions from the <strong>SendEventAsync</strong> method. What platform are you running your code on?</p>	"
43480716,74200373,43491507,3,0,Sun Apr 23 18:50:00 EDT 2017,3291504,"Hi Dominic please disconnect the computer from the network and run this code first time then let me know whether are you able to capture this exception or not. Also put these code in while loop and check that after one unsuccessful iteration are you able to capture onward iteration exception or not .Looking for ward for your reply."
