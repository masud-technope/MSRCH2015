thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
35247106,35247106,null,1,2,Sat Feb 06 22:11:00 EST 2016,3951216,"<p>I am currently developing an apparatus for feeding and monitoring my dog remotely. The basic idea is to make this using 2 main components:</p>		<ul>	<li><p>The first component will be composed of a camera pointing to my dog's plate and a microcontroller with a servomotor which will open and close the food door from the food container. In this place there is no WIFI access nor power outlets, so it will run on batteries. I hope the computing in this component to be as low as possible, so if it can be done without it running on linux or other OS it would be great.</p></li>	<li><p>The second component will communicate with the first one and with my router so I can access it remotely via Internet. This one can be plugged to a power outlet.</p></li>	</ul>		<p>The usage of this would consist on me being able to log on my phone (with an app I create) to the second component for it to show me the live video and send a signal through it to open the food container door for a set amount of time. I have one BeagleBone Black I can use for this project, which I think I will apply on the second component.</p>		<p><strong>My questions:</strong></p>		<p><strong>1)</strong> What protocol would be suitable for the communication between both components (bluetooth, zigbee, 6lowpan, etc)? The camera will probably be 640*480 or higher and there is no problem on delays (~ 15s - 20s) as long as I can watch relatively continuous live video to check my dog is eating and well. It should be as low-power consuming as possible for batteries to run a long time.</p>		<p><strong>2)</strong> Is there any way to make the first component be able to stream the video without it running an OS?</p>		<p>I know there are some more logical solutions (extend the wifi network, buy an already on market solution, etc) but I am wishing to use this project as a learning instance for IoT as well. I have done research, but have not been able to land on any convincing conclusions. I hope you guys can help me on this or at least point me on the right direction. I (and my dog) will be very grateful.</p>		<p>Thank you very much.</p>	"
35247106,58405147,35247106,3,0,Thu Feb 11 20:05:00 EST 2016,3951216,"@MertGÃ¼lsoy jajaja yes I guess it would, but the thing is I am also trying to learn by building this so I am avoiding market solutions. Any insight on what technology to use? Thank you"
35247106,58291499,35247106,3,0,Tue Feb 09 11:30:00 EST 2016,745049,"Buy a baby monitor with video feed. It will be ten times cheaper. :)"
35247106,35359692,35247106,2,2,Fri Feb 12 10:03:00 EST 2016,745049,"<p><strong>Video</strong></p>		<p>The first thing you need to know is what is video? As a summary video is a byte stream containing images taken by a camera with a certain interval. Each image is named after FRAME. Thus video stream has a resolution and colour profile and this applies to all frames. For example A RGB image with 24 bits means each channel (red, green, blue) has 8 bits for color indication. </p>		<p>As your query states the resolution 640x480, a RGB raw image contains:</p>		<pre><code>640 * 480 * 3 = 921600 bytes	a video without compression with 24 fps (frames per second) will produce	921600 * 24 = 22.118.400 bytes per second.	this will require a bandwidth of (ideally):	22.118.400 * 8 = 176.947.200 bits roughly 168,75 mbits	</code></pre>		<p>But don't worry. However there are compression formats (like Jpeg) and they reduce the total number of image bytes. This compression depends on conditions like light, resolution, detail, etc. This needs to be tested to calculate total byte count to calculate required bandwidth. There are TTL camera modules (<em>ask google like serial camera module arduino or ttl serial jpeg camera</em>). These modules can output video or still images and can be configured. These modules has ttl serial interface. This is the important part. </p>		<p><strong>Transfer</strong></p>		<p>The xbee (which is most popular) or NRF*** based wireless transmission protocols and/or modules have ttl serial interfaces. According to their datasheets they can transfer with baud rates up to 3mbits per second. Now we go back to video byte size calculation. We need a module (xbee or similar) that can support data from the camera.</p>		<p>At a very basic level your first component can contain these components:</p>		<pre><code>ttl_camera -&gt; xbee + battery + regulators	</code></pre>		<p>and second component</p>		<pre><code>xbee -&gt; beaglebone -&gt; internet connection 	</code></pre>		<p>But your question states that on first component there is a servo motor connected this needs an MCU to be present on first component side. (<em>xbee has gpio ports but i'm not sure if you can control them remotely to drive servo</em>) so the first component can be modified like this:</p>		<pre><code>ttl_camera -&gt; arduino pro mini -&gt; xbee + battery + regulators	</code></pre>		<p><strong>Communication</strong></p>		<p>Between first component and second component there must be a communication protocol to enable beaglebone to control first component. My opinion you need to switch on and off camera, thus the video stream. You need to control servo motor. Protocol schema can be like this:</p>		<pre><code>site_2 --&gt; site_1 (control commands)	site_1 --&gt; site_2 ( *ONLY* Video stream )	</code></pre>		<p>So the connection schema can be like this:</p>		<pre><code>CAM_TX --&gt; xbee_RX	ARDUINO_RX --&gt; xbee_TX	ARDUINO_TX --&gt; CAM_RX	</code></pre>		<p><strong>Conclusion</strong></p>		<p>With this config, you will be able to achieve get a video stream from site_1 and control site_1 with site_2 over internet. I think this is a good start for a learning project.</p>	"
