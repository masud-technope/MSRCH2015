thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
51728761,51728761,null,1,-1,Tue Aug 07 14:06:00 EDT 2018,7182643,"<p>We develop an iot door access control system with ESP8266 on <a href="https://github.com/omersiar/esp-rfid/blob/dev/src/main.cpp" rel="nofollow noreferrer">Platfromio IDE</a>.	You can see all our works on <a href="https://github.com/omersiar/esp-rfid" rel="nofollow noreferrer">esp-rfid GitHub repository</a>.	We want to use ota updates on our systems but the code cover almost half of the memory sometimes bigger then half. If the code cover bigger than half of the memory we can't use ota update. How we can reduce code size? </p>		<p>Thank for your answers.</p>		<p>You can find the code from <a href="https://github.com/omersiar/esp-rfid/blob/dev/src/main.cpp" rel="nofollow noreferrer">there</a>.</p>		<p>The build results:</p>		<p><code>DATA:    [====      ]  43.4% (used 35592 bytes from 81920 bytes)	PROGRAM: [=====     ]  48.6% (used 507732 bytes from 1044464 bytes)</code> </p>	"
51728761,90418388,51728761,3,1,Tue Aug 07 14:11:00 EDT 2018,1387438,"did you play around with compiler flags?"
51728761,90418448,51728761,3,2,Tue Aug 07 14:13:00 EDT 2018,920069,"Generate a map file, figure out what is largest in your code, and focus on that. This is far too broad to answer here."
51728761,90418452,51728761,3,0,Tue Aug 07 14:13:00 EDT 2018,5772210,"You could have a small bootloader that just checks for OTA update (and downloads it if it available) and does nothing else. If no update is available, or the current update has finished downloading, it loads the main program."
51728761,90418826,51728761,3,0,Tue Aug 07 14:21:00 EDT 2018,7182643,"@MarekR we tried O3 O2 O1 but binary size increased"
51728761,90418904,51728761,3,2,Tue Aug 07 14:23:00 EDT 2018,2184331,"Create and look at the map file. I usually parse  the map file into a CVS file so you can use excel to sort things. Convert all addresses to decimal values and add these to the CVS. If you do not get sizes sort into order and assume size is difference to next symbol. Filter obvious errors. Keep the hex as strings. Look at the biggest objects first and and look for savings there. Over use of inlining can cause bloat. Although inlined functions can be faster and in some cases smaller than the function call. Delete dead code. Create common function where code is repeated."
51728761,90419019,51728761,3,0,Tue Aug 07 14:25:00 EDT 2018,2184331,"A common issue is "just in case" virtual methods. Only make methods that need to be virtual virtual."
51728761,90419066,51728761,3,0,Tue Aug 07 14:27:00 EDT 2018,2184331,"Look for repeated instantiations of the same function. This can be due to static methods, inlined functions that are not actually inlined and other such issues."
51728761,90419584,51728761,3,0,Tue Aug 07 14:38:00 EDT 2018,1387438,"@AyberkKaraakÄ±n flags `O3 O2 O1` are for optimizing code speed not code size!"
51728761,90419749,51728761,3,0,Tue Aug 07 14:42:00 EDT 2018,1387438,"[possible duplicate](https://stackoverflow.com/q/200292/1387438). For now I can't mark it using `close`."
51728761,51728945,51728761,2,1,Tue Aug 07 14:14:00 EDT 2018,643383,"<blockquote>	  <p>If the code cover bigger than half of the memory we can't use ota update.</p>	</blockquote>		<p>Sure you can. Update to a very small program that consumes very little memory, and whose only job is to do another update to the next version of your actual program.</p>		<blockquote>	  <p>How we can reduce code size?</p>	</blockquote>		<p>That's hard to say without knowing anything about your code.</p>	"
51728761,90418905,51728945,3,0,Tue Aug 07 14:23:00 EDT 2018,7182643,"You can find the code from https://github.com/omersiar/esp-rfid/blob/dev/src/main.cpp also you can clone the project from https://github.com/omersiar/esp-rfid.git"
51728761,90419158,51728945,3,4,Tue Aug 07 14:28:00 EDT 2018,643383,"You seem to be confused about the purpose of this site. We're not a free software consulting agency."
51728761,51729091,51728761,2,0,Tue Aug 07 14:21:00 EDT 2018,6161878,"<p>Without looking at the source code I can tell you that some of the C++ features are less expensive as memory consumption than others for example: namespaces, classes (especially generic ones) are cheap while exception handling for example is very expensive.</p>		<p>Some tips:</p>		<ul>	<li>when generating the code make sure you strip all the debug symbols</li>	<li>use generics since only the code you are using gets converted into binary in your executable not the whole library</li>	<li>check compiler/linker options to see how you can reduce that even more</li>	</ul>	"
51728761,90419033,51729091,3,0,Tue Aug 07 14:26:00 EDT 2018,7182643,"You can find the code from https://github.com/omersiar/esp-rfid/blob/dev/src/main.cpp also you can clone the project from https://github.com/omersiar/esp-rfid.git"
