thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
48607181,48607181,null,1,4,Sun Feb 04 10:39:00 EST 2018,5126604,"<p>I am designing an API for <strong>confidential</strong> communication between an IoT device and a client. A must is that that the client-device connection is <strong>secure</strong> and no man-in-the middle can temper the communication or attack the devices, including the routing server. </p>		<p>The network diagram is the following:</p>		<p><a href="https://i.stack.imgur.com/C0Jph.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/C0Jph.jpg" alt="enter image description here"></a></p>		<ul>	<li><strong>IoT devices are always in home behind the same network.</strong></li>	<li><strong>Client devices are mobile and change networks</strong></li>	<li><strong>Clients continuously connect and disconnect to the IoT device</strong></li>	</ul>		<p>The clients must be able to execute commands on the IoT devices via an API server running on each IoT device. The routing server only tunnels the requests, but <strong>must not be trusted</strong>.</p>		<p>My question is:</p>		<p>What protocol should I use to implement this scheme?</p>		<p>I am a little confused over <strong>SSH</strong>. 	<em>It seems to be the perfect fit for the secure client &lt;--> IoT device communication over a Tunnel.</em></p>		<p><strong>But is it possible to create a RESTful API using SSH?</strong></p>		<p>I don't need direct access to the device's shell, I need a layer of abstraction, provided by an API running on the IoT device. </p>		<p>If SSH is not an option, can I securely route requests and execute commands on the IoT device from the <em>Client</em> in any other way?</p>	"
48607181,91800662,48607181,3,0,Thu Sep 20 15:32:00 EDT 2018,1536474,"Hi @BabbevDan, it has been a while since you asked the question. I guess you already had your design and implementation. Can you please share your experience? specially cons and pros on communicating through ssh? thanks."
48607181,84227150,48607181,3,0,Mon Feb 05 02:22:00 EST 2018,5126604,"My real dilemma is whether I should run a classical HTTPS server on the IoT devices, create a REST API with strong authentication and let Clients execute commands through it, or should I develop something on top of SSH.		The goal is to let remote Clients execute certain commands on the devices safely. And wasn't SSH made for this reason?		However, the clients must not see a remote shell on their smartphones, but a nice GUI"
48607181,84215394,48607181,3,0,Sun Feb 04 15:07:00 EST 2018,13317,"Most people would just use HTTPS here."
48607181,84216928,48607181,3,0,Sun Feb 04 16:21:00 EST 2018,1126841,"SSH and REST are orthogonal. SSH carries the traffic, REST simply defines what that traffic looks like."
48607181,84233352,48607181,3,0,Mon Feb 05 08:33:00 EST 2018,3633742,"Do you realize that with both methods the final user will need to open ports on his firewall to allow the connection ?"
48607181,84233830,48607181,3,0,Mon Feb 05 08:50:00 EST 2018,5126604,"The IoT device automatically connects to the tunneling server. I consider using Ngrok link. There is no need to forward ports on both sides"
48607181,84346772,48607181,3,0,Wed Feb 07 22:14:00 EST 2018,4148708,"Ah, a classic example of the Byzantine Generals Problem. If you don't trust that hunk of metal in the middle your problem becomes exponentially more difficult - https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Byzantine-Generals-Problem.pdf - if you don't want to end up with another proof-of-work system on your hands after days (weeks?) of research, just trust the middle man, and make it an MQTT broker over TLS while at it. MQTT is a pub/sub model, HTTP is clunky and stateless, doesn't work very well in IoT."
48607181,54033175,48607181,2,1,Fri Jan 04 04:36:00 EST 2019,5126604,"<p>The way to do it is just to use HTTPS and certificate pinning (this is very similar to what SSH does under the hood).</p>		<p>On the first request to the IoT device, the user pins the device's certificate - after confirming that it is the correct one.</p>		<p>Once we have the certificate we just expose the REST API over the insecure proxy. Everything from then on is handled by the TLS protocol automatically.</p>		<p>The security guarantees are the same, as with the SSH protocol.</p>	"
