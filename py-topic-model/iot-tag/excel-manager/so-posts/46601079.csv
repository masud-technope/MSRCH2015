thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
46601079,46601079,null,1,3,Fri Oct 06 08:03:00 EDT 2017,8718100,"<p>I am looking into Amazon IoT as a transport mechanism for mobile devices periodically measuring data (usually every N minutes, with N being anywhere between 2 and 32 minutes). With MQTT, I can utilize Amazon's broker to publish finished measurement results to subscribers with QoS=1. Let's also assume that my sole subscriber is just another device listening on wildcard topic (eg. abc/#) and storing published messages into a local database.</p>		<p>But now it's also possible that:</p>		<pre><code>the publishing mobile devices have spotty/bad/no connection to the cell network,	the subscriber dies (reboots, software failure, hardware failure, maintenance, etc.)	</code></pre>		<p>Assuming I use the official Java SDK . What would happen to data published during these times when at least either of them is offline? Will the subscriber get all the messages it has been missing out on upon reconnect?</p>		<p>Also: does this depend on the protocol in question? For testing purposes, we're using WebSockets, but later development/production, we'd prefer MQTT over SSL. </p>	"
46601079,46604400,46601079,2,1,Fri Oct 06 11:08:00 EDT 2017,1768226,"<blockquote>	  <p>What would happen to data published during these times when at least	  either of them is offline? Will the subscriber get all the messages it	  has been missing out on upon reconnect?</p>	</blockquote>		<p>Yes, If you use MQTT with QoS Level 1 or Higher because MQTT employs a Publisher/Subscriber architecture with Topic. Messages destined to Topics with QoS Level 1 and Higher will have the messages in memory and on disk (Atleast <a href="https://mosquitto.org/man/mosquitto-conf-5.html" rel="nofollow noreferrer">mosquitto</a>) by the MQTT server until a Subscriber subscribes.</p>		<p>WebSocket is different. It doesn't have a Publisher/Subscriber architecture. It is a Duplex Communication model on a Single TCP connection. WebSocket initiates as a HTTP connection which will get updated to a WebSocket connection. In case of WebSocket it is the responsibility of the Application to make sure what happens when there are connection problems with Subscribers.</p>	"
