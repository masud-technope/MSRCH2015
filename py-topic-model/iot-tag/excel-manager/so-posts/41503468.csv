thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
41503468,41503468,null,1,4,Fri Jan 06 10:17:00 EST 2017,7376100,"<p>I'm trying to publish some data on the Azure IoT hub using Mqtt.	I've succesfully published some data, using a SAS token. </p>		<p>But my customer wants a x509 self generated &amp; self signed certificate.	Azure is supporting this, but doesn't give much information about it.	(<a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-security#supported-x509-certificates" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-security#supported-x509-certificates</a>)</p>		<blockquote>	  <p><strong>A self-generated and self-signed X-509 certificate.</strong> A device	  manufacturer or in-house deployer can generate these certificates and	  store the corresponding private key (and certificate) on the device.	  You can use tools such as OpenSSL and Windows SelfSignedCertificate	  utility for this purpose.</p>	  	  <p><strong><em>Note</em></strong>	  IoT Hub does not require or store the entire X.509 certificate, only	  the thumbprint.</p>	</blockquote>		<p>What I've done is created a CA certificate and key.</p>		<pre><code>$openssl req -newkey rsa:2048 -x509 -nodes -sha256 -days 365 -extensions v3_ca -keyout ca.key -out ca.crt	</code></pre>		<p>Created a client key and signing request </p>		<pre><code>$openssl genrsa -out client.key 2048		$openssl req -new -sha256 -out client.csr -key client.key	</code></pre>		<p>Signed the request and created the certificate</p>		<pre><code>$openssl x509 -req -sha256 -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -CAserial ca.srl -out client.crt -days 365	</code></pre>		<p>I've uploaded the client key and certificate to the modem.	And inserted the thumbprint of the client certificate.</p>		<p>My modem can succesfully connect to <code>myhub.azure-devices.net/deviceId (port 8883)</code>	But when new data arrives it can't decode it.</p>		<p>I'm kinda stuck from this point on. I've tried to use MqttFx, but with no luck. </p>		<p>Can someone push me into the right direction here?</p>	"
41503468,70429395,41503468,3,1,Thu Jan 12 13:12:00 EST 2017,933207,"Should port be 1883 instead of 8883 for ssl, as per https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-mqtt-support"
41503468,41802269,41503468,2,3,Mon Jan 23 08:52:00 EST 2017,7376100,"<p>I've fixed this problem:</p>		<p>The configured CA certificate must be the azure certificate: <a href="https://github.com/Azure/azure-iot-sdk-c/blob/master/certs/certs.c" rel="nofollow noreferrer">CA Root Certificate Azure SDK</a>. I've used the Baltimore root certificate.</p>		<p>The client certificate and key are correct. The SHA1 thumbprint of the client certificate must be communicated to the Azure IoT hub.</p>		<p>I've used <a href="https://eclipse.org/paho/" rel="nofollow noreferrer">Paho</a> as Mqtt client.</p>		<p>Finally I've had a modem error on connecting to the server. The time inside the modem was still at default (1-1-2004) apparently, and the modem checks the time of the certificate with the current time (1-1-2004), which was invalid, so no connection could be made. </p>	"
41503468,44318862,41503468,2,4,Fri Jun 02 00:03:00 EDT 2017,5874738,"<p>For those of you wanting to use the Azure IoT C# SDK, I've created a C#-based code sample that shows you how to associate OpenSSL self-signed and self-generated X509 certs with a device registered in Azure IoT Hub, and then use the certs (primary or secondary) in subsequent runtime operations - specifically sending a telemetry message.  </p>		<p>You can choose to use either MQTT or HTTPS as your transport layer.  </p>		<p><a href="https://github.com/tamhinsf/SimpleAzureIoTCerts/" rel="nofollow noreferrer">https://github.com/tamhinsf/SimpleAzureIoTCerts/</a></p>	"
