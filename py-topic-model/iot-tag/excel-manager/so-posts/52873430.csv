thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
52873430,52873430,null,1,0,Thu Oct 18 11:56:00 EDT 2018,6851740,"<ul>	<li><p>we rely on <a href="https://github.com/thingsboard/thingsboard" rel="nofollow noreferrer">ThingsBoard Server</a> and <a href="https://github.com/thingsboard/thingsboard-gateway" rel="nofollow noreferrer">ThingsBoard Gateway</a> to manage IoT devices, and we have such a demand:</p>		<ol>	<li>IoT devices devicesOfTypeA publish messages to v1/devices/me/telemetry</li>	<li>ThingsBoard Server transfers specific messages, and then publish the new messages to a new topic, etc v1/devices/devTypeB/request</li>	<li>IoT devices devicesOfTypeB subscribed to v1/devices/devTypeB/# will get the newly generated messages</li>	</ol></li>	<li><p>we're wondering if we can implement the demand by configuring ThingsBoard Rule Chains, it seems like the Rule Chains is really an amazing tool and can do everything :)</p></li>	</ul>		<p>Does anyone happens to have any clue? We're new to ThingsBoard, after reading most of the document, especially "Data Processing &amp; Actions" sections on <a href="https://thingsboard.io/docs/guides/" rel="nofollow noreferrer">ThingsBoard Guide Doc</a>, we didn't find out if the Rule Chains solution is possible.</p>	"
52873430,52877811,52873430,2,1,Thu Oct 18 15:43:00 EDT 2018,10519790,"<p><strong>First option:</strong></p>		<ul>	<li><p>deviceB subscribes to its own attribute (scope = shared) (deviceB attribute name = deviceATemeprature)</p></li>	<li><p>deviceA publish telemetry (temperature=40)</p></li>	<li><p>Rule chain    </p>		<ul>	<li>accept message from deviceA     </li>	<li>save it as a telemetry of	DeviceA  </li>	<li>change message originator to deviceB    </li>	<li>transfrom original	message into update Attribute message (Message payload from	{"temperature":"40"} to {"deviceATemeprature":"40"};)<br>	save attribute</li>	</ul></li>	</ul>		<p>With this algorithm, deviceB will be notified when deviceA telemetry is updated.</p>		<p><strong>Second option:</strong></p>		<p>It is similar, but instead of subscribing to attributes, deviceB subscribe to RPC topic. Rule Engine sends RPC command to deviceB each time when telemetry of deviceA is updated.</p>		<p><strong>PS</strong>: your case is not standard and it is not clear why you need such complex topology. I'm not sure that devices should now about attributes/telemetry from other devices. A more common case is when you need to trigger some function on a device when a state of another device is changed from stateA to stateB. In this case, you need to implement all logic inside RuleChain, implement RPC API on your devices and trigger this API from the Rule Engine.</p>	"
52873430,92687783,52877811,3,0,Fri Oct 19 07:12:00 EDT 2018,6851740,"thanks for your answer, does the second one use "save timeseries" Action? more over, I didn't get how to change message originator to deviceB, there do has a "change originator" Transformation node in Rule Chains, but it seems the node is not design for it; I managed to change deviceA->deviceB by "script" Transformation node. In all, I change message originator and message body in "script" Transformation node, but deviceB didn't get subscribed messages."
52873430,92687961,52877811,3,0,Fri Oct 19 07:19:00 EDT 2018,6851740,"actually, my scenario is the same as you described: trigger some function of devicesOfTypeB when a state of devicesOfTypeA is changed."
52873430,92691948,52877811,3,0,Fri Oct 19 09:36:00 EDT 2018,6851740,"does your RPC Call means: TB Server publish MQTT message with special payload(contains method, params) to specific topic, etc v1/devices/devOfTypeB/devX/rpc/request, devX receive the MQTT message, and take action accordingly. it means all the messages are transmitted inside the MQTT tunnel, but not separate RPC tunnel, am I right? currently our devices only connected to TB server through MQTT connection."
52873430,92698303,52877811,3,0,Fri Oct 19 13:00:00 EDT 2018,10519790,"You are right, rpc command is sent via the same MQTT tunel. Topic - v1/devices/me/rpc/request/+"
