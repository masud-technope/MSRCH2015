thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
56158333,56158333,null,1,0,Wed May 15 22:13:00 EDT 2019,4970496,"<p>I'm trying figure out how to control multiple temperature sensors.</p>		<p><strong>THE SETUP:</strong></p>		<ul>	<li>2 <a href="https://www.adafruit.com/product/2471" rel="nofollow noreferrer">ESP8266</a> Micro Controllers</li>	<li>2 <a href="https://www.adafruit.com/product/1782" rel="nofollow noreferrer">MCP9808</a> Temperature Sensors</li>	<li>1 Machine controlling both ESPs using Johnny-Five.</li>	</ul>		<p>NOTE: Each ESP8266 micro controller handles one MCP9808 Temperature Sensor.</p>		<p><strong>THE GOAL:</strong>	The central machine (MacOS running Johnny-Five) handles both microcontrollers under one Node JS script.</p>		<p><strong>THE PROBLEM:</strong>	I can control one Micro Controller / Temperature pairing, but not both under the same script.	Apparently the key to handling both at once lies in knowing how to handle the IC2 addressing.	So far I haven't been able to find any pages, forums, instructions or combinations thereof that clearly explain the logic in terms that I can understand.</p>		<p><strong>THE QUESTION:</strong>	How to handle I2C using Johnny-Five to control multiple devices</p>		<p><strong>THE CODE:</strong>	It only works when handling one Sensor, not both	In other words with the 4th line commented out it works.  Uncommented, it doesn't.</p>		<pre><code>    var five = require("johnny-five");	    var {EtherPortClient}=require("etherport-client");	    var Thermometers=[	        //{Name:"Thermometer1", Ip:"192.168.1.101"}, //Uncommenting causes fail.	        {Name:"Thermometer2", Ip:"192.168.1.102"} 	    ];	    TrackThermometers();		    function TrackThermometers(){	        Thermometers.forEach(function(ThisThermometer, ThermometerCount){	            ThisThermometer.Board=new five.Board({	                port: new EtherPortClient({	                    host: ThisThermometer.Ip,	                    port: 3030	                }),	                repl: false	            });	            ThisThermometer.Board.on("ready", function(){	                ThisThermometer.Controller=new five.Thermometer({ //This cmd triggers the error	                    controller:"MCP9808"	                });	                ThisThermometer.Controller.on("change", function(){	                    console.log(this.id, this.fahrenheit);	                });	            })	        });	    }	</code></pre>	"
56158333,98946833,56158333,3,0,Thu May 16 00:11:00 EDT 2019,2670348,"It the temperature sensors are on two different ESP8266s and each one works individually then it's not an I2C problem, it's an issue with "Johnny Five" and its communication with the ESP8266s."
56158333,98947309,56158333,3,0,Thu May 16 01:02:00 EDT 2019,4970496,"That's interesting.   The problem could just as easily by my misunderstanding of J5.  If look carefully, there's nothing in the  `new five.Thermometer({controller:"MCP9808"})` that connects it to its respective board.  I'd like to think the solution is a parameter in addition to 'controller' that would make that connection."
56158333,98968682,56158333,3,0,Thu May 16 14:38:00 EDT 2019,2670348,"I don't know J5 or I'd be happy to help."
56158333,56201082,56158333,2,0,Sat May 18 16:59:00 EDT 2019,4970496,"<p><strong>SOLUTION</strong></p>		<p>There is a <code>board</code> property (undocumented as of this post) under the J5's <code>Thermometer</code> API.  Assigning the <code>Board</code> instance in question to that property associates the Thermometer instance with that board.</p>		<p>By way of example the above code would be edited as follows...</p>		<pre><code>    ThisThermometer.Controller=new five.Thermometer({	       board: ThisThermometer.Board, //&lt;-- the missing magic	       controller:"MCP9808"	    });	</code></pre>		<p>Thanks to <a href="https://github.com/dtex" rel="nofollow noreferrer">Donovan Buck</a> for figuring this out.  May be <a href="https://github.com/rwaldron/johnny-five/issues/1575" rel="nofollow noreferrer">documented soon</a>.</p>	"
