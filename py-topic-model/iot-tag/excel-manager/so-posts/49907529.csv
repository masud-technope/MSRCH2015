thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
49907529,49907529,null,1,2,Wed Apr 18 19:23:00 EDT 2018,1930814,"<p>I am using a Python client with paho-mqtt to publish in this specific topic of Google Cloud IoT: <code>projects/my_project/topics/sm1</code>. My code is below, based on examples of the Google IoT documentation:</p>		<pre class="lang-py prettyprint-override"><code>import paho.mqtt.client as mqtt	import ssl, random, jwt_maker	from time import sleep		root_ca = './../roots.pem'	public_crt = './../my_cert.pem'	private_key = './../my_pr.pem'		mqtt_url = "mqtt.googleapis.com"	mqtt_port = 8883	mqtt_topic = "/projects/my_project/topics/sm1"	project_id   = "my_project"	cloud_region = "us-central1"	registry_id  = "sm1"	device_id    = "sm1"		connflag = False		def error_str(rc):	    """Convert a Paho error to a human readable string."""	    return "Some error occurred. {}: {}".format(rc, mqtt.error_string(rc))		def on_disconnect(unused_client, unused_userdata, rc):	    """Paho callback for when a device disconnects."""	    print("on_disconnect", error_str(rc))		def on_connect(client, userdata, flags, response_code):	    global connflag	    connflag = True	    print("Connected with status: {0}".format(response_code))		def on_publish(client, userdata, mid):	    print("User data: {0} -- mid: {1}".format(userdata, mid))	    #client.disconnect()		if __name__ == "__main__":		    client = mqtt.Client("projects/{}/locations/{}/registries/{}/devices/{}".format(	                         project_id,	                         cloud_region,	                         registry_id,	                         device_id))		    client.username_pw_set(username='unused',	                           password=jwt_maker.create_jwt(project_id,	                                               private_key,	                                               algorithm="RS256"))		    client.tls_set(root_ca,	                   certfile = public_crt,	                   keyfile = private_key,	                   cert_reqs = ssl.CERT_REQUIRED,	                   tls_version = ssl.PROTOCOL_TLSv1_2,	                   ciphers = None)		    client.on_connect = on_connect	    client.on_publish = on_publish	    client.on_disconnect = on_disconnect		    print("Connecting to Google IoT Broker...")	    client.connect(mqtt_url, mqtt_port, keepalive=60)	    client.loop_start() 		    while True:	        sleep(0.5)	        print connflag	        if connflag == True:	            print("Publishing...")	            ap_measurement = random.uniform(25.0, 150.0)	            #payload = "sm1/sm1-payload-{}".format(ap_measurement)	            res = client.publish(mqtt_topic, ap_measurement, qos=1)	            if not res.is_published():	               print("Data not published!!")	            else:	               print("ActivePower published: %.2f" % ap_measurement)	        else:	            print("Waiting for connection...")	</code></pre>		<p>When I run, the client connect but does not publish. At Google IoT Console, I can see the following error message:</p>		<blockquote>	  <p>Invalid MQTT publish topic: projects/my_project/topics/sm1</p>	</blockquote>		<p>And here is the output:</p>		<blockquote>	  <p>Connecting to Google IoT Broker...<br>	  Connected with status: 0  --  msg: Connection Accepted.<br>	  True<br>	  Publishing...<br>	  Data not published!!<br>	  ('on_disconnect', 'Some error occurred. 1: Out of memory.')</p>	</blockquote>		<p>It is really strange, because the topic is there, created, and have a subscription associated to it!</p>		<p>Any help will be appreciated. I already read the following documentation and code:</p>		<ul>	<li><a href="https://cloud.google.com/iot/docs/how-tos/mqtt-bridge#iot-core-mqtt-auth-run-python" rel="nofollow noreferrer">https://cloud.google.com/iot/docs/how-tos/mqtt-bridge#iot-core-mqtt-auth-run-python</a></li>	<li><a href="https://github.com/GoogleCloudPlatform/python-docs-samples/blob/master/iot/api-client/mqtt_example/cloudiot_mqtt_example.py" rel="nofollow noreferrer">https://github.com/GoogleCloudPlatform/python-docs-samples/blob/master/iot/api-client/mqtt_example/cloudiot_mqtt_example.py</a></li>	</ul>	"
49907529,49931950,49907529,2,5,Fri Apr 20 00:03:00 EDT 2018,609290,"<p>You have the incorrect topic name.</p>		<p>It's confusing (I just hit this too).</p>		<p>The client ID (as you have) must be:</p>		<pre><code>"projects/{}/locations/{}/registries/{}/devices/{}".format(	  project_id,	  cloud_region,	  registry_id,	  device_id	)	</code></pre>		<p>The topics must then be of the form:</p>		<pre><code>/devices/{}/config	/devices/{}/state	/devices/{}/events	/devices/{}/events/some/other/topic	</code></pre>		<p>As stated in the comment of @ptone:  </p>		<blockquote>	  <p>In cloud iot core, MQTT topics are many-to-one with Cloud PubSub topics. For security - devices may only publish to MQTT topics prefixed with their device namespace. You can then match <a href="https://cloud.google.com/iot/docs/how-tos/devices#creating_a_device_registry_with_multiple_pubsub_topics" rel="nofollow noreferrer">sub-topics to other Cloud PubSub topics as noted here</a>, but only up to 10. This is not designed to allow a 1:1 mapping device to PubSub Topic.</p>	</blockquote>		<p>Hope that helps!</p>	"
49907529,86984994,49931950,3,0,Mon Apr 23 15:07:00 EDT 2018,1930814,"Thank you by your comment, @ptone . It is clearer now (together with the comments of DazWilkin). I think the IoT Core documentation could be improved with some explanation related to this."
49907529,86882881,49931950,3,0,Fri Apr 20 03:49:00 EDT 2018,609290,"Yes, you may publish to multiple Pub/Sub topics using subfolders, explained here: https://cloud.google.com/iot/docs/how-tos/mqtt-bridge#publishing_telemetry_events_to_multiple_pubsub_topics"
49907529,86883000,49931950,3,0,Fri Apr 20 03:55:00 EDT 2018,1930814,"It is not what I want. As I said, I want use my own topics not related to "events". This link you informed just tell how to work with "subfolders", like "events/sub1", "events/sub2", etc. I want to use the topic created at console, named sm1, whose address is /projects/my_project/topics/sm1. If you can also help with the subscribe problem, [here I have another question](https://stackoverflow.com/questions/49638010/google-iot-right-mode-to-receive-notifications-subscribe-working)"
49907529,86883002,49931950,3,0,Fri Apr 20 03:55:00 EDT 2018,609290,"In Python, you define a callback that's called when your device receives a message on any of its subscriptions. See Google's example. The callback function is defined here: https://github.com/GoogleCloudPlatform/python-docs-samples/blob/19f7f65c7badc37e23ad9f0663da8bd78823a1d7/iot/api-client/mqtt_example/cloudiot_mqtt_example.py#L114. It's added to the client in the same file at line #150 and the subscription (for the default topic /config) is created in the same file at line #159. Hope that helps!"
49907529,86883059,49931950,3,0,Fri Apr 20 03:59:00 EDT 2018,1930814,"Also, as referenced in my question, I already saw this mqtt example from google (I think almost 10 times) and still it is not what I want. Unfortunately."
49907529,86883069,49931950,3,1,Fri Apr 20 03:59:00 EDT 2018,609290,"You cannot (currently) use arbitrary topic names. You must follow the /events/... subfolder mechanism. I'll check with the Engineering team tomorrow and see whether there's a feature request filed for your need. Why are you unable to map /events/... ?"
49907529,86883180,49931950,3,0,Fri Apr 20 04:06:00 EDT 2018,609290,"In the code above, I don't see an (a) on_message handler defined, (b) the client being configured with it; (c) nor the subscription itself. All 3 need to be provided for a subscription to be effected."
49907529,86883181,49931950,3,0,Fri Apr 20 04:06:00 EDT 2018,1930814,"Now I have a good answer: "it is not possible, yet". In this case, I do not know why we create those pub/sub topics in the IoT Core, if they are not accessible by devices through MQTT/HTPP. I think this is good feature to have, since the MQTT protocol works this way. For example, AWS IoT, for example, allow developers create general topics in a way devices can publish and subscribe to those specific ones."
49907529,86883221,49931950,3,0,Fri Apr 20 04:09:00 EDT 2018,1930814,"It is because I have two scripts, one for subscribe and another for publish. The problem with the subscribe one is here: https://stackoverflow.com/questions/49638010/google-iot-right-mode-to-receive-notifications-subscribe-working (as mentioned some comments before)."
49907529,86883264,49931950,3,0,Fri Apr 20 04:11:00 EDT 2018,1930814,"Could you please complete your answer here, informing about not being possible do what I wanted with the topics, for now? In this case, I will mark it as the answer."
49907529,86883362,49931950,3,1,Fri Apr 20 04:19:00 EDT 2018,609290,"I'll update it once I've confirm my answer with Engineering."
49907529,86906166,49931950,3,1,Fri Apr 20 15:23:00 EDT 2018,76199,"In cloud iot core, MQTT topics are many-to-one with Cloud PubSub topics.  For security - devices may only publish to MQTT topics prefixed with their device namespace. You can then match sub-topics to other Cloud PubSub topics as noted here: https://cloud.google.com/iot/docs/how-tos/devices#creating_a_device_registry_with_multiple_pubsub_topics , but only up to 10. This is not designed to allow a 1:1 mapping device to PubSub Topic."
49907529,86882333,49931950,3,0,Fri Apr 20 03:12:00 EDT 2018,1930814,"Hello, Daz. But what happen with the topics we create at Google Core IoT console? I would like to publish and subscribe to my own topics, different from those "standadards" (events, config or state). If just these three are possible, I think the Google IoT is too restricted/limited. Agree? By the way, do you know how to correctly subscribe to one of these topics? I have no success with this task."
49907529,50663341,49907529,2,0,Sun Jun 03 04:35:00 EDT 2018,3831845,"<p>My python code works when I change the <code>mqtt_topic</code> from <code>events</code> to <code>state</code>. In this example, I am trying to upload the current temperature and humidity from my  device to Google IoT Core.</p>		<pre><code>  ...	  data =  {'temp': temperature, 'humid': humidity}	  device_id = 'freedgePrototype'	  topic = 'state'		  mqtt_topic = '/devices/{}/{}'.format(device_id, topic)	  payload = json.dumps(data)	  print('Publishing message  {}'.format(payload))		  client.publish(mqtt_topic, payload, qos=1)	</code></pre>		<p>And the result would look like this.</p>		<p><a href="https://i.stack.imgur.com/FyTkh.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/FyTkh.png" alt="enter image description here"></a></p>	"
49907529,92946269,50663341,3,0,Sat Oct 27 12:41:00 EDT 2018,3877016,"Can you see your `events` topic messages aswell ?"
