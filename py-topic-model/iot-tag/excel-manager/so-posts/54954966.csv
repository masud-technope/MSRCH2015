thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
54954966,54954966,null,1,0,Sat Mar 02 03:33:00 EST 2019,1427316,"<p>I have a basic question about key rotation for IoT devices.</p>		<p>We are planning on using a secure element (<a href="https://www.microchip.com/design-centers/security-ics/cryptoauthentication/cloud-authentication/google-iot-core-atecc608a" rel="nofollow noreferrer">example</a>) to generate the key pairs. The key pairs are therefore generated on the chip, on the IoT device.</p>		<p>After the public key is initially uploaded to Google IoT, how can key rotation be performed?</p>		<p>Using an existing private key, the device can sign a JWT and authenticate itself to Google IoT. After generating a new key pair in the device, can the JWT also be used to authenticate uploading the new public key to the registry?</p>		<p>Please share any examples of key rotation for this type of platform. Thanks!</p>	"
54954966,96689855,54954966,3,0,Sun Mar 03 00:58:00 EST 2019,1427316,"Thanks for your comment, here is some of the places I checked: on the Google IoT website [here](https://cloud.google.com/iot/docs/concepts/device-security#key_rotation), there is only a short paragraph that states that key rotation is a good idea. On the microchip website [here](https://www.microchip.com/design-centers/security-ics/cryptoauthentication/cloud-authentication/google-iot-core-atecc608a) there are two information videos. Both discuss the process of initially authenticating the device, but do not discuss key rotation with a secure element."
54954966,96684782,54954966,3,0,Sat Mar 02 18:59:00 EST 2019,2318649,"I would look first to Microchip because they probably have application notes about doing this with their chip. Or what other research have you done?"
54954966,54985437,54954966,2,3,Mon Mar 04 14:36:00 EST 2019,982885,"<p>From <a href="https://cloud.google.com/blog/products/gcp/securing-cloud-connected-devices-with-cloud-iot-and-microchip" rel="nofollow noreferrer">Google Cloud IoT Core + ATECC608 documentation</a>: </p>		<blockquote>	  <p>For example, the private key is generated by the secure element	  itself, not an external party (CA). The chip uses a random number	  generator to create the key, making it virtually impossible to derive.	  The private key never leaves the chip, ever. Using the private key,	  the chip will be able to generate a public key that can be signed by	  the chosen CA of the company.</p>	  	  <p>Microchip performs this signature in a dedicated secure facility in	  the US, where an isolated plant will store the customer’s intermediate	  CA keys in a highly secure server plugged into the manufacturing line.	  The key pairs and certificates are all generated in this line in a	  regulatory environment which allows auditing and a high level of	  encryption.</p>	  	  <p>Once the secure elements have each generated their key pairs, the	  corresponding public keys are sent to the customer’s Google Cloud	  account and stored securely in the Cloud IoT Core device manager.</p>	</blockquote>		<p>So the key-pair is fixed for a given secure element chip. While GCP IoT Core allows for up to 3 public keys per IoT device, you would have to physically replace the secure element chip to get a new key pair to <em>rotate keys</em>. </p>		<p>The idea of the secure element is that the private key <em>can't</em> be compromised so doesn't need rotating (read: can't rotate). While rotating keys is commonly recommended, the ability to rotate keys inherently introduces a vulnerability-- a bad actor could theoretically rotate in a new key of their choosing to gain control of the system, since the mechanism exists to replace the key. If no mechanism exists, then that is not a vector for hacking. There is a <a href="https://cryptotronix.com/2017/11/29/initial-thoughts-on-microchips-new-atecc608a/" rel="nofollow noreferrer">review of this behavior</a> which you can read for further info.</p>		<p>The most common use case for this, in my experience, is where you have a device in the field, and you replace the "main board" that includes the secure element. You could add the public key of the new secure element that was shipped as a replacement into IoT Core so that when the "main board" is replaced, the new key pair is already registered and the device can automatically pull state and config information from IoT core. As long as the device was syncing config and state information with IoT Core, the new "main board" can then <em>become</em> the <em>same</em> device, but with a new "brain" and new key pair.  </p>		<p>The JWT is generated based on the keys, but by design, the JWT has a short life (<a href="https://cloud.google.com/iot/docs/how-tos/credentials/jwts" rel="nofollow noreferrer">default 1 hour</a> with a maximum of 24 hours). So new JWTs will be generated based on the same keys. </p>	"
54954966,96736031,54985437,3,1,Mon Mar 04 18:17:00 EST 2019,1427316,"Thanks for your great answer and refs! Key rotation + secure element didn't sound right, but were both listed as suggestions for improved security in Google's sites"
