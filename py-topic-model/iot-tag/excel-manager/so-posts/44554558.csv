thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44554558,44554558,null,1,1,Wed Jun 14 20:53:00 EDT 2017,348202,"<p>I'd like to use Yoctopuce's Virtualhub rest api to get data from the sensors data loggers. The sensor manuals mention how to get the data, but not how to interpret it. I've been trying to make sense from it, but I can't get something 100% conclusive.</p>		<p>Underneath an example of how far I got. Maybe somebody in here sees where I'm wrong. Or maybe somebody already went through the effort.</p>		<hr>		<p>My example is the light sensor. I've cleared the datalogger's data and started logging once a minute. The value is a number measured in Lux.</p>		<p>First we need the summary data from the data logger. This is done by calling <strong><a href="http://hub:4444/bySerial/LIGHTMK1-2ABABA/dataLogger.json" rel="nofollow noreferrer">http://hub:4444/bySerial/LIGHTMK1-2ABABA/dataLogger.json</a></strong>. Which yields a json document as below:</p>		<pre><code>[{"id":"lightSensor","unit":"lx","calib":"0,","cal":"*","streams":	[{"run":0,"utc":1497384000,"dur":1380,"freq":"1/m","val":[0,11,15]}	,{"run":1,"utc":1497384360,"dur":1800,"freq":"1/m","val":[13,15,16]}	,{"run":2,"utc":1497387000,"dur":600,"freq":"1/m","val":[14,16,17]}	,{"run":2,"utc":1497387600,"dur":3600,"freq":"1/m","val":[0,1,18]}	,{"run":2,"utc":1497391200,"dur":3600,"freq":"1/m","val":[0,0,0]}	,{"run":2,"utc":1497394800,"dur":3600,"freq":"1/m","val":[0,0,0]}	,{"run":2,"utc":1497398400,"dur":3600,"freq":"1/m","val":[0,0,0]}	,{"run":2,"utc":1497402000,"dur":3600,"freq":"1/m","val":[0,0,0]}	,{"run":2,"utc":1497405600,"dur":3600,"freq":"1/m","val":[0,0,0]}	,{"run":2,"utc":1497409200,"dur":3600,"freq":"1/m","val":[0,1,12]}	,{"run":2,"utc":1497412800,"dur":3600,"freq":"1/m","val":[0,1,2]}	,{"run":2,"utc":1497416400,"dur":3600,"freq":"1/m","val":[2,10,18]}	,{"run":2,"utc":1497420000,"dur":780,"freq":"1/m","val":[17,17,19]}	...etc...	]}]	</code></pre>		<p>The first line is pretty obvious - the name of the sensor (lightSensor) and the symbol for its unit of measure (lx). The <strong>streams</strong> seem to be holding the data. Unfortunately I haven't been able to find out what streams represent. Neither what the <strong>run</strong> number represents. Elements are being added while time passes. For the remainder I presume <strong>utc</strong> stands for the start utc time stamp of the data. Duration in seconds for <strong>dur</strong>; which is confirmed in a later stage. And <strong>freq</strong> is indeed once a minute. The property <strong>val</strong> seem to represent a summarized min/avg/max triplet.</p>		<p>Next, the detail can be requested by providing the name of the sensor and one of the exact utc values. For example calling <strong><a href="http://hub:4444/bySerial/LIGHTMK1-2ABABA/dataLogger.json?id=lightSensor&amp;utc=1497387000" rel="nofollow noreferrer">http://hub:4444/bySerial/LIGHTMK1-2ABABA/dataLogger.json?id=lightSensor&amp;utc=1497387000</a></strong> yields the json document</p>		<pre><code>[[16,16,16]	,[16,16,16]	,[15,16,16]	,[14,15,15]	,[14,15,15]	,[14,15,15]	,[15,16,17]	,[14,17,17]	,[17,17,17]	,[16,17,17]	]	</code></pre>		<p>At first sight this is an array of min/avg/max triplets. Which confirms the assumption <strong>dur</strong> represents a duration in seconds. Because there are 10 elements, one for each minute. Which represents 600 seconds.</p>		<p>I assume therefor each triplet time stamp is the utc value + (index * 60). This all seems to make sense. To the exception of time overlaps.</p>		<p>The first summary element starts at utc 1497384000 and lasts 1380 seconds. Which would mean the next element should start at utc 1497385380. However, it starts at utc 1497384360. Which is an <em>earlier</em> time stamp ! There is an overlap of 1020 seconds. In fact, when the run number is incremented, there always seem to be an overlap.   </p>		<p>I was hoping for the overlapping values to be identical. Which they aren't. They are in fact pretty different. So I can not ignore them.</p>		<p>This all puts a doubt on how to interpret the data. Should all the triplets be considered ? Should the overlapping be overwritten by the values of the next elements ? Or the inverse ? Maybe they should be summed ?</p>		<p>The problem is that I can't find a way to interpret the data that makes sense beyond reasonable doubt. </p>	"
44554558,44559429,44554558,2,0,Thu Jun 15 05:43:00 EDT 2017,1794204,"<p>The "run number" is automatically incremented when the sensor is disconnected (powered off) and reconnected, when the next measure would not fit naturally in the current stream. Typically, if the time when the sensor is reconnected appears to be earlier than the last measure in the last stream, a new stream is done to reflect this inconsistency.</p>		<p>The question is, why do you get these timestamp mismatch... Since the tiny USB light sensor does not have a built-in clock, it get the USB timestamp during USB negotiation from the host (the PC). So if you connect the sensors to two different PC with different time settings (different time or different timezone), you might get that type of issue. Another possible cause would be if the PC clock is currently being adjusted by NTP, which could cause the sensor clock to go at a different rate from the PC. But this is not very likely given the huge difference... </p>		<p>If you can reproduce the problem easily, and since the overlap is quite big, the best is probably to display the clock on your PC, connect the sensor, take note of the time the sensor was connected, disconnect it after 20 minutes or so, take note of the time, reconnect it and see if the problem appears again. Download all REST data and decode the utc timestamps to check what value is correct and what value is wrong.</p>		<p>You can follow up this discussion directly with support@yoctopuce.com</p>	"
44554558,76132212,44559429,3,0,Thu Jun 15 15:42:00 EDT 2017,348202,"I'll do that ! But basically you're telling me I can overwrite the values of earlier runs by the overlapping values from the later run ?"
