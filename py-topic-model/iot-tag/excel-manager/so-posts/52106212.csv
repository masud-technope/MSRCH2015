thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
52106212,52106212,null,1,1,Thu Aug 30 22:34:00 EDT 2018,2459438,"<p>I’m planning my IoT system and comparing Akka.NET with Orleans. Generally Orleans API is more close to .NET standards but I’m wondering is there any other way to communicate with Grain? In documentation I see that we define interface like</p>		<pre><code>public interface IDevice : IGrainWithGuidKey	{	  Task TurnOn(TurnOnCommand command);	  Task TurnOff(TurnOffCommand command);	}	</code></pre>		<p>And use it like this</p>		<pre><code>IDevice device = GrainFactory.GetGrain&lt;IDevice&gt;(id);	</code></pre>		<p>This is fine when we have actors that have very strict interface but in home we have a lot of devices and I don’t want to define 100x interfaces for each of them. I would prefer to each of them have set of handlers for commands that it can handle and client could invoke</p>		<pre><code>device.Execute(new TurnOnCommand()) 	</code></pre>		<p>without defining interface for each. Is this possible in Orleans?</p>	"
52106212,52114377,52106212,2,2,Fri Aug 31 11:20:00 EDT 2018,635314,"<p>You can define an interface which accepts a base class/interface, such as <code>ICommandProcessor&lt;TCommand&gt;</code> and implement multiple versions of that, so you might have <code>IMyDeviceGrain</code> implementing <code>ICommandProcessor&lt;TurnOnCommand&gt;, ICommandProcessor&lt;TurnOffCommand&gt;</code>, and so on.</p>		<p>In that case, you might define <code>ICommandProcessor&lt;TCommand&gt;</code> as:</p>		<pre><code>public interface ICommandProcessor&lt;TCommand&gt;	{	    Task Process(TCommand command);   	}	</code></pre>		<p>The grain interface might look like:</p>		<pre><code>public class IDeviceGrain :	  IGrainWithStringKey,	  ICommandProcessor&lt;TurnOnCommand&gt;,	  ICommandProcessor&lt;TurnOffCommand&gt;	{	}	</code></pre>		<p>The grain class could then look like:</p>		<pre><code>public class DeviceGrain : Grain, IDeviceGrain	{	    Task Process(TurnOnCommand command) { /* turn on */ }	    Task Process(TurnOffCommand command) { /* turn off */ }	}	</code></pre>		<p>I've also seen people implement this by having a grain which has a single <code>Task Process(object command)</code> call which internally used <code>dynamic</code> to dispatch based on the type of <code>command</code>.</p>		<p>I hope that helps. Please let me know if there are any points which you would like clarified.</p>	"
52106212,91209599,52114377,3,0,Sat Sep 01 15:36:00 EDT 2018,2459438,"I also thought about this for a second but this has some drawback. There are many devices and one have one command and other 20 – with the second class declaration would be big. The second thins is that I will have to define separate interface for different kind of functionality set – device with SetVolumeCommand will have separate interface. With many devices it will be interface hell. I can of course build one Command as input and have big if statement that will route it to internal handlers but writing this router code is something I would not do ;("
52106212,91374409,52114377,3,0,Thu Sep 06 21:39:00 EDT 2018,2459438,"After some thinking I think I will go with generating proxy class with Roslyn that will generate all boilerplate code during build time with https://github.com/AArnott/CodeGeneration.Roslyn"
52106212,91374476,52114377,3,0,Thu Sep 06 21:43:00 EDT 2018,635314,"What will be the input to the code generator? If you have an interface, then Orleans can generate the code for you. If you want to reach out and discuss it some more, you can contact me on Gitter https://gitter.im/ReubenBond or in the Orleans channel https://gitter.im/dotnet/orleans"
52106212,91221685,52114377,3,0,Sun Sep 02 10:13:00 EDT 2018,635314,"In your case, @dnf, you can use a more generic kind of method to receive the commands. Eg, it could take a CommandId (which might be a string) and some command arguments (which could be an array of strings or objects). Then you can have a dictionary in your grain to map from CommandId to actual command (which could be expressed as a delegate)"
