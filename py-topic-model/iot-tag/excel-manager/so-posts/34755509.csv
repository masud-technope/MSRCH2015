thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
34755509,34755509,null,1,3,Tue Jan 12 23:08:00 EST 2016,1153562,"<p>I am trying to read the events that my device is sending. I am using azure npm lib to read the what i think is right.</p>		<p>Ok so first, under my Azure ioT Hub account for that service there is a tab call Messaging. There is something called "Event Hub-compatible name" and "Event Hub-compativle endpoint". Do i have to create a new Event hub with the name of "Event Hub-compatible name" or what? I am a bit confused :D	If not what is the connection string and topic and so on?</p>		<p>Here is how the code is now...</p>		<pre><code>var azure = require('azure');		var serviceBusService = azure.createServiceBusService("Endpoint=XXXXXXXXXX.servicebus.windows.net/");	var isWaiting = false;			function waitForMessages(){	    console.log("Checking Queue...");	    isWaiting = true;	    serviceBusService.receiveQueueMessage("messages","events",function (error, receivedMessage){	        console.log(error);	        console.log(receivedMessage);	        isWaiting = false;	    });	}			// Start messages listener	setInterval(function () {	    if(!isWaiting){	        waitForMessages();	    }	}, 200);	</code></pre>	"
34755509,34760199,34755509,2,3,Wed Jan 13 06:55:00 EST 2016,4989676,"<p>The <strong><code>Event Hub-compatible name</code></strong> does <em>not</em> mean that you have to create a Event Hub with the same name.</p>		<p>IOT Hub provides an endpoint that is backward compatible with Event Hub API. I think the actual implementation is a little more complex, but you can think of IOT Hub as inheriting from or at least an implementation of Event Hubs. Use this Event Hub compatible name with any Event Hub SDKs or code examples as part of the connection string. </p>		<p>For explaining the concepts of <strong><code>Event Hub-compatible name</code></strong> &amp; <strong><code>Event Hub-compatible endpoint</code></strong>, you can refer to the section <code>How to read from Event Hubs-compatible endpoints</code> of the offical doc <a href="https://azure.microsoft.com/en-us/documentation/articles/iot-hub-devguide/" rel="nofollow noreferrer">Azure IoT Hub developer guide</a>. You can use the <a href="https://www.nuget.org/packages/WindowsAzure.ServiceBus" rel="nofollow noreferrer"><code>Azure Service Bus SDK for .NET</code></a> or the <a href="http://blogs.msdn.com/b/servicebus/archive/2015/01/16/event-processor-host-best-practices-part-1.aspx" rel="nofollow noreferrer"><code>Event Hubs - Event Processor Host</code></a> to read events from IoT Hub in C#.</p>		<p>Otherwise, there are two <a href="https://github.com/Azure/azure-iot-sdks" rel="nofollow noreferrer">Azure IoT SDKs</a> for NodeJS using <strong><code>connection string</code></strong>: <a href="https://github.com/Azure/azure-iot-sdks/tree/master/node/service" rel="nofollow noreferrer"><code>Azure IoT Service SDK</code></a> (<a href="http://azure.github.io/azure-iot-sdks/node/api_reference/azure-iothub/1.0.0-preview.9/index.html" rel="nofollow noreferrer">API Reference</a>) &amp; <a href="https://github.com/Azure/azure-iot-sdks/tree/master/node/device" rel="nofollow noreferrer"><code>Azure IoT Device SDK</code></a> (<a href="http://azure.github.io/azure-iot-sdks/node/api_reference/azure-iot-device/1.0.0-preview.9/index.html" rel="nofollow noreferrer">API Reference</a>).</p>		<p>The <strong><code>connection string</code></strong> that you can find it at the one policy of the tab <code>Shared Access Policies</code> in the <code>All settings</code>, please see the pic below from the doc <a href="https://azure.microsoft.com/en-us/documentation/articles/iot-hub-csharp-csharp-getstarted/#create-an-iot-hub" rel="nofollow noreferrer"><code>Tutorial: Get started with Azure IoT Hub</code></a>.</p>		<p><a href="https://i.stack.imgur.com/LOVAO.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/LOVAO.png" alt="enter image description here"></a></p>		<p>According to your needs for reading events from IoT Hub, you can follow these samples to code using Azure IoT SDKs for NodeJS.</p>		<ol>	<li>Using <code>Azure IoT Service SDK</code> to list the deviceIds registed in your IoT Hub, please see the sample <a href="https://github.com/Azure/azure-iot-sdks/blob/master/node/service/samples/registry_sample.js" rel="nofollow noreferrer">https://github.com/Azure/azure-iot-sdks/blob/master/node/service/samples/registry_sample.js</a>.</li>	<li>Using <code>Azure IoT Device SDK</code> to monitor events from IoT Hub, please see the sample <a href="https://github.com/Azure/azure-iot-sdks/blob/master/node/device/samples/remote_monitoring.js" rel="nofollow noreferrer">https://github.com/Azure/azure-iot-sdks/blob/master/node/device/samples/remote_monitoring.js</a>.</li>	</ol>		<p>Hope it helps. Any concern, please feel free to let me know.</p>	"
34755509,36412972,34755509,2,2,Mon Apr 04 21:13:00 EDT 2016,6051924,"<p>You can use the Event Hubs SDK for Node.js to see events/messages sent by your device to your IoT Hub: </p>		<p><a href="https://www.npmjs.com/package/azure-event-hubs" rel="nofollow">https://www.npmjs.com/package/azure-event-hubs</a></p>		<p>The client object of the event hubs SDK can accept an IoT Hub connection string, so you don't need to use the Event Hubs connection string.</p>		<p>If you're just trying to debug your device and want to verify that it's actually sending messages, you can use the tool called iothub-explorer provided with the Azure IoT Hub SDK:</p>		<p><a href="https://github.com/Azure/azure-iot-sdks/tree/master/tools/iothub-explorer" rel="nofollow">https://github.com/Azure/azure-iot-sdks/tree/master/tools/iothub-explorer</a></p>		<p>Also a couple of clarifications regarding the previous answer: the Service SDK allows to send messages to devices, and to read the "feedback" message that the device sends, which is used to know if the device accepted or rejected the command message but contains no data. It doesn't help to read data events sent by the device.</p>	"
34755509,80379272,36412972,3,1,Thu Oct 12 18:25:00 EDT 2017,6051924,"Sounds a lot like a separate question. I can help with iot stuff but this is a little bit out of my competencies sorry :-/"
34755509,80357472,36412972,3,0,Thu Oct 12 08:56:00 EDT 2017,1747250,"it seems like you know what you are talking about. Can you help me understand something? - I need to have my backed web app register an event somewhere (example: new post created) and than I need some azure "service" to send a message regarding that event to all clients currently online (via web browsers) - something like websockets. I cannot figure out Event Hub, Service Bus ... and all azure related terminology. Started using azure hosting few weeks ago. Thanks."
34755509,37985792,34755509,2,1,Thu Jun 23 08:13:00 EDT 2016,6489903,"<p>Connect to the IoT Hub to receiving the data:</p>		<pre><code>var protocol = 'amqps';	var eventHubHost = '{your event hub-compatible namespace}';	var sasName = 'iothubowner';	var sasKey = '{your iot hub key}';	var eventHubName = '{your event hub-compatible name}';	var numPartitions = 2;	</code></pre>		<p>Protocol  </p>		<pre><code>var protocol = 'amqps';	</code></pre>		<p>It is the Event Hub-compatible endpoint: sb://abcdefnamespace.servicebus.windows.net/	but without the sb:// and .service windows.net/</p>		<p>Like that: abcdefnamespace</p>		<pre><code>var eventHubHost = '{your event hub-compatible namespace}';	</code></pre>		<p>Its so OK</p>		<pre><code>var sasName = 'iothubowner';	</code></pre>		<p>Primary key, like this: 83wSUdsSdl6iFM4huqiLGFPVI27J2AlAkdCCNvQ==</p>		<pre><code>var sasKey = '{your iot hub key}';	</code></pre>		<p>Name like this: iothub-ehub-testsss-12922-ds333s	    var eventHubName = '{your event hub-compatible name}';</p>		<p>Its so OK</p>		<pre><code>var numPartitions = 2;	</code></pre>	"
