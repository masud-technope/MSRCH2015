thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
51437354,51437354,null,1,1,Fri Jul 20 07:32:00 EDT 2018,6232850,"<p>Is it possible to create new devices on Azure IoT Hub programatically with .NET? With all tutorial on microsoft.docs the devices are created via Azure Portal or Azure CLI. </p>		<p>Could you kindly provide some interesting links if you have? Thank you in advance.</p>	"
51437354,89846093,51437354,3,0,Fri Jul 20 08:19:00 EDT 2018,4148708,"It's in `RegistryManager`, `AddDeviceAsync()`, see [this](https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.devices.registrymanager.adddeviceasync?view=azure-dotnet#Microsoft_Azure_Devices_RegistryManager_AddDeviceAsync_Microsoft_Azure_Devices_Device_)."
51437354,51442773,51437354,2,1,Fri Jul 20 12:40:00 EDT 2018,8084828,"<p>also, you can use an <a href="https://docs.microsoft.com/en-us/rest/api/iothub/" rel="nofollow noreferrer">IoT Hub REST APIs</a></p>		<ul>	<li><p>the following is an implementation of the <a href="https://docs.microsoft.com/en-us/rest/api/iothub/service/createorupdatedevice" rel="nofollow noreferrer">Create Or Update Device</a>:</p>		<pre><code>    string connectionString = "&lt;yourIoTHubConnectionString&gt;";	    string deviceId = "&lt;yourDeviceId&gt;";		    string iothubName = SharedAccessSignatureBuilder.GetHostNameNamespaceFromConnectionString(connectionString);	    string sasToken = SharedAccessSignatureBuilder.GetSASTokenFromConnectionString(connectionString);	    string requestUri = $"https://{iothubName}.azure-devices.net/devices/{deviceId}?api-version=2018-06-30";		    var httpclient = new HttpClient();	    httpclient.DefaultRequestHeaders.Add("Authorization", sasToken);		    var hrm = httpclient.PutAsJsonAsync(requestUri, new { deviceId = deviceId }).Result;	    hrm.EnsureSuccessStatusCode();	    string response = hrm.Content.ReadAsStringAsync().Result;            	</code></pre></li>	</ul>		<p>where a SharedAccessSignatureBuilder is a helper static class:</p>		<pre><code>public sealed class SharedAccessSignatureBuilder	{ 	    public static string GetHostNameNamespaceFromConnectionString(string connectionString)	    {	        return GetPartsFromConnectionString(connectionString)["HostName"].Split('.').FirstOrDefault();	    }	    public static string GetSASTokenFromConnectionString(string connectionString, uint hours = 24)	    {	        var parts = GetPartsFromConnectionString(connectionString);	        return GetSASToken(parts["HostName"], parts["SharedAccessKey"], parts["SharedAccessKeyName"], hours);	    }	    public static string GetSASToken(string resourceUri, string key, string keyName = null, uint hours = 24)	    {	        var expiry = GetExpiry(hours);	        string stringToSign = System.Web.HttpUtility.UrlEncode(resourceUri) + "\n" + expiry;	        HMACSHA256 hmac = new HMACSHA256(Convert.FromBase64String(key));		        var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));	        var sasToken = String.Format(CultureInfo.InvariantCulture, "SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}", HttpUtility.UrlEncode(resourceUri), HttpUtility.UrlEncode(signature), expiry);	        if(!string.IsNullOrEmpty(keyName))	            sasToken += String.Format(CultureInfo.InvariantCulture, "&amp;skn={0}", keyName); 		        return sasToken;	    }		    private static Dictionary&lt;string, string&gt; GetPartsFromConnectionString(string connectionString)	    {	        return connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries).Select(s =&gt; s.Split(new[] { '=' }, 2)).ToDictionary(x =&gt; x[0].Trim(), x =&gt; x[1].Trim());	    }		    // default expiring = 24 hours	    private static string GetExpiry(uint hours = 24)	    {	        TimeSpan sinceEpoch = DateTime.UtcNow - new DateTime(1970, 1, 1);	        return Convert.ToString((int)sinceEpoch.TotalSeconds + 3600 * hours);	    }	}	</code></pre>	"
51437354,51438229,51437354,2,3,Fri Jul 20 08:26:00 EDT 2018,6601582,"<p>There is a tutorial for <a href="https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/iot-hub-get-started-create-device-identity-csharp.md" rel="nofollow noreferrer">creating a device identity</a> you can follow.</p>		<p>The related API is <code>registryManager.AddDeviceAsync</code>. </p>		<pre><code>    RegistryManager manager = RegistryManager.CreateFromConnectionString(connectionString);		    await manager.AddDeviceAsync(new Device(deviceID));	</code></pre>		<p>You can find the <a href="https://github.com/Azure/azure-iot-sdk-csharp/blob/master/iothub/service/samples/ConsoleSample/Program.cs" rel="nofollow noreferrer">C# code sample</a> at Azure IoT SDK C# repo on GitHub.</p>	"
