thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
49161714,49161714,null,1,0,Wed Mar 07 21:43:00 EST 2018,1201747,"<p>I'm trying to use Pimoroni Speaker PHAT (<a href="https://shop.pimoroni.com/products/speaker-phat" rel="nofollow noreferrer">https://shop.pimoroni.com/products/speaker-phat</a>) in android things on Raspberrypi. I saw from the data sheet, that the DAC(MAX98357A) uses I2S Protocol. I tried to initialize the DAC(MAX98357A) through I2C communication since I2S Device references has been removed in the latest developer preview versions. when i debug, i cannot see any activity on the DAC. I have already looked at AIY-VoiceHAT driver from github, but it did not help me. Is it correct to initialize an I2S protocol thro I2C.. or do we need to configure it differently.	Kindly help me out in pointing right direction on how to use it.	Looking forward to hear from you soon. Thanks in advance.</p>		<p>-Suresh</p>	"
49161714,49166741,49161714,2,1,Thu Mar 08 06:27:00 EST 2018,1491707,"<p>I've done a great deal of API design specifically around the MAX98357A driver for Android Things, so I'll try to point you in the right direction.</p>		<p>The <a href="https://github.com/androidthings/contrib-drivers/tree/master/voicehat" rel="nofollow noreferrer">Voicehat</a> is a good place to start. The DAC uses I2S to send audio data back and forth but also uses GPIO in order to control parts of it.</p>		<p>As shown in <a href="https://github.com/androidthings/contrib-drivers/blob/master/voicehat/src/main/java/com/google/android/things/contrib/driver/voicehat/Max98357A.java" rel="nofollow noreferrer">the code</a> there are two GPIO: The <code>GAIN_SLOT</code> and <code>SD_MODE</code>. On the VoiceHat, the <code>GAIN_SLOT</code> pin is not connected.</p>		<p>The <code>SD_MODE</code> slot is critical. It indicates whether the audio chip should be enabled (true) or disabled (false). If you don't change this value, it could explain why there's no audio output.</p>		<p><a href="https://en.wikipedia.org/wiki/I%C2%B2S" rel="nofollow noreferrer">I2S</a> is fundamentally different from <a href="https://en.wikipedia.org/wiki/I%C2%B2C" rel="nofollow noreferrer">I2C</a> despite having similar names. The direct access to I2S APIs have been removed from the platform in recent builds, but it is still accessible through audio routing.</p>		<p>In Android Things, you can play an audio file very easily with an <code>AudioTrack</code>. However, playing that audio will just output it to the default audio output. What you can do is set the preferred audio device. In the <a href="https://github.com/androidthings/sample-googleassistant#audio-configuration" rel="nofollow noreferrer">Google Assistant sample</a>, there is code that finds the <code>BUS</code> type which corresponds to I2S.</p>		<pre><code>private AudioDeviceInfo findAudioDevice(int deviceFlag, int deviceType) {	    AudioManager manager = (AudioManager) this.getSystemService(Context.AUDIO_SERVICE);	    AudioDeviceInfo[] adis = manager.getDevices(deviceFlag);	    for (AudioDeviceInfo adi : adis) {	        if (adi.getType() == deviceType) {	            return adi;	        }	    }	    return null;	}	</code></pre>		<p>Then you can access it by:</p>		<pre><code>audioOutputDevice = findAudioDevice(AudioManager.GET_DEVICES_OUTPUTS, AudioDeviceInfo.TYPE_BUS);	if (audioOutputDevice == null) {	    Log.e(TAG, "failed to found I2S audio output device, using default");	}	</code></pre>		<p>And finally:</p>		<pre><code> audioTrack.setPreferredDevice(audioOutputDevice);	</code></pre>	"
