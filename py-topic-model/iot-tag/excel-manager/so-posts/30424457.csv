thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
30424457,30424457,null,1,12,Sun May 24 14:12:00 EDT 2015,2774786,"<p>HTTP is mainly used for viewing web pages. Coap is a simplified version of HTTP for IoT or WSNs. Although COAP is based on UDP, it should have ACK messages to emulate TCP. Since COAP is simpler than HTTP, it will have lower latency and draw less power.<br>	<br>	Then, why browsers and web servers do not replace HTTP with COAP? Given the previous arguments, is it expected that COAP will completely replace HTTP? Is it just a matter of time? Are there any features which are supported only by HTTP?</p>	"
30424457,30630956,30424457,2,4,Wed Jun 03 21:19:00 EDT 2015,2988822,"<p>CoAP was never intended to replace HTTP, while it seems to "emulate" http, it only because it follows the REStful Paradigm.  CoAP is intended as a application layer for device and more specifically was design for Constraint device.</p>		<p>The REStful design was chosen also to facilitate proxying operation through http (there are recommendation for doing that in the RFC).  But again was never intended to replace HTTP.</p>		<p>CoAP is build with small amount of resources in mind.  The small header and different feature of CoAP are in place to make sure that constraint device have standards mean to communicate on the internet.</p>		<p>HTTP and CoAP each have their own purpose.</p>	"
30424457,30550785,30424457,2,10,Sat May 30 20:01:00 EDT 2015,1870387,"<blockquote>	  <p>If coap is more efficient, can I say that http is useless in the future if we replace them to coap?</p>	</blockquote>		<p>The industry plan is to improve HTTP by moving to HTTP/2, and HTTP/2 includes (amoung other features) a header compression, which should bring you similar benefits than CoAP.</p>		<p>While most web servers and some browsers today support HTTP/2 already, AFAIK no browser nor any server support CoAP. Same goes for TLS vs. DTLS.</p>		<blockquote>	  <p>Are there features coap cannot support but http can? </p>	</blockquote>		<p>As you said, HTTP is TCP based, while CoAP is UDP based. 	UDP requires that you send UDP pings every few seconds to keep the NAT/Firewall connection open, while in TCP typically it is only required every 15 min or so.	So if you need to keep the connection open (e.g. for push technologies), then CoAP is less efficient than HTTP (and HTTP/2).</p>	"
30424457,92143893,30550785,3,0,Tue Oct 02 08:44:00 EDT 2018,3231292,"Is CoAP same as HTTP - TCP + UDP (on IPv6)?"
30424457,96829248,30550785,3,0,Thu Mar 07 08:23:00 EST 2019,1870387,"As CoAP is not HTTP, its like "CoAP over UDP" is similar to "HTTP over TCP". There are proxies providing this translation see e.g.  https://stackoverflow.com/questions/43992052/how-to-transform-coap-to-http"
30424457,37771162,30424457,2,1,Sun Jun 12 05:56:00 EDT 2016,6455325,"<p>CoAP is optimized for the <strong>resource constrained networks</strong> and devices typical of <strong>IoT</strong> and <strong>M2M</strong> applications. It uses less resources than HTTP and can provide an environment for communication in WSNs, IoTs, and M2M comm. It is not made to replace HTTP. </p>		<p>HTTP has different application scenarios, while CoAP has a different one. HTTP is mainly designed for Internet devices where the power and other constraints are not an important issues. HTTP is more reliable than CoAP as it uses TCP. </p>	"
30424457,39893284,30424457,2,1,Thu Oct 06 10:13:00 EDT 2016,5783969,"<p>CoAP and HTTP con be used for different purposes. CoAP has been implemented for IoT and M2M environment,in other words,to send short messagges using UDP. For instance:</p>		<blockquote>	  <p>A typical CoAP exchange consists of 2 messages, i.e., a request and a	  response. In contrast, an HTTP request first requires the client to establish a TCP	  connection and later terminate it. This results in at least 9 messages for only one	  request [11]. Note that this argument is not necessarily true for large payloads. After	  TCP’s slow-start phase, it is able to send multiple packets at once and acknowledge	  all of them with a single acknowledgement. CoAP’s blockwise transfer [8] though,	  requires an acknowledgement for each block and leads to more messages and higher	  transfer time. Since we expect the majority of CoAP messages to be rather short, this	  is of less importance. However, CoAP’s blockwise mechanism allows a constrained	  server to not only receive but also process a large request block-by-block. This	  would not be possible if we used HTTP and TCP.	  (<em>Scalability for IoT CLoud Services</em> by Martin Lanter)</p>	</blockquote>		<p>Actually, Firefox can support CoAP using Copper(CU) plug-in. ;)</p>	"
