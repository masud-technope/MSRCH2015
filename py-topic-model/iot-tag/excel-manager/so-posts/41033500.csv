thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
41033500,41033500,null,1,0,Thu Dec 08 06:53:00 EST 2016,5287352,"<p>Have someone found how to make a similar webserver as the default IoT Core one? The most similar example found is <a href="https://sandervandevelde.wordpress.com/2016/04/08/building-a-windows-10-iot-core-background-webserver/" rel="nofollow noreferrer">this</a> but when I try to insert some javascript in the page, is not recognized. In the default webserver of the IoT Core there are a lot of js and jQuery scripts that runs very well.	Someone have ideas please?	Thanx a lot</p>	"
41033500,41055615,41033500,2,1,Fri Dec 09 07:56:00 EST 2016,6601582,"<p>Based on <a href="https://sandervandevelde.wordpress.com/2016/04/08/building-a-windows-10-iot-core-background-webserver/" rel="nofollow noreferrer">this</a> sample, you can add a HTML file to your project and use this HTML file host the content of the web page, then insert some javascript in it.</p>		<p>HTML file:</p>		<pre><code>&lt;!DOCTYPE html&gt;		&lt;html&gt;	&lt;head&gt;	    &lt;title&gt;Background Message&lt;/title&gt;	&lt;/head&gt;	&lt;body&gt;	    Hello from the background process!&lt;br /&gt;	    &lt;script type="text/javascript"&gt;	    var myVariable = 'Hello, I come from script!';	    window.alert(myVariable);	    &lt;/script&gt;	&lt;/body&gt;	&lt;/html&gt;  	</code></pre>		<p>You need edit part of code like this:</p>		<pre><code>                    using (var response = output.AsStreamForWrite())	                    {	                        string page = "";		                        var folder = Windows.ApplicationModel.Package.Current.InstalledLocation;	                        var file = await folder.GetFileAsync("index.html");	                        var readFile = await Windows.Storage.FileIO.ReadLinesAsync(file);	                        foreach (var line in readFile)	                        {	                            page += line;	                        }	                        page += query;		                        byte[] bodyArray = Encoding.UTF8.GetBytes(page);	                        var bodyStream = new MemoryStream(bodyArray);		                        var header = "HTTP/1.1 200 OK\r\n" +	                        $"Content-Length: {bodyStream.Length}\r\n" +	                        "Connection: close\r\n\r\n";	                        byte[] headerArray = Encoding.UTF8.GetBytes(header);		                        await response.WriteAsync(headerArray, 0, headerArray.Length);	                        await bodyStream.CopyToAsync(response);	                        await response.FlushAsync();	                    }	</code></pre>		<p>After deploying your app to Raspberry Pi, while the app running, you can visit the web server. The result will look like this:</p>		<p><a href="https://i.stack.imgur.com/g1glP.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/g1glP.png" alt="enter image description here"></a></p>	"
