thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
52681869,52681869,null,1,-1,Sat Oct 06 17:59:00 EDT 2018,9816324,"<p>I'm developing an app for Android that should receive some notifications via a protocol similar to MQTT from an Arduino device. This notification will be a sort of   alarm and will not be continuous but it will be rare. The service will do a lite job: receive single notification, it registry in a sqlite database and sends a notification to system bar. What kind of background service I should use for API level 26 or higher. I know thet the system imposes restrictions on running background services	thanks	Luigi</p>	"
52681869,52682129,52681869,2,-1,Sat Oct 06 18:27:00 EDT 2018,5630877,"<pre><code>/*Note: IntentService is a service, and is therefore subject to the new restrictions on background services. As a result, many apps that rely on IntentService do not work properly when targeting Android 8.0 or higher. For this reason, Android Support Library 26.0.0 introduces a new JobIntentService class, which provides the same functionality as IntentService but uses jobs instead of services when running on Android 8.0 or higher.*/		import android.content.Context;	import android.content.Intent;	import android.os.Handler;	import android.os.SystemClock;	import android.support.v4.app.JobIntentService;	import android.util.Log;	import android.widget.Toast;		/**	 * Example implementation of a JobIntentService.	 */	public class SimpleJobIntentService extends JobIntentService {	    /**	     * Unique job ID for this service.	     */	    static final int JOB_ID = 1000;		    /**	     * Convenience method for enqueuing work in to this service.	     */	    static void enqueueWork(Context context, Intent work) {	        enqueueWork(context, SimpleJobIntentService.class, JOB_ID, work);	    }		    @Override	    protected void onHandleWork(Intent intent) {	        // We have received work to do.  The system or framework is already	        // holding a wake lock for us at this point, so we can just go.	        Log.i("SimpleJobIntentService", "Executing work: " + intent);	        String label = intent.getStringExtra("label");	        if (label == null) {	            label = intent.toString();	        }	        toast("Executing: " + label);	        for (int i = 0; i &lt; 5; i++) {	            Log.i("SimpleJobIntentService", "Running service " + (i + 1)	                    + "/5 @ " + SystemClock.elapsedRealtime());	            try {	                Thread.sleep(1000);	            } catch (InterruptedException e) {	            }	        }	        Log.i("SimpleJobIntentService", "Completed service @ " + SystemClock.elapsedRealtime());	    }		    @Override	    public void onDestroy() {	        super.onDestroy();	        toast("All work complete");	    }		    final Handler mHandler = new Handler();		    // Helper for showing tests	    void toast(final CharSequence text) {	        mHandler.post(new Runnable() {	            @Override public void run() {	                Toast.makeText(SimpleJobIntentService.this, text, Toast.LENGTH_SHORT).show();	            }	        });	    }	}	</code></pre>	"
52681869,92298077,52682129,3,0,Sun Oct 07 03:33:00 EDT 2018,504554,"This does not answer the question"
52681869,92303068,52682129,3,0,Sun Oct 07 11:22:00 EDT 2018,504554,"Edit the answer to explain why this code is useful"
