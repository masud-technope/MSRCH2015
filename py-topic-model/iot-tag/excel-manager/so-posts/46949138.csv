thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
46949138,46949138,null,1,0,Thu Oct 26 08:19:00 EDT 2017,2037761,"<p>I've read a lot about catching unhandled exception in an UWP app. All suggest tu use AppDomain.UnhandledException.  But what to do in a headless application, there is no AppDomain and also no UI-thread.</p>		<p>My app starts several threads, binds to several udp/tcp listeners and makes HTTP requests that may crash. I want to log theses crashes to stabilize the app.</p>	"
46949138,80850745,46949138,3,0,Thu Oct 26 10:27:00 EDT 2017,815938,"What about Application.UnhandledException? Wire it up in App.xaml.cs; not sure if it can only handle exceptions on UI thread though."
46949138,80852011,46949138,3,0,Thu Oct 26 10:59:00 EDT 2017,2037761,"This I also read, but not sure if it works for headless apps since I have no UI thread."
46949138,46969638,46949138,2,2,Fri Oct 27 07:24:00 EDT 2017,8546089,"<p>Unhandled exception detection is encapsulated in <a href="https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.application" rel="nofollow noreferrer">Application</a> which is typically provided in initial XAML for App.xaml, so headless app can not detect unhandled exception.In fact, headless applications launch at machine startup and run continuously without any process lifetime management resource use limitations.They have a very simple execution model, and without process boundaries.If you want to catch exceptions in headless app,you should add try/catch in your each thread.You can refer <a href="https://social.msdn.microsoft.com/Forums/sqlserver/en-US/9950633f-a6ab-4441-98ca-d8e91885ea6b/how-to-handle-applevel-exceptions-in-an-iot-background-task?forum=WindowsIoT" rel="nofollow noreferrer">here</a> to get some more information.</p>	"
