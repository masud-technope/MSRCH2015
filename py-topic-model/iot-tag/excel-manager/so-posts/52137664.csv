thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
52137664,52137664,null,1,1,Sun Sep 02 13:51:00 EDT 2018,5185338,"<p>I'm trying to pass input textbox value by clicking on button</p>		<pre><code>&lt;script&gt;		var h = this.scope.myHot;	//var c = {{cold}};	var value = h;	// or overwrite value in your callback function ...	this.scope.action = function() { return value; }		&lt;/script&gt;	&lt;p&gt;Hot: &lt;input type="text" ng-model="hot" ng-value="myHot"&gt;&lt;/p&gt;	&lt;p&gt;Cold: &lt;input type="text" ng-model="cold"&gt;&lt;/p&gt;	&lt;md-button ng-click="send({payload:action()})"&gt;	    Click me	&lt;/md-button&gt;	</code></pre>		<p><a href="https://i.stack.imgur.com/jB4tj.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jB4tj.png" alt="the message is always undefined"></a></p>	"
52137664,52150875,52137664,2,0,Mon Sep 03 13:36:00 EDT 2018,5640850,"<p>If you simply want to sent the angular model values back to your node-red flow, you can use a <code>ui_template</code> node with some generic ng code like this:</p>		<pre><code>&lt;p&gt;Hot: &lt;input type="text" ng-model="myHot"&gt;&lt;/p&gt;	&lt;p&gt;Cold: &lt;input type="text" ng-model="myCold"&gt;&lt;/p&gt;	&lt;md-button ng-click="send({payload: {hot: myHot, cold: myCold}})"&gt;	    Send values	&lt;/md-button&gt;	</code></pre>		<p>The returned <code>msg.payload</code> object will contains whatever values were entered into the hot and cold input fields, with this structure:</p>		<p><code>{"hot":"123","cold":"4.5"}</code></p>	"
52137664,91282444,52150875,3,0,Tue Sep 04 12:32:00 EDT 2018,5640850,"That should work, assuming the `dis()` function is in the angular scope. You can also put both the `send(...)` and `dis()` functions inside a new function and just call that on `ng-click`"
52137664,91260417,52150875,3,0,Mon Sep 03 19:08:00 EDT 2018,5185338,"Thanks a lot SteveR , could I call another function with send() like this <md-button ng-click="send({payload: {hot: myHot, cold: myCold}}) ; dis()">"
