thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
52917571,52917571,null,1,1,Sun Oct 21 16:39:00 EDT 2018,428073,"<p>we only have these two methods available for azure IoThub in c#.</p>		<pre><code>Device device = await registryManager.GetDeviceAsync("deviceId");	</code></pre>		<p>and </p>		<pre><code>device = await registryManager.GetDevicesAsync("max count");	</code></pre>		<p>but how to get all available device count or active device count and also a messages count using c#?</p>	"
52917571,52917734,52917571,2,1,Sun Oct 21 16:56:00 EDT 2018,1749403,"<p>As of my knowledge,</p>		<p>There is no direct method to actually get the <strong><code>total number of devices</code></strong>. Alternatively what you could do is to create a List and whenever you add Devices using <strong><code>AddDeviceAsync</code></strong> you should push the object to the list.</p>		<p>Same with Total number of messages, you should create your own way to keep the value updated.</p>		<p>The following code should help.</p>		<pre><code>static async Task startClient(string IoTHub, string IoTDevicePrefix, int deviceNumber, string commonKey, int maxMessages, int messageDelaySeconds)	{	    allClientStarted++;	    runningDevices++;	    string connectionString = "HostName=" + IoTHub + ";DeviceId=" + IoTDevicePrefix + deviceNumber + ";SharedAccessKey=" + commonKey;	    DeviceClient device = DeviceClient.CreateFromConnectionString(connectionString, Microsoft.Azure.Devices.Client.TransportType.Mqtt);	    await device.OpenAsync();	    Random rnd = new Random();	    int mycounter = 1;	    Console.WriteLine("Device " + IoTDevicePrefix + deviceNumber + " started");		    while (mycounter &lt;= maxMessages)	    {	        Thread.Sleep((messageDelaySeconds * 1000) + rnd.Next(1, 100));	        string message = "{ \'loadTest\':\'True\', 'sequenceNumber': " + mycounter + ", \'SubmitTime\': \'" + DateTime.UtcNow + "\', \'randomValue\':" + rnd.Next(1, 4096 * 4096) + " }";	        Microsoft.Azure.Devices.Client.Message IoTMessage = new Microsoft.Azure.Devices.Client.Message(Encoding.UTF8.GetBytes(message));	        await device.SendEventAsync(IoTMessage);	        totalMessageSent++;	        mycounter++;	    }	    await device.CloseAsync();	    Console.WriteLine("Device " + IoTDevicePrefix + deviceNumber + " ended");	    runningDevices--;	}		static void createDevices(int number)	{	    for (int i = 1; i &lt;= number; i++)	    {	        var registryManager = RegistryManager.CreateFromConnectionString(iotHubConnectionString);	        Device mydevice = new Device(IoTDevicePrefix + i.ToString());	        mydevice.Authentication = new AuthenticationMechanism();	        mydevice.Authentication.SymmetricKey.PrimaryKey = commonKey;	        mydevice.Authentication.SymmetricKey.SecondaryKey = commonKey;	        try	        {	            registryManager.AddDeviceAsync(mydevice).Wait();	            Console.WriteLine("Adding device: " + IoTDevicePrefix + i.ToString());	        }	        catch (Exception er)	        {	            Console.WriteLine("  Error adding device: " + IoTDevicePrefix + i.ToString() + " error: " + er.InnerException.Message);	        }	    }		}	</code></pre>	"
52917571,52921583,52917571,2,1,Mon Oct 22 02:12:00 EDT 2018,8084828,"<p>The values what you are interested are part of the <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-metrics" rel="nofollow noreferrer">Azure IoT Hub metrics</a>. Basically you can obtained their:</p>		<ul>	<li>using the <a href="https://docs.microsoft.com/en-us/rest/api/monitor/metrics/list" rel="nofollow noreferrer">REST API</a> and <a href="https://docs.microsoft.com/en-us/rest/api/monitor/metricdefinitions" rel="nofollow noreferrer">here</a></li>	<li>Adding the <strong>diagnostic settings</strong> for Azure IoT Hub and selecting one of the following destination for <em>AllMetrics</em>:		<ol>	<li>to archiving in the <strong>event-driven storage</strong>. Using a subscriber such as an EventGridTrigger function with an input blob binding, the metrics can be queried within the function body.</li>	<li>or pushing the metrics to streaming pipe via an <strong>Event Hub</strong> and using a stream analytics job for querying the metrics data.</li>	</ol></li>	</ul>	"
52917571,92756672,52921583,3,0,Mon Oct 22 06:55:00 EDT 2018,428073,"but it does not contain device count , total message count etc"
52917571,92767662,52921583,3,0,Mon Oct 22 12:24:00 EDT 2018,8084828,"add to the url query string: metricnames=dailyMessageQuotaUsed,totalDeviceCount,connectedDeviceCount,..."
52917571,92768542,52921583,3,0,Mon Oct 22 12:47:00 EDT 2018,8084828,"list of IoT Hub metrics: https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-metrics#iot-hub-metrics-and-how-to-use-them"
52917571,53164786,52917571,2,1,Tue Nov 06 01:59:00 EST 2018,2793555,"<p>The <strong>number of devices</strong> can be retrieved by using a <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language" rel="nofollow noreferrer">device query</a>, e.g.:</p>		<p><code>SELECT COUNT() AS numberOfDevices FROM c	</code></p>		<p>which returns something like this:</p>		<p><code>[	  {	    "numberOfDevices": 123	  }	]	</code></p>		<p>To retrieve the <strong>number of messages</strong> you need to connect to the Event Hub-compatible endpoint, connecting to each underlying partition and looking at each <em>Partition Info</em> (<em>Last Sequence Number</em> and <em>Sequence Number</em>). There is some data retention involved though, so unless you add more logic to this, you will get a number representing the count of messages <strong>currently</strong> present in the hub, not the total since the creation, not the total left to process.</p>		<p>Update: here's the code showing a couple of methods to get the number of devices:</p>		<pre><code>using System.Collections.Generic;	using System.Linq;	using System.Threading.Tasks;	using Microsoft.Azure.Devices;	using Newtonsoft.Json;		namespace Test	{	    class Program	    {	        static async Task Main()	        {	            string connString = "HostName=_______.azure-devices.net;SharedAccessKeyName=_______;SharedAccessKey=_______";	            RegistryManager registry = RegistryManager.CreateFromConnectionString(connString);		            // Method 1: using Device Twin	            string queryString = "SELECT COUNT() AS numberOfDevices FROM devices";	            IQuery query = registry.CreateQuery(queryString, 1);	            string json = (await query.GetNextAsJsonAsync()).FirstOrDefault();	            Dictionary&lt;string, long&gt; data = JsonConvert.DeserializeObject&lt;Dictionary&lt;string, long&gt;&gt;(json);	            long count1 = data["numberOfDevices"];		            // Method 2: using Device Registry	            RegistryStatistics stats = await registry.GetRegistryStatisticsAsync();	            long count2 = stats.TotalDeviceCount;	        }	    }	}	</code></pre>	"
52917571,93221985,53164786,3,0,Tue Nov 06 05:06:00 EST 2018,428073,"how to use this in c# code ?"
52917571,93290072,53164786,3,0,Thu Nov 08 02:34:00 EST 2018,2793555,"code added showing a couple of approaches"
52917571,95622948,53164786,3,0,Mon Jan 28 16:19:00 EST 2019,428073,"this is very much useful and not giving anywhere though it is there into registryManager unable to find it easy!  thanks :)"
