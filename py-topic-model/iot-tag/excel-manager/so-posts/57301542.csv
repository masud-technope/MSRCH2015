thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57301542,57301542,null,1,0,Thu Aug 01 03:43:00 EDT 2019,5425955,"<p>I have an iot based project, which sends location updates to my server every few seconds over 2g. 	Previously I tried to setup an https end-point on my server, but the hand-shaking from the device was taking a long time causing significant delays when sending data over 2g.	So I switched over to raw tcp sockets.</p>		<p>On the device side, I use  circular buffers to cache the generated co-ordinates, and I have a thread that reads data from the buffer and sends it to the backend server. </p>		<p>Sometimes, it may so happen that the device goes to an area with no-network coverage, and the tcp messages dont make it to the backend.</p>		<p>** 1. If the message sending fails, I am not sure on how I should use my buffer for retrying. (should I put it back on the same buffer? Or have a separate retry buffer? I need to ensure that relative ordering of the generated coordinates is preserved.)** 	If it succeeds I simply remove it from the buffer.</p>		<p>With http/https it was easy for me to populate the retry buffer correctly. If I saw a 200 response, I would not put it in the retry buffer, else I know it failed and would need to handle the retry</p>		<p>This gets tricky when using tcp sockets as I cannot rely on a 200 response.</p>		<p>** 2. Should I generate an application level id, and pass it to the server over tcp socket? Then when the server sees this message, it responds back to the client with the same id, and thats how I know the server received the request.**</p>		<p>Looking for suggestions around the best practice for solving this problem.</p>		<p>Thanks!</p>	"
57301542,101123646,57301542,3,0,Thu Aug 01 19:38:00 EDT 2019,429063,"TCP itself will keep retying until it decides the connection is broken.  Conceptually you may want to do your own reply ACK's and message numbering, in which case you may find UDP to be a better fit at the cost of doing your own retying.  You might also consider something like websockets over SSL where the connection will be maintained when possible.   Don't forget that the amount of unsent data you have to hold could grow without limit...  You may also want to check the modem state; I have one with two virtual serial interfaces so I can ask it link status / signal questions over the 2nd."
