thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
49388718,49388718,null,1,0,Tue Mar 20 15:53:00 EDT 2018,1930814,"<p>Trying to work with AWS IoT, I have the following code that was working yesterday:</p>		<pre><code>import paho.mqtt.client as mqtt	import ssl, random	from time import sleep		mqtt_url = "XXXXXXXX.iot.us-east-2.amazonaws.com"	root_ca = './certs/iotRootCA.pem'	public_crt = './certs/deviceCert.crt'	private_key = './certs/deviceCert.key'		connflag = False		def on_connect(client, userdata, flags, response_code):	    global connflag	    connflag = True	    print("Connected with status: {0}".format(response_code))		def on_publish(client, userdata, mid):	    print userdata + " -- " + mid	    #client.disconnect()		if __name__ == "__main__":	    print "Loaded MQTT configuration information."	    print "Endpoint URL: " + mqtt_url	    print "Root Cert: " + root_ca	    print "Device Cert: " + public_crt	    print "Private Key: " + private_key		    client = mqtt.Client()	    client.tls_set(root_ca,	                   certfile = public_crt,	                   keyfile = private_key,	                   cert_reqs = ssl.CERT_REQUIRED,	                   tls_version = ssl.PROTOCOL_TLSv1_2,	                   ciphers = None)		    client.on_connect = on_connect	#    client.on_publish = on_publish		    print "Connecting to AWS IoT Broker..."	    client.connect(mqtt_url, port = 8883, keepalive=60)	    client.loop_start()	#    client.loop_forever()		    while 1==1:	        sleep(0.5)	        print connflag	        if connflag == True:	            print "Publishing..."	            ap_measurement = random.uniform(25.0, 150.0)	            client.publish("ActivePower", ap_measurement, qos=1)	            print("ActivePower published: " + "%.2f" % ap_measurement )	        else:	            print "waiting for connection..."	</code></pre>		<p>As I said, yesterday this code was working. Today, I am getting the following (there is no connection):</p>		<blockquote>	  <p>python awsiot-publish.py<br>	  Loaded MQTT configuration information.<br>	  Endpoint URL: XXXXXXX.iot.us-east-2.amazonaws.com<br>	  Root Cert: ./certs/iotRootCA.pem<br>	  Device Cert: ./certs/deviceCert.crt<br>	  Private Key: ./certs/deviceCert.key<br>	  Connecting to AWS IoT Broker... 	  False<br>	  waiting for connection...<br>	  False<br>	  waiting for connection...<br>	  False<br>	  waiting for connection... 	  False</p>	</blockquote>		<p>I do not know if there is a problem with AWS IoT... I just think the documentation is deficient: it is not clear how we can use our code...</p>	"
49388718,49392532,49388718,2,1,Tue Mar 20 19:19:00 EDT 2018,3083468,"<p>I believe your problem is that your certificate's policy does not have the proper permissions to connect. If not specified paho genereates a random client_id. You should set the client_id. You also need a policy that allows your certificate to connect using that client id.</p>		<pre><code>{	  "Effect": "Allow",	  "Action": "iot:Connect",	  "Resource":"arn:aws:iot:us-east1:123456789012:client/yourClientIdGoesHere"	}	</code></pre>		<p>It can be useful to set your client_id to the same as your thingname. (This is not necessary though.) You can also set the resource in your policy to <code>*</code> and then connect with any client_id:</p>		<pre><code>{	  "Effect": "Allow",	  "Action": "iot:Connect",	  "Resource":"*"	}	</code></pre>	"
49388718,85819591,49392532,3,0,Wed Mar 21 14:33:00 EDT 2018,1930814,"Strange that before, with the same policy, it was working. Now I change the Resource to "*" and it worked. It seems I really have to read a lot about how to specify policies correctly in AWS... As I said, apparently the documentation is not so good. Do you agree?"
49388718,85819983,49392532,3,0,Wed Mar 21 14:41:00 EDT 2018,3083468,"https://docs.aws.amazon.com/iot/latest/developerguide/iot-policies.html	Read the AWS IoT Policy Actions, Action Resources, and Example Policy sections. AWS IAM and IoT policies let you set very fine grained permissions. They can be confusing."
