thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
55561144,55561144,null,1,0,Sun Apr 07 16:20:00 EDT 2019,1331537,"<p>I have some code in a Universal Windows class library I want to use from a .NET core project.</p>		<p>I have a pi running Windows IOT for which I installed adafruits PWM hat. I have found an <a href="https://github.com/golaat/Adafruit.Pwm" rel="nofollow noreferrer">UWP project</a> containing the needed C# code and that works great.</p>		<p>But at the pi I also want to have an asp.net core project that uses the UWP project. But if I add a reference from my asp.net core to UWP it tells that it is not supported which also make sense as they are at same level in the .net architecture.</p>		<p>I use Visual Studio 2019 and just installed .NET Core 3.0 preview3.</p>		<p>Any way I can achive to use the UWP from my core project?</p>	"
55561144,97823711,55561144,3,0,Sun Apr 07 17:50:00 EDT 2019,11182,"You can only cut and paste. https://blog.lextudio.com/which-class-library-project-to-go-in-visual-studio-2015-2017-a48710cf3dff"
55561144,97852454,55561144,3,0,Mon Apr 08 15:27:00 EDT 2019,1331537,"Unfortunately it use UWP stuff like: Windows.Devices.I2c so not easy to port"
55561144,97926723,55561144,3,0,Wed Apr 10 15:52:00 EDT 2019,1331537,"@mm8 - yes, you are right. As you can see in below that also what I ended up with."
55561144,97825561,55561144,3,0,Sun Apr 07 19:34:00 EDT 2019,2689390,"I'm not familiar with UWP, but the code you have in your class library, is it ties to UWP stuff? Can you port the class library to target .NET Standard? Then you can reference it in all projects."
55561144,97877026,55561144,3,0,Tue Apr 09 10:02:00 EDT 2019,7252182,"@JerryA: How are you supposed to use UWP specific stuff in an ASP.NET Core app? Code that makes sense to share between different platforms should target .NET Standard."
55561144,55562692,55561144,2,1,Sun Apr 07 19:12:00 EDT 2019,202179,"<p>If you want to reference, it can't be done as you said yourself it makes no sense.</p>		<p>Some workaround would be to move the code from UWP project to the new .Net Core project and then reference it from both projects. If you use some UWP APIs you might consider to use a shared project with conditional compiling instead of the new .Net Core project.</p>	"
55561144,97852681,55562692,3,0,Mon Apr 08 15:33:00 EDT 2019,1331537,"It uses some UWP API so I agree a shared project in either core or standard could do the trick. But I'm not huge fan of this as it makes the communication across layers a little blurry, but you might be right it is best/only possibility."
55561144,97926670,55562692,3,1,Wed Apr 10 15:50:00 EDT 2019,1331537,"I actually ended up with this. So created a singleton in .Net standard which I reference in both my ASP:NET project and in my UWP project. So my web service can call into some methods in the shared lib, which can notify the UWP part."
55561144,55964336,55561144,2,0,Fri May 03 06:28:00 EDT 2019,72174,"<p>Try adding </p>		<pre><code>    &lt;ItemGroup&gt;	        &lt;PackageReference Include="System.Runtime.WindowsRuntime" Version="4.6.0-preview4.19212.13" /&gt;	        &lt;Reference Include="Windows"&gt;	            &lt;HintPath&gt;C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.18362.0\Windows.winmd&lt;/HintPath&gt;	        &lt;/Reference&gt;	    &lt;/ItemGroup&gt;	</code></pre>		<p>to your csproj file. It allowed me to use UWP api in asp.net core preview 3 project.</p>	"
