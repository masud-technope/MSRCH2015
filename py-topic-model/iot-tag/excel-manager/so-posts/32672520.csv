thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
32672520,32672520,null,1,25,Sat Sep 19 19:47:00 EDT 2015,5064278,"<p>I'm trying to find Unicast, Dns and Gateway Address in windows IOT. 	Normally I can access these values with  <code>NetworkInterface.GetAllNetworkInterfaces()</code> method.</p>		<p>But in UWP, that method is missing.</p>		<p>Is there any alternative for getting these values?</p>	"
32672520,61724525,32672520,3,1,Sat May 07 15:36:00 EDT 2016,3787557,"I would try to `PInvoke` api methods from `Iphlpapi.dll`. There are several promising methods that might contain what you're looking for, like: `GetInterfaceInfo()`, `GetAdaptersInfo()`, `GetAdaptersAddresses()`, etc, depending on the exact information you need. Look [HERE](http://www.pinvoke.net/default.aspx/iphlpapi/GetInterfaceInfo.html)."
32672520,61725255,32672520,3,0,Sat May 07 16:15:00 EDT 2016,3787557,"I just tried that bit of code from the link in a standard UWP app and it works with no problem."
32672520,61742576,32672520,3,0,Sun May 08 13:01:00 EDT 2016,3787557,"Also, you may want to research [HERE](https://msdn.microsoft.com/en-us/library/windows/desktop/aa366071%28v=vs.85%29.aspx) what functions you will need."
32672520,61926694,32672520,3,0,Thu May 12 20:49:00 EDT 2016,5064278,"@jstreet thanks for your help. It works perfectly."
32672520,61927135,32672520,3,0,Thu May 12 21:04:00 EDT 2016,5064278,"@jstreet can you convert your comment to answer? for bounty."
32672520,34960056,32672520,2,1,Sat Jan 23 05:39:00 EST 2016,5791787,"<p>Try this code Snippet I found here:	<a href="https://social.msdn.microsoft.com/Forums/en-US/27a8b7a8-8071-4bc1-bbd4-e7c1fc2bd8d7/windows-10-iot-core-how-do-you-create-a-tcp-server-and-client?forum=WindowsIoT" rel="nofollow">https://social.msdn.microsoft.com/Forums/en-US/27a8b7a8-8071-4bc1-bbd4-e7c1fc2bd8d7/windows-10-iot-core-how-do-you-create-a-tcp-server-and-client?forum=WindowsIoT</a></p>		<pre><code>    public static string GetDirectConnectionName()	    {	        var icp = NetworkInformation.GetInternetConnectionProfile();	        if (icp != null)	        {	            if(icp.NetworkAdapter.IanaInterfaceType == EthernetIanaType)	            {	                return icp.ProfileName;	            }	        }		        return null;	    }		    public static string GetCurrentNetworkName()	    {	        var icp = NetworkInformation.GetInternetConnectionProfile();	        if (icp != null)	        {	            return icp.ProfileName;	        }		        var resourceLoader = ResourceLoader.GetForCurrentView();	        var msg = resourceLoader.GetString("NoInternetConnection");	        return msg;	    }		    public static string GetCurrentIpv4Address()	    {	        var icp = NetworkInformation.GetInternetConnectionProfile();	        if (icp != null &amp;&amp; icp.NetworkAdapter != null &amp;&amp; icp.NetworkAdapter.NetworkAdapterId != null)	        {	            var name = icp.ProfileName;		            var hostnames = NetworkInformation.GetHostNames();		            foreach (var hn in hostnames)	            {	                if (hn.IPInformation != null &amp;&amp;	                    hn.IPInformation.NetworkAdapter != null &amp;&amp;	                    hn.IPInformation.NetworkAdapter.NetworkAdapterId != null &amp;&amp;	                    hn.IPInformation.NetworkAdapter.NetworkAdapterId == icp.NetworkAdapter.NetworkAdapterId &amp;&amp;	                    hn.Type == HostNameType.Ipv4)	                {	                    return hn.CanonicalName;	                }	            }	        }		        var resourceLoader = ResourceLoader.GetForCurrentView();	        var msg = resourceLoader.GetString("NoInternetConnection");	        return msg;	    }	</code></pre>	"
32672520,57656790,34960056,3,0,Sat Jan 23 11:51:00 EST 2016,5064278,"Thanks, but that gives just ip address."
32672520,37150255,32672520,2,1,Tue May 10 22:55:00 EDT 2016,2523936,"<p>As jstreet commented, Invoke is the solution. I tried with a Lumia 950, and <code>GetAdaptersInfo()</code> works, not as <code>IcmpSendEcho()</code>.</p>		<p>With the following link you should do it: 	<a href="http://www.pinvoke.net/default.aspx/iphlpapi/GetAdaptersInfo.html" rel="nofollow">http://www.pinvoke.net/default.aspx/iphlpapi/GetAdaptersInfo.html</a></p>	"
32672520,37197706,32672520,2,4,Thu May 12 21:27:00 EDT 2016,3787557,"<p>You could try to <code>PInvoke</code> methods from <code>Iphlpapi.dll</code>. There are several methods that may contain the <strong><em>Unicast, Dns and Gateway</em></strong> info you're looking for, like <code>GetInterfaceInfo()</code>, <code>GetAdaptersInfo()</code>, <code>GetAdaptersAdresses()</code>, etc. Please see a complete list of available methods here: <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366071%28v=vs.85%29.aspx" rel="nofollow noreferrer">IP Helper Functions - MSDN</a>. Eventually more than one method might be necessary.</p>		<p>As an example on how to do it, here's some sample code from <a href="http://www.pinvoke.net/default.aspx/iphlpapi/GetInterfaceInfo.html" rel="nofollow noreferrer">PInvoke.Net</a> retrieving interface names in my local computer, implemented as a standard UWP app:</p>		<pre><code>public sealed partial class MainPage : Page	{	    public MainPage()	    {	        this.InitializeComponent();	    }		    private void Page_Loaded(object sender, RoutedEventArgs e)	    {	        List&lt;string&gt; list = new List&lt;string&gt;();		        IP_INTERFACE_INFO ips = Iphlpapi.GetInterfaceInfo();		        list.Add(string.Format("Adapter count = {0}", ips.NumAdapters));		        foreach (IP_ADAPTER_INDEX_MAP ip in ips.Adapter)	            list.Add(string.Format("Index = {0}, Name = {1}", ip.Index, ip.Name));		        listView1.ItemsSource = list;	    }	}		// PInvoke	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]	public struct IP_ADAPTER_INDEX_MAP	{	    public int Index;	    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = PInvokes.MAX_ADAPTER_NAME)]	    public String Name;	}		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]	public struct IP_INTERFACE_INFO	{	    public int NumAdapters;	    public IP_ADAPTER_INDEX_MAP[] Adapter;		    public static IP_INTERFACE_INFO FromByteArray(Byte[] buffer)	    {	        unsafe	        {	            IP_INTERFACE_INFO rv = new IP_INTERFACE_INFO();	            int iNumAdapters = 0;	            Marshal.Copy(buffer, 0, new IntPtr(&amp;iNumAdapters), 4);	            IP_ADAPTER_INDEX_MAP[] adapters = new IP_ADAPTER_INDEX_MAP[iNumAdapters];	            rv.NumAdapters = iNumAdapters;	            rv.Adapter = new IP_ADAPTER_INDEX_MAP[iNumAdapters];	            int offset = sizeof(int);	            for (int i = 0; i &lt; iNumAdapters; i++)	            {	                IP_ADAPTER_INDEX_MAP map = new IP_ADAPTER_INDEX_MAP();	                IntPtr ptr = Marshal.AllocHGlobal(Marshal.SizeOf(map));	                Marshal.StructureToPtr(map, ptr, false);	                Marshal.Copy(buffer, offset, ptr, Marshal.SizeOf(map));	                //map = (IP_ADAPTER_INDEX_MAP)Marshal.PtrToStructure(ptr, typeof(IP_ADAPTER_INDEX_MAP));	                map = Marshal.PtrToStructure&lt;IP_ADAPTER_INDEX_MAP&gt;(ptr);	                Marshal.FreeHGlobal(ptr);	                rv.Adapter[i] = map;	                offset += Marshal.SizeOf(map);	            }	            return rv;	        }	    }	}		internal class PInvokes	{	    public const int MAX_ADAPTER_NAME = 128;		    public const int ERROR_INSUFFICIENT_BUFFER = 122;	    public const int ERROR_SUCCESS = 0;		    [DllImport("Iphlpapi.dll", CharSet = CharSet.Unicode)]	    public static extern int GetInterfaceInfo(Byte[] PIfTableBuffer, ref int size);		    [DllImport("Iphlpapi.dll", CharSet = CharSet.Unicode)]	    public static extern int IpReleaseAddress(ref IP_ADAPTER_INDEX_MAP AdapterInfo);	}		public class Iphlpapi	{	    public static IP_INTERFACE_INFO GetInterfaceInfo()	    {	        int size = 0;	        int r = PInvokes.GetInterfaceInfo(null, ref size);	        Byte[] buffer = new Byte[size];	        r = PInvokes.GetInterfaceInfo(buffer, ref size);	        if (r != PInvokes.ERROR_SUCCESS)	            throw new Exception("GetInterfaceInfo returned an error.");	        IP_INTERFACE_INFO info = IP_INTERFACE_INFO.FromByteArray(buffer);	        return info;	    }	}	</code></pre>		<p><a href="https://i.stack.imgur.com/HXqpp.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/HXqpp.png" alt="enter image description here"></a></p>	"
32672520,70794480,37197706,3,0,Mon Jan 23 09:56:00 EST 2017,457030,"But where is the Unicast, Dns and Gateway Address?"
