thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
47630763,47630763,null,1,-1,Mon Dec 04 10:01:00 EST 2017,7854532,"<p>I have many IoT devices sending data currently to MySQL Database.	<br />	I want to port it to some other Database, which will be Open Source and provide me with:</p>		<ul>	<li>JSON support</li>	<li>Scalability</li>	<li>Flexibility to add multiple columns automatically as per payload</li>	<li>Python and PHP Support</li>	<li>Extremely Fast Read, Write</li>	<li>Ability to export at least 6 months of data in CSV format</li>	</ul>		<p><br />	Please revert back soon.	Any help will be appreciated.</p>		<p>Thanks</p>	"
47630763,47630978,47630763,2,-1,Mon Dec 04 10:13:00 EST 2017,491024,"<p>Why do you want to move away from MySQL?  It is open source and can meet all of the criteria you listed above.  This is a very subjective question so it's hard to give a good answer, but MySQL is not a bad option</p>	"
47630763,82219893,47630978,3,0,Mon Dec 04 10:20:00 EST 2017,7854532,"My Data is TimeSeries Data. I want to ingest incoming json payloads (which come from devices) directly into the Database. Currently, I have scripts running which first create table and then insert the entry. I also have scripts which lookup for six months old data and enable me to download it from Database. However, I want to reduce my coding time. I was thinking of InfluxDB or Cassandra or MongoDB. I am confused. Which might prove a better solution in this case?"
47630763,82375306,47630978,3,0,Fri Dec 08 04:26:00 EST 2017,7854532,"Hi Lorna, I checked PostgreSQL as well as we had previously discussed. However, I am not yet sure whether to use it for full time or not or to stay with MySQL. Once, satisfied with my research I will mark it as accepted :)"
47630763,82222110,47630978,3,0,Mon Dec 04 11:24:00 EST 2017,491024,"MySQL has JSON support (from version 5.7 onwards), and can also cover all your other requirements I think, depending exactly what you need from the CSV part.  All the databases you mention could cover some of the requirements but from what I know MySQL has the most covered - or maybe PostgreSQL which has more complete JSON support."
47630763,82222630,47630978,3,0,Mon Dec 04 11:38:00 EST 2017,7854532,"Ok thank for answering that. I will check PostgreSQL as well, and then come to a conclusion."
47630763,82343094,47630978,3,0,Thu Dec 07 09:47:00 EST 2017,491024,"Feel free to mark "accepted" the answer you found most helpful"
47630763,83546684,47630978,3,0,Tue Jan 16 12:46:00 EST 2018,1915893,"MySQL is not good."
47630763,47645139,47630763,2,0,Tue Dec 05 02:28:00 EST 2017,null,"<p>Shaping your database based on input data is a mistake. Think of tomorrow your data will be CSV or XML, in a slight different format. Design your database based on your abstract data model, normalize it and apply existing data to your model. Shape your structure based on what input you have and what output you plan to get. If you retrieve the same content as the input, storing data in files will be sufficient, you don't need a database.</p>		<p>Also, you don't want to store "raw" records the database. Even if your database can compose a data record out of the raw element at run time, you cannot run a selection based on a certain extracted element, without visiting all the records.</p>		<p>Most of the databases allow you to connect from anywhere (there is not such thing as better support of PostgreSQL in Java as compared to Python, but the quality and level of standardization for drivers may vary). The question is what features shall your driver support. For example, you may require support for bulk import (don't issue large INSERT sets to the database).</p>		<p>What you actually look for is:</p>		<ul>	<li>scalability: can your database grow with your data? Would the DB benefit of adding additional CPUs (MySQL particularly doesn't for large queries). Can you shard your database on multiple instances? (MySQL again fails to handle that).</li>	<li>does your model looks like a snowflake? If yes, you may consider NoSQL, otherwise stay away of it. If you manage to model as a snowflake (and this means you are open for compromises) you may use anything like Lucene based search products, Mongo, Cassandra, etc. The fact you have timeseries doesn't qualify you for NoSQL. For example, you may have 10K devices issuing 5k message types. Specific data is redundantly recorded at device level and at message type level. In that case, because of the n:m relation, you don't have the snowflake anymore.</li>	<li>why do you store the data? What queries are you going to issue?</li>	</ul>	"
47630763,82251903,47645139,3,0,Tue Dec 05 05:33:00 EST 2017,7854532,"Hi @Razvan, thanks for the beautiful answer.    As per your point 1: MySQL doesn't seem like a good option w.r.t scalability.      As per point 2: Only 5-8 Tables will be relating to each other among 500 tables.    As per point 3: I store the data to mainly analyze it, chart it accordingly, notify me for my billings and cost estimations depending on the Data from previous 6 months or more, to alert me when some part of machine is not working for more than 3 hours or so.     So, MYSQL is out of the question now. Revert Back for more discussions.    Thanks"
47630763,83550857,47645139,3,0,Tue Jan 16 14:29:00 EST 2018,null,"NoSQL is a type of database, not a vendor. Half of your statement is right and half s wrong.	Apples and oranges compare the same as SQL and NoSQL.  There are common features provided by mostly all SQL vendors, and features provided by the majority of NoSQL database. Lacking transactions and N-to-M relation seems to be a recurrent pattern in NoSQL world."
47630763,83546662,47645139,3,0,Tue Jan 16 12:45:00 EST 2018,1915893,"NoSQL is neither a type of database nor a vendor. This comparison is apples to oranges."
