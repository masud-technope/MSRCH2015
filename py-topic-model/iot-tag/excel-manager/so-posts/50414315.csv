thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
50414315,50414315,null,1,3,Fri May 18 15:08:00 EDT 2018,5326910,"<p>I am following this <a href="https://aws.amazon.com/premiumsupport/knowledge-center/iot-self-signed-certificates/" rel="nofollow noreferrer">AWS GUIDE</a> on creating self-signed certificates.	But after creating my CA, I try to upload it to AWS IOT I get this error:</p>		<p>Command:</p>		<p><code>aws iot register-ca-certificate --ca-certificate file://CA_cert.pem --verification-cert file://verificationCert.crt</code></p>		<p>Error:</p>		<p><code>An error occurred (CertificateValidationException) when calling the RegisterCACertificate operation: CA certificate is not valid. The CA certificate does not have the basicConstraints extension as true</code></p>		<p>Any help appreciated!</p>	"
50414315,50680936,50414315,2,10,Mon Jun 04 12:42:00 EDT 2018,3864876,"<p>I have also used AWS IoT and suffered same error, and I found the solution. </p>		<p><strong>Reason of the error</strong></p>		<p>The error occurs because <code>basicConstraints</code> extension in the CA certificate, which means that the certificate is CA so this certificate is able to sign other public keys to generate client certificates, is not set to <code>TRUE</code>. </p>		<p>Note that a client X's certificate contains X's public key signed by CA's private key. Other clients, for example Y, can verify the X's public key using CA's public key.  </p>		<p>I think you had the error when you tried to generate CA certificate. The error message indicates that the CA's certificate is not allowed to sign other client public keys. </p>		<p>Below are how I did.</p>		<p><strong>Solution</strong></p>		<p>I assume that you already generate CA's key, <code>rootCA.key</code>.</p>		<p>We need a <code>openssl</code> config file, say <code>rootCA_openssl.conf</code>. Note that you can modify the values. </p>		<pre><code>[ req ]	distinguished_name       = req_distinguished_name	extensions               = v3_ca	req_extensions           = v3_ca		[ v3_ca ]	basicConstraints         = CA:TRUE		[ req_distinguished_name ]	countryName              = Country Name (2 letter code)	countryName_default      = KR	countryName_min          = 2	countryName_max          = 2	organizationName         = Organization Name (eg, company)	organizationName_default = Deeply Inc.	</code></pre>		<p>Then generate CA's certificate using the config file, <code>rootCA_openssl.conf</code>.</p>		<pre><code>openssl req -new -sha256 -key rootCA.key -nodes -out rootCA.csr -config rootCA_openssl.conf	openssl x509 -req -days 3650 -extfile rootCA_openssl.conf -extensions v3_ca -in rootCA.csr -signkey rootCA.key -out rootCA.pem 	</code></pre>		<p>Now we have CA's certificate, <code>rootCA.pem</code>.	Then you can follow the instructions in the AWS IoT documentation. 	For example: </p>		<pre><code># Get the registration code for the use below: 	# $ aws iot get-registration-code 		openssl genrsa -out verificationCert.key 2048		openssl req -new -key verificationCert.key -out verificationCert.csr	# Put the registration code in Common Name field		openssl x509 -req -in verificationCert.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out verificationCert.crt -days 500 -sha256	</code></pre>	"
50414315,100083257,50680936,3,0,Tue Jun 25 23:13:00 EDT 2019,469601,"Hmmm. Did not work for me."
50414315,100805531,50680936,3,2,Mon Jul 22 11:41:00 EDT 2019,265102,"@colefner it was not working for me on the first try. I forgot to add the flag `-extensions v3_ca` to the command. After that it worked for me."
