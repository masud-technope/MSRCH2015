thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
54803586,54803586,null,1,0,Thu Feb 21 09:30:00 EST 2019,4172812,"<p>I am currently playing around with Apache Kafka and wanted to see if it is feasible to use it for managing data streams from sensors. I have come to understand that most micro controllers you would use for sensor deployment (for example ESP32-run boards) are simply not powerful enough to run java let alone Kafka.</p>		<p>Has anyone made experiences with Kafka in the internet of things? Is Kafka even the right way to go? 	I am currently thinking about either:</p>		<ul>	<li>Setting up some sort of intermediate computer that handles input streams from multiple sensor boards and runs Kafka producers with them, or</li>	<li>Finding a way to somehow run a "reduced" Kafka producer on my ESP32-kit by wrapping this functionality. (so far I have no idea how and if this is possible)</li>	</ul>		<p>Coming to the actual question:<br>	Is it possible to use micro controllers that don't run Java as Kafka producers? If not, is there a feasible workaround or does it not make sense to use Kafka at sensor level?</p>	"
54803586,96395816,54803586,3,0,Thu Feb 21 14:39:00 EST 2019,2148953,"https://medium.com/@oliver_hu/set-up-a-kafka-cluster-with-raspberry-pi-2859005a9bed"
54803586,54809526,54803586,2,1,Thu Feb 21 14:33:00 EST 2019,5687237,"<p>Why don't you give a shot with <code>C</code> instead of <code>java</code>?	I know that most microcontrollers are handled with <code>C</code>. <a href="https://github.com/edenhill/librdkafka" rel="nofollow noreferrer">librdkafka</a> is a  C/C++ library for this purpose.</p>		<p>If the librdkafka is not light enough for using in your microcontroller, Another way is using an intermediate server which handles received data from microcontrollers (e.g. JSON) and sends them to the Kafka.</p>	"
