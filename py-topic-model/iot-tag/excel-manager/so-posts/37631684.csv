thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37631684,37631684,null,1,3,Sat Jun 04 15:02:00 EDT 2016,810679,"<p>We are trying to use Apache Cassandra in an IoT based application. We are planning to create a device  abstraction.  Any user shall be able to define a device with a series of  attributes. For each attribute, the user shall be able to define a series of properties  like  <strong>name , data type , minimum value , maximum value etc.</strong></p>		<p>Some examples of devices are given below</p>		<p><strong>Vehicle</strong></p>		<p>The vehicle can have the following attributes</p>		<ol>	<li>Speed [name :- speed , data type:- double , minimum value :- 0 , maximum value :-300]</li>	<li>Latitude [name :- speed , data :- double , minimum :- -90 , maximum :-90] </li>	<li>Longitude[name :- Longitude, data :- double , minimum :- -180 , maximum :- 180]</li>	</ol>		<p><strong>Temperature Sensor</strong></p>		<p>The temperature sensor can have the following attributes</p>		<ol>	<li>Current Temperature[name :- Current Temperation, data type:- double , minimum value :- 0 , maximum value :-300]</li>	<li>Unit  [name :- Unit , datatype:-string]</li>	</ol>		<p>In real time , each device will be sending data as key value pairs  . </p>		<p>For ex:- A <strong>Vehicle</strong> can send the following data </p>		<p>Time :- 6/4/2016 11:15:15.150 , Latitude : -1.256 , Longitude :- -180.75, Speed :- 50</p>		<p>Time :- 6/4/2016 11:15:16.150 , Latitude : -1.257 , Longitude :- -181.75, Speed :- 51</p>		<p>For ex:- A <strong>Temperature sensor</strong> can send the following data </p>		<p>Time :- 6/4/2016 11:15:15.150 , Current Temperature: 100, Unit : farenheit</p>		<p>Time :- 6/4/2016 11:15:16.150 , Latitude : 101 , Unit : farenheit</p>		<p>Since the attributes of different devices can be different , we are confused on how the model the tables in cassandra... Some of the options that came to mind are <strong>creating a table for a device, or create a single table and store the values in Map data types... We are little confused on which approach should be taken...	Any suggestions is appreciated</strong></p>	"
37631684,62769398,37631684,3,0,Sun Jun 05 17:31:00 EDT 2016,4636126,"You can create an abstraction, let's say a Thing, a term currently in vogue in IOT domain, that supports user defined tags, each consisting of a name and value. Each tag will be stored in a separate column."
37631684,62820172,37631684,3,0,Tue Jun 07 05:37:00 EDT 2016,810679,"@BobvanLuijt I had a look at  your project, but could not understand how the values are stored... Can you please elaborate"
37631684,62953203,37631684,3,0,Fri Jun 10 06:37:00 EDT 2016,2539103,"Better approach will be first decide what type of queries you will be running, that would help to decide your partition key and avoid wide rows. Creating a table for each device will be a bad idea"
37631684,62746536,37631684,3,0,Sat Jun 04 16:13:00 EDT 2016,1760609,"Given that the end user can define their own device types at will, you probably don't want a table per device as that would lead to you creating tables on demand based on user requests."
37631684,62780338,37631684,3,0,Mon Jun 06 05:46:00 EDT 2016,1501285,"You might want to take a look at my IoT project, it is an IoT/Casandra project. https://www.github.com/weaviate"
37631684,62793542,37631684,3,0,Mon Jun 06 12:25:00 EDT 2016,810679,"Thanks Bob I will have a look and get back"
37631684,37642047,37631684,2,-1,Sun Jun 05 12:43:00 EDT 2016,30383,"<p>Have you looked at using the different Collection Data types in Cassandra to store the information that differs between devices?</p>		<p><a href="https://docs.datastax.com/en/cql/3.0/cql/cql_using/use_collections_c.html" rel="nofollow">https://docs.datastax.com/en/cql/3.0/cql/cql_using/use_collections_c.html</a></p>	"
37631684,37728947,37631684,2,1,Thu Jun 09 14:35:00 EDT 2016,6445191,"<p>Definitely don't create a table per device. I imagine you will end up with 100s/1000s of tables with minimal control over how they are modelled. Cassandra doesn't deal very welll with this as it requires memory for each table, which will reduce the memory available to the key cache and row cache (if you use it). </p>		<p>The map method may be feasible however there are some things to consider before going down that path:</p>		<p>Will a device entry receive frequent updates and how will you update it?	If you're planning on updating every single element in the map you will have to update each element individually. The reason for this is that overwrites on collections in Cassandra will create a range tombstone for each overwrite. If frequently overwriting then you will end up with millions of tombstones, which will probably end up not getting compacted away as efficiently as you'd like. This can be avoided by using a JSON type instead, and processing it in your application.</p>		<p>You need to consider how the data will be queried as well, if you want users to be able to query on the data in the map it could get a little more complicated. I think you'd be better off having a single method of querying regardless of device type and then extract details in your application. However this is up to you and is pretty much the driving force to how you structure your data. The best advice I can give is to try and steer clear of creating too many tables, and also be wary of giving your users a lot of control over data structure, as it's very easy to do poorly and cause performance issues on the cluster.</p>		<p>If you haven't already, give this blog a read - it points out the basic elements of data model design that you need to get right when using Cassandra. <a href="http://www.datastax.com/dev/blog/basic-rules-of-cassandra-data-modeling" rel="nofollow">http://www.datastax.com/dev/blog/basic-rules-of-cassandra-data-modeling</a></p>	"
37631684,37788107,37631684,2,1,Mon Jun 13 11:03:00 EDT 2016,6386175,"<p>I think the best option is to create only one table with a general purpose schema for collecting time-serie data.</p>		<p>Example CQL: </p>		<pre><code>CREATE TABLE timeline (	  device uuid,	  time timeuuid,	  key text,	  value blob,	  â€¦	  PRIMARY KEY ((device, key), time)	);	</code></pre>		<p>Values can be store as <em>blob</em> (custom serialization), <em>map</em> or <em>numeric scalars</em>, depending on your application use case &amp; data access patterns (how to read/write/delete and if you plan to support to <strong>updates</strong>).</p>		<p>FYI useful related Datastax posts about time-series modeling:</p>		<ul>	<li><a href="https://academy.datastax.com/resources/getting-started-time-series-data-modeling" rel="nofollow">https://academy.datastax.com/resources/getting-started-time-series-data-modeling</a></li>	<li><a href="http://www.datastax.com/dev/blog/advanced-time-series-data-modelling" rel="nofollow">http://www.datastax.com/dev/blog/advanced-time-series-data-modelling</a></li>	<li><a href="http://www.datastax.com/dev/blog/advanced-time-series-with-cassandra" rel="nofollow">http://www.datastax.com/dev/blog/advanced-time-series-with-cassandra</a></li>	</ul>	"
