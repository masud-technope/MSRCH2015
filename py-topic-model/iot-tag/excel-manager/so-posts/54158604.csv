thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
54158604,54158604,null,1,2,Sat Jan 12 10:15:00 EST 2019,5156141,"<p>Iâ€™m currently working on bidirectional communication between some IoT sensors and a mobile app using Pusher channels.</p>		<p>I have been able to get Pusher working on the IoT nodes using the Arduino library and also in my React Native app. </p>		<p>However, Iâ€™ve hit a bit of a roadblock. My IoT sensors arenâ€™t capable of producing JSON payloads and arrays (they broadcast batches of 30 readings at 30 second intervals) due to memory constraints. Each reading can be up to 60 characters in length unprocessed and a full payload being sent every 30s would be at least 1800 bytes, then thereâ€™s the header data (Auth token and session data for the sensorâ€™s context). </p>		<p>I do not want to parse this hex data on my React Native app (as some comes from proprietary sensors where the protocol cannot be risked being divulged) so need it to happen on my ExpressJS API (currently handles the authentication and historic data retrieval) <strong>before</strong> it enters Pusher and pings the React Native app. </p>		<h2>My questions:</h2>		<ol>	<li>If the sensor made a POST request to my Express API in which the route performed the processing from hex into nice JSON (with full text values!) - can I use the Pusher client to get this data into the correct channel? Instead of having the sensor talk straight to Pusher?</li>	<li>Is there a way to bridge the Pusher service through my API so that the React Native app â€œpointsâ€? to my API for the updates instead of directly to Pusher?</li>	</ol>		<p>Here is the architecture that Iâ€™m trying to achieve - hoping those of you who have experience with Pusher can tell me if this is possible:	<a href="https://i.stack.imgur.com/R2YOQ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/R2YOQ.png" alt="Architecture Diagram"></a></p>		<p>Iâ€™ve seen the â€œpusher-http-nodeâ€? server library but thereâ€™s no tangible description of why this would be used. </p>		<p>Really hoping I donâ€™t need to go down the MQTT route and have my own micro service (something Iâ€™ve wanted to avoid given the costs and scalability concerns). </p>	"
54158604,54166553,54158604,2,0,Sun Jan 13 06:21:00 EST 2019,643516,"<p>DevRel at Pusher here.</p>		<p>To answer your questions: </p>		<ol>	<li>That setup makes sense. Your Express API can preprocess each sensor event before sending them to the Channels service - you'd use the Node SDK on the server. That preprocessing can include putting it in the correct format, and sending to the correct channel.</li>	</ol>		<p>For the difference between SDKs:</p>		<p>The <code>pusher-http-node</code> SDK is designed to run on servers, and can send messages to any channels you want. 	It also holds your private keys - something that your React	Native client SDK doesn't. 	Server SDK doesn't implement subscriptions. </p>		<p>The <code>pusher-js</code> client SDK that you use in the React Native apps on the other hand can only subscribe or send client events. </p>		<ol start="2">	<li>Your client applications should connect to Pusher Channels service so they can receive realtime updates. Channels serves as the transport here. Your Express API should use <code>pusher-http-node</code> to send these events to Pusher Channels.</li>	</ol>		<p>So, to summarise:</p>		<ul>	<li>Have your IOT sensors communicate raw data to your Express API</li>	<li>In your Express API do the preprocessing of these raw events, turning them into something your React Native apps can understand and use</li>	<li>In your Express API use the <code>pusher-http-node</code> library (server SDK) to send these processed events to Pusher Channels service</li>	<li>In your React Native apps use the <code>pusher-js</code> library (client SDK) to connect to Channels service and subscribe to the events your Express API is sending.</li>	</ul>		<p>I hope this clarifies it a bit!</p>	"
54158604,95188111,54166553,3,0,Mon Jan 14 10:41:00 EST 2019,643516,"I see. While I'm not familiar with the Arduino Pusher library (it's 3rd party supported) I guess it could work that way :)"
54158604,95177875,54166553,3,0,Mon Jan 14 00:29:00 EST 2019,5156141,"Hi @zmarkan, thanks for such an extensive reply. Glad that no issues have been identified, I will get to work following your advice and the examples. So to confirm, the API would handle the transmission **to** pusher and the clients (sensors and RN apps) would point to the Pusher channels service to receive messages **from** Pusher, and not my API?"
54158604,95186786,54166553,3,0,Mon Jan 14 10:00:00 EST 2019,643516,"Oh - gotcha. For the RN apps definitely, but for the sensors I wasn't sure you needed to communicate them as well.		What kind of data you need to communicate _to_ the sensors @user5156141?"
54158604,95187191,54166553,3,0,Mon Jan 14 10:12:00 EST 2019,5156141,"it would just be a simple string instruction such as â€œPOLLâ€? or â€œFETCH_STATUSâ€?. Nothing more than 80 characters."
