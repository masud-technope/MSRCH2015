thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
54868714,54868714,null,1,0,Mon Feb 25 14:46:00 EST 2019,4450629,"<p>I have implemented the INotifyCollectionChanged to bind to my ObservableCollection which all works fine.  However my data on my collection comes from a JSON webservice, and there are other systems that update it as well as my app.  Therefore, I need to refresh the JSON to my collection from time to time.</p>		<p>I can refresh the collection through a timer, which all works fine, however when I do this the screen flashes as I guess it redraws the screen, which looks terrible, so I was wondering if there is a way to stop it.  Obviously the INotifyCollectionChanged interface doesn't overly help in this situation as the app has not changed the collection, but another app may have, so I need to refresh my collection to ensure it's up to date before I make any further changes where I can use the INotifyCollectionChanged interface and stop the refreshing blink!</p>		<p>Some code if it helps, below is my ObservableCollection:</p>		<pre><code>private WebJSON _webjson;    	private ObservableCollection&lt;Group&gt; _groups;	    private ObservableCollection&lt;Group&gt; Groups	    {	        get { return _groups; }	        set	        {	            if (_groups != value)	            {	                _groups = value;	                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Groups)));	            }	        }	    }	public event PropertyChangedEventHandler PropertyChanged;	</code></pre>		<p>In my main constructor I have:</p>		<pre><code>public TestPage()	    {	        this.InitializeComponent();		        DispatcherTimer timer;	        timer = new DispatcherTimer();	        timer.Interval = TimeSpan.FromMilliseconds(60000);	        timer.Tick += async (s, e) =&gt;	        {	            Groups = new ObservableCollection&lt;Group&gt;(await _webjson.GetGroupsAsync());	        };	        timer.Start();	}	</code></pre>		<p>This is the bit that flashes or blinks the screen, when the timer refreshes the data from my webjson class.  The webjson.GetGroupsAsync is the class that goes off to the JSON API and gets the data, I've not included that code as I don't believe its relevant.</p>		<p>Any updates that I do in the App work fine, it's just getting the data afresh from the JSON API on the timer that causes the screen blink.  Same thing happens if I implement a manual refresh on a button or on the CommandBar etc.</p>		<p>Then I am just using x:Bind to bind the data to a GridView as you would.</p>		<p>I also tried using a standard timer and when that fires calling:</p>		<pre><code>private async Task Refresh()	    {	 await Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.High, async () =&gt;	         {	             Groups = new ObservableCollection&lt;Group&gt;(await _webjson.GetGroupsAsync());		         });	    }	</code></pre>		<p>And the same flash/blink happens.</p>		<p>Is there anyway to re-get data from the JSON API and refresh my gridview without having this annoying refresh blink?</p>		<p>Thanks</p>	"
54868714,96508655,54868714,3,0,Mon Feb 25 15:06:00 EST 2019,137427,"What device are you using?  Or does this happen on any device?"
54868714,96509025,54868714,3,0,Mon Feb 25 15:15:00 EST 2019,4450629,"It device is a Raspberry Pi 3 B+ thats the device it's being used upon"
54868714,96509796,54868714,3,0,Mon Feb 25 15:35:00 EST 2019,137427,"OK.  The Raspberry Pi doesn't have an accelerated graphics driver; that might be the root cause.  I'd love to see if it does the same on other devices, and I don't know how easy that would be for you to test."
54868714,96510206,54868714,3,1,Mon Feb 25 15:46:00 EST 2019,4450629,"I've launched the app on a laptop as well, it does the same thing on the refresh, so it does not appear to be pi related."
54868714,96510872,54868714,3,0,Mon Feb 25 16:04:00 EST 2019,137427,"OK, good.  This place is monitored by Microsoft so i'm sure they'll be able to help.  I don't do as much C# as I need to in order to be of help."
54868714,96531915,54868714,3,0,Tue Feb 26 08:40:00 EST 2019,4450629,"@MichaelXu-MSFT if fairness it does the same thing with only one item on the page, so it's nothing to do with the performance of gridview or updating the items progressively - you still get the same issue when you refresh the data from the JSON,"
54868714,96527859,54868714,3,0,Tue Feb 26 06:00:00 EST 2019,8546089,"@Dave, have you referred to this [document](https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/optimize-gridview-and-listview) to optimize the GridView performance. In this document, it shows how to update GridView items progressively."
54868714,54890126,54868714,2,2,Tue Feb 26 16:34:00 EST 2019,4450629,"<p>For anyone with the same issue I have just worked it out.  It's down to default transitions.  So in your GridView you just turn off transitions, easiest way seems to be to set the GridView's ItemContainerTransitions to an empty collection, eg:</p>		<pre><code>&lt;GridView.ItemContainerTransitions&gt;	    &lt;TransitionCollection /&gt;	&lt;/GridView.ItemContainerTransitions&gt;	</code></pre>		<p>Then like magic the refresh blink has vanished!</p>	"
54868714,54890297,54868714,2,0,Tue Feb 26 16:44:00 EST 2019,202179,"<p>Your problem is in this line:</p>		<pre><code>Groups = new ObservableCollection&lt;Group&gt;(await _webjson.GetGroupsAsync());	</code></pre>		<p>The best solution is to compare the content of your new groups and previous groups and then add/remove/replace items accordingly. While you can disable animations as you did this may cause other problems (e.g. I think that the scrollbar position won't be remembered this way).</p>	"
54868714,96550536,54890297,3,0,Tue Feb 26 17:12:00 EST 2019,4450629,"Nope it works fine and scrollbar position is remembered as well."
