thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
49000207,49000207,null,1,0,Tue Feb 27 02:32:00 EST 2018,5946129,"<p>i'm currently working with a sensor that sends bytes through MQTT and i'm using Paho MQTT module to make a testing environment so i can learn the back-end process of it.	Here is my code just to continuously print the messages that the topic sends. </p>		<pre><code>def on_message(sensorclt, userdata, msg):	    print(msg.payload)		def on_connect(sensorclt, userdata, flags, rc):	    if rc == 0:	        print('Connected')	        sensorclt.subscribe([(Topics[0], 0), (Topics[1], 0), (Topics[2], 0)])	    else:	        print("Failed to connect")	sensorclt = mqtt.Client()	sensorclt.connect(host='iot.eclipse.org', port=1883)	sensorclt.on_connect = on_connect	sensorclt.on_message = on_message	sensorclt.loop_forever()	</code></pre>		<p>Here is the output of a few seconds working: </p>		<pre><code>b'\x01\x01\x00\x1f\xa4\x94Z\xe3\x03\x00'	b'\x01\x01\x01\x1f\xa4\x94Z\n\x00\x80'	b'\x01\x01\x02\x1f\xa4\x94Z\x06\x00\x00'	b'\x01\x01\x00 \xa4\x94Z\xe4\x03\x00'	b'\x01\x01\x01 \xa4\x94Z\n\x00\x80'	b'\x01\x01\x02 \xa4\x94Z\x06\x00\x00'	b'\x01\x01\x00!\xa4\x94Z\xe3\x03\x00'	b'\x01\x01\x01!\xa4\x94Z\t\x00\x80'	</code></pre>		<p>The thing is that the sensor manufacturer tutorial says that there should be 10 bytes, not 8 or even sometimes 7 as the output is pointing. I can prove that information using a simple node-red environment to show that the topic is really sending 10 bytes and never less then that and node-red always receives 10, and again, nothing less .</p>		<p><a href="https://i.stack.imgur.com/WkYhJ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/WkYhJ.png" alt="Node-red Debug node with &quot;Complete Message Object&quot; as Output"></a></p>		<p>Why is this happening? How can i counter it?</p>	"
49000207,85021042,49000207,3,0,Tue Feb 27 12:07:00 EST 2018,5946129,"Ok, thank you, just placed it there cause i mentioned it"
49000207,85011306,49000207,3,0,Tue Feb 27 07:39:00 EST 2018,504554,"Removing the Node-RED tag as this really is more about the python code"
49000207,49003347,49000207,2,1,Tue Feb 27 07:30:00 EST 2018,504554,"<p>All the examples you have shown have exactly 10 bytes:</p>		<pre><code>'\x01' '\x01' '\x00' '\x1f' '\xa4' '\x94' 'Z' '\xe3' '\x03' '\x00'	'\x01' '\x01' '\x01' '\x1f' '\xa4' '\x94' 'Z' '\n' '\x00' '\x80'	'\x01' '\x01' '\x02' '\x1f' '\xa4' '\x94' 'Z' '\x06' '\x00' '\x00'	'\x01' '\x01' '\x00' ' ' '\xa4' '\x94' 'Z' '\xe4' '\x03' '\x00'	'\x01' '\x01' '\x01' ' ' '\xa4' '\x94' 'Z' '\n' '\x00' '\x80'	'\x01' '\x01' '\x02' ' ' '\xa4' '\x94' 'Z' '\x06' '\x00' '\x00'	'\x01' '\x01' '\x00' '!' '\xa4' '\x94' 'Z' '\xe3' '\x03' \x00'	'\x01' '\x01' '\x01' '!' '\xa4' '\x94' 'Z' '\t' '\x00' '\x80'	</code></pre>		<p>It just happens that some of those bytes fall with in the normal character range e.g. !, Z, space, new line (\n) or tab (\t)</p>	"
49000207,85021029,49003347,3,0,Tue Feb 27 12:07:00 EST 2018,5946129,"So how i'm supposed to access them separately ? And why on python it's showing those espacial characters and on node-red it doesn't happen? I don't understand much about bytes"
49000207,85021724,49003347,3,0,Tue Feb 27 12:26:00 EST 2018,504554,"It's just how python does string representation of byte arrays.  You need to look at how to access individual elements in python arrays, something like `msg.payload[5]` would access the 6th element in the array (indexes start at 0)"
