thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
55794304,55794304,null,1,1,Mon Apr 22 12:18:00 EDT 2019,6009772,"<p>I am trying to send temperature data from a NodeMCU to Google Cloud with Arduino IDE and using this library <a href="https://github.com/GoogleCloudPlatform/google-cloud-iot-arduino" rel="nofollow noreferrer">https://github.com/GoogleCloudPlatform/google-cloud-iot-arduino</a>. I created a registry and a device on google iot core and uploaded there the public key (ES256). On my side I uploaded the csa certificate on the ESP8266 though SPIFFS and correctly set all parameters and private key string in 'ciotc_config.h'. When I try to connect I get in the Serial Monitor the following output repeting itself:</p>		<pre><code>14:11:14.342 -&gt; Connecting to WiFi	14:11:15.725 -&gt; Waiting on time sync...	14:11:15.866 -&gt; Success to open ca file	14:11:15.913 -&gt; loaded	14:11:15.913 -&gt; 	14:11:15.913 -&gt; connecting...Refreshing JWT	14:11:19.797 -&gt; 	14:11:19.797 -&gt; connected!	14:11:19.843 -&gt; 	14:11:19.843 -&gt; connecting...Refreshing JWT	14:11:23.727 -&gt; 	14:11:23.727 -&gt; connected!	14:11:23.774 -&gt; 	14:11:23.774 -&gt; connecting...Refreshing JWT	</code></pre>		<p>and so on....</p>		<p>The data is not receive in the Cloud dashboard under Device > Configuration &amp; State History, I can see a yellow warning "Not yet acknowledged by device"</p>		<p>It seems I cannot connect with MQTT, because the data is not sent and I do not know how actually understand where is the mistake. Do you guys have any idea?</p>		<p>Thank you</p>		<pre><code>#include "DHT.h"	#include &lt;CloudIoTCore.h&gt;	#include "esp8266_mqtt.h"		#define DHTPIN 2 // what digital pin we're connected to	#define DHTTYPE DHT11 // DHT 11	unsigned long lastMillis = 0;	DHT dht(DHTPIN, DHTTYPE);		void setup() {	  Serial.begin(115200);	  setupCloudIoT(); // Creates globals for MQTT	  dht.begin();	}		void loop() {	  mqttClient-&gt;loop();	  delay(10);  // &lt;- fixes some issues with WiFi stability		  if (!mqttClient-&gt;connected()) {	    connect();	  }		  if (millis() - lastMillis &gt; 20000) {	    lastMillis = millis();	  String payload =	      String("{\"timestamp\":") + time(nullptr) +	      String(",\"temperature\":") + dht.readTemperature() +	      String(",\"humidity\":") + dht.readHumidity() +	      String("}");	    publishTelemetry(payload);	  }	}	</code></pre>		<p>UPDATE:	Serial Monitor output with debug:</p>		<pre><code>19:16:17.266 -&gt; SDK:3.0.0-dev(c0f7b44)/Core:2.5.0=20500000/lwIP:STABLE-2_1_2_RELEASE/glue:1.1/BearSSL:6778687	19:16:17.266 -&gt; sta config unchangedscandone	19:16:17.313 -&gt; Connecting to WiFi	19:16:17.313 -&gt; wifi evt: 2	19:16:17.406 -&gt; scandone	19:16:17.406 -&gt; state: 0 -&gt; 2 (b0)	19:16:17.406 -&gt; state: 2 -&gt; 3 (0)	19:16:17.406 -&gt; state: 3 -&gt; 5 (10)	19:16:17.406 -&gt; add 0	19:16:17.406 -&gt; aid 14	19:16:17.406 -&gt; cnt 	19:16:17.453 -&gt; 	19:16:17.453 -&gt; connected with Internet, channel 6	19:16:17.453 -&gt; dhcp client start...	19:16:17.453 -&gt; wifi evt: 0	19:16:19.282 -&gt; ip:XX.X.X.X,mask:XXX.XXX.XXX.X,gw:XX.X.X.XXX	19:16:19.282 -&gt; wifi evt: 3	19:16:19.282 -&gt; Waiting on time sync...	19:16:19.751 -&gt; SPIFFSImpl: allocating %zd+%z d+%z  d=%z   d bytes	19:16:19.751 -&gt; SPIFFSImpl: mounting fs @100000, size=2fb000, block=2000, page=100	19:16:19.798 -&gt; SPIFFSImpl: mount rc=0	19:16:19.798 -&gt; Success to open ca file	19:16:19.845 -&gt; loaded	19:16:19.845 -&gt; SPIFFS_close: fd=1	19:16:19.845 -&gt; 	19:16:19.845 -&gt; connecting...Refreshing JWT	19:16:23.255 -&gt; [hostByName] request IP for: mqtt.googleapis.com	19:16:23.301 -&gt; [hostByName] Host: mqtt.googleapis.com IP: XX.XXX.XXX.XXX	19:16:23.301 -&gt; :ref 1	19:16:23.395 -&gt; :wr 224 0	19:16:23.395 -&gt; :wrc 224 224 0	19:16:23.395 -&gt; :ack 224	19:16:23.395 -&gt; :rn 536	19:16:23.395 -&gt; :rd 5, 536, 0	19:16:23.395 -&gt; :rdi 536, 5	19:16:23.442 -&gt; :rd 87, 536, 5	19:16:23.442 -&gt; :rdi 531, 87	19:16:23.442 -&gt; :rd 5, 536, 92	19:16:23.442 -&gt; :rdi 444, 5	19:16:23.442 -&gt; :rd 439, 536, 97	19:16:23.442 -&gt; :rdi 439, 439	19:16:23.442 -&gt; :c0 439, 536	19:16:23.676 -&gt; :rn 536	19:16:23.676 -&gt; :rd 536, 536, 0	19:16:23.676 -&gt; :rdi 536, 536	19:16:23.676 -&gt; :c0 536, 536	19:16:23.770 -&gt; :rn 1072	19:16:23.770 -&gt; :rch 1072, 536	19:16:23.770 -&gt; :rd 1471, 1608, 0	19:16:23.770 -&gt; :rdi 536, 536	19:16:23.770 -&gt; :c 536, 536, 1608	19:16:23.770 -&gt; :rdi 536, 536	19:16:23.770 -&gt; :c 536, 536, 1072	19:16:23.770 -&gt; :rdi 536, 399	19:16:24.086 -&gt; :rch 536, 177	19:16:24.086 -&gt; 	19:16:24.086 -&gt; connected!	19:16:24.086 -&gt; 	19:16:24.086 -&gt; connecting...Refreshing JWT	19:16:27.510 -&gt; [hostByName] request IP for: mqtt.googleapis.com	19:16:27.510 -&gt; [hostByName] Host: mqtt.googleapis.com IP: XX.XXX.XXX.XXX	19:16:27.510 -&gt; pm open,type:2 0	19:16:27.510 -&gt; :close	19:16:27.510 -&gt; :ur 1	19:16:27.510 -&gt; :del	19:16:27.510 -&gt; :ref 1	19:16:27.604 -&gt; :wr 224 0	19:16:27.604 -&gt; :wrc 224 224 0	19:16:27.651 -&gt; :ack 224	19:16:27.651 -&gt; :rn 536	19:16:27.651 -&gt; :rch 536, 536	19:16:27.651 -&gt; :rch 1072, 536	19:16:27.651 -&gt; :rch 1608, 536	19:16:27.651 -&gt; :rd 5, 2144, 0	19:16:27.651 -&gt; :rdi 536, 5	19:16:27.651 -&gt; :rd 87, 2144, 5	19:16:27.651 -&gt; :rdi 531, 87	19:16:27.651 -&gt; :rd 5, 2144, 92	19:16:27.651 -&gt; :rdi 444, 5	19:16:27.651 -&gt; :rd 2047, 2144, 97	19:16:27.651 -&gt; :rdi 439, 439	19:16:27.651 -&gt; :c 439, 536, 2144	19:16:27.651 -&gt; :rdi 536, 536	19:16:27.651 -&gt; :c 536, 536, 1608	19:16:27.651 -&gt; :rdi 536, 536	19:16:27.651 -&gt; :c 536, 536, 1072	19:16:27.651 -&gt; :rdi 536, 536	19:16:27.651 -&gt; :c0 536, 536	19:16:27.885 -&gt; :rn 536	19:16:27.885 -&gt; :rch 536, 177	19:16:27.885 -&gt; :rd 399, 713, 0	19:16:27.885 -&gt; :rdi 536, 399	19:16:28.073 -&gt; 	19:16:28.073 -&gt; connected!	19:16:28.120 -&gt; 	19:16:28.120 -&gt; connecting...Refreshing JWT	</code></pre>		<p>UPDATE2: JWT validation and credential debug</p>		<p>Below the credential and JWT obtained from Serial Monitor:</p>		<pre><code>18:54:41.890 -&gt; Waiting on time sync...	18:54:42.904 -&gt; Success to open ca file	18:54:42.938 -&gt; loaded	18:54:42.971 -&gt; projects/iot-esp8266-new/locations/us-central1/registries/iotcore-registry/devices/esp8266	18:54:42.971 -&gt; Refreshing JWT	18:54:46.318 -&gt; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX	18:54:46.351 -&gt; 	18:54:46.351 -&gt; connecting...Refreshing JWT	</code></pre>		<p>The JWT generated has been validated with PyJWT as below:</p>		<pre><code>import jwt	public_key =  open('ec_public.pem').read()	token = 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'	payload = jwt.decode(token, public_key, algorithms=['ES256'], audience="iot-esp8266-new")	payload	{'iat': 1556988880, 'exp': 1556992480, 'aud': 'iot-esp8266-new'}	</code></pre>	"
55794304,98296659,55794304,3,0,Tue Apr 23 15:47:00 EDT 2019,3960558,"The log suggests that you are actually getting the connection and losing it. With other MQTT brokers, that can happen if a device has permission to connect, but then tries to subscribe to another topic for which it lacks permission. So much of the device firmware here is in the library that I would check the cloud configuration first."
55794304,98325066,55794304,3,0,Wed Apr 24 12:36:00 EDT 2019,6009772,"Hi @MBer, thank you for the answer...I see that is getting connected and disconnected, almost immediately...I think on cloud side I did everything I had to do, I activated billing, api and pubsub, then created project, registry and device and attached the public key there, do not actually know what else I should do..."
55794304,98620482,55794304,3,0,Sat May 04 18:38:00 EDT 2019,3534690,"You shouldn't need to convert at all. Just use the root cert as is."
55794304,98469357,55794304,3,0,Mon Apr 29 15:59:00 EDT 2019,1552344,"A few questions:	Which version of the library do you have installed?	Which SDK do you have for the 8266?		It may be helpful to enable more verbose debugging in Arduino by setting the debug level in the IDE under Tools > Core Debug Level > Verbose."
55794304,98606799,55794304,3,0,Fri May 03 23:42:00 EDT 2019,1552344,"Add debugging to this line and make sure the configuration is getting set correctly - https://github.com/GoogleCloudPlatform/google-cloud-iot-arduino/blob/master/examples/Esp8266-lwmqtt/esp8266_mqtt.h#L136"
55794304,98478968,55794304,3,0,Mon Apr 29 23:39:00 EDT 2019,3534690,"Did you put the root certificate from Google on the device? Just making sure the csa cert you're talking about is both the private half of the SSL key pair you registered with the device registry when you created the device AND the root certificate you get from https://pki.google.com/roots.pem."
55794304,98599705,55794304,3,0,Fri May 03 17:18:00 EDT 2019,6009772,"Hi @class the SDK should be this one: 3.0.0-dev(c0f7b44). I enabled debud in the IDE and got the following output, but I actually cannot interpret it. I posted an update in the original question."
55794304,98599834,55794304,3,0,Fri May 03 17:24:00 EDT 2019,6009772,"@GabeWeiss yes, I downloaded the root certificate from there, converted into .crt file and flashed into the board. SSL keys I posted the public one in the cloud when I registered the device and the private in the config.h script."
55794304,98370013,55794304,3,0,Thu Apr 25 16:56:00 EDT 2019,3960558,"Good luck then - unless someone who has had the same problem stops by, solving will be difficult without logs from Cloud Pub/Sub."
55794304,98621044,55794304,3,0,Sat May 04 19:16:00 EDT 2019,6009772,"I just followed the instruction provided from the library readme, it seems that for ESP8266 they are using a DER format for the root certificate. But I can also try to use it as is and let you know."
55794304,55978208,55794304,2,1,Fri May 03 23:34:00 EDT 2019,1552344,"<p><strong>Update</strong> There were changes in the 2.5.x branch of the ESP8266 community SDK. The library will need updates to support it alongside the 2.4.x libraries and they are not yet complete. For now, it's easiest to just use the 2.4.2 SDK or you can <a href="https://github.com/GoogleCloudPlatform/google-cloud-iot-arduino/issues/92" rel="nofollow noreferrer">use the workaround mentioned in the library documentation</a> until a fix is released.</p>		<p><strong>Previous response</strong></p>		<p>I have anecdotally verified the 1.0.5 version of the library is working with ESP8266 hardware. You may want to try printing the parameters out and make sure they are getting set correctly. This is probably easiest done by replacing this:</p>		<pre class="lang-cpp prettyprint-override"><code>  if (!mqttClient-&gt;connected()) {	    connect();	  }	</code></pre>		<p>with the following line, in your main project file:</p>		<pre class="lang-cpp prettyprint-override"><code>  if (!mqttClient-&gt;connected()) {	    // Example debug line	    Serial.println(device-&gt;getClientId());	    Serial.println(getJwt());	    // End debug line	    connect();	  }	</code></pre>		<p>If the configuration looks correct, you may want to try verifying the JWT with something like jwt.io. It makes sense to add a helper to the library for this.</p>	"
55794304,98619212,55978208,3,0,Sat May 04 17:20:00 EDT 2019,6009772,"Hi @class thank you for your answer. I already debugged with getJwt() before raising this question, I re-checked again. Configuration looks fine and also the JWT generated looks fine. This time I validated it with PyJwt, please see update in the question. PS: I am using a NodeMCU. Do you think has something to do with it? Thanks"
55794304,99015850,55978208,3,0,Sat May 18 04:19:00 EDT 2019,1552344,"Updated answer."
55794304,99144802,55978208,3,0,Wed May 22 20:06:00 EDT 2019,6009772,"Hi @class I confirm that with version 2.4.2 connection is working. Thanks."
