thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
52908085,52908085,null,1,2,Sat Oct 20 17:04:00 EDT 2018,4442344,"<p>I've deployed the iot stack with docker. These are the used containers:</p>		<ul>	<li>fiware/orion:1.13.0</li>	<li>fiware/iotagent-json:1.8.0</li>	<li>eclipse-mosquitto:1.4.12</li>	<li>[other containers not involved in the issue ...]</li>	</ul>		<p>I've registered the following device on the agent:</p>		<pre><code>{	     "device_id": "t3",	     "service": "lmobile",	     "service_path": "/lmobile_Industry",	     "entity_name": "t3",	     "entity_type": "Device",	     "endpoint": "tcp://&lt;mqttborker_publicip&gt;:&lt;port&gt;",	     "transport": "MQTT",	     "attributes": [{	                "object_id": "led",	                "name": "led",	                "type": "text"	     }],	     "lazy": [],	     "commands": [{	                "object_id": "c",	                "name": "c",	                "type": "Command"	     }],	     "static_attributes": [	                      ....	     ],	     "protocol": "JSON"	}	</code></pre>		<p>and the corresponding entity has been properly created on the OCB and when I publish a new measure on the mqttbroker, under the topic <code>/&lt;apikey&gt;/t3/attrs</code> the measure is properly forward toward the OCB.</p>		<p>In order to send the command <code>c</code> to the device I send the following updateContext on OCB:</p>		<pre><code>curl -s -X POST http://&lt;orionhost&gt;:1026/v1/updateContext	       -H 'accept: application/json'	       -H 'cache-control: no-cache' 	       -H 'content-type: application/json'	       -H 'fiware-service: lmobile'	       -H 'fiware-servicepath: /lmobile_Industry'	       -d '{	             "contextElements": [	                 {	                    "type": "Device",	                     "isPattern": "false",	                     "id": "t3",	                     "attributes": [	                       {	                         "name":"c",	                         "type":"Command",	                         "value":100	                       }	                     ]	                 }	             ],	             "updateAction": "UPDATE"	         }'	</code></pre>		<p>and I receive the following error response:</p>		<pre><code>{	     "errorCode": {	         "code": "404",	         "reasonPhrase": "No context element found",	         "details": "invalid context provider response"	     }	}	</code></pre>		<p>In the OCB Log I can see the following WARNING Message:	<code>time=Thursday 18 Oct 08:55:54 2018.431Z | lvl=WARN | corr=N/A | trans=N/A | from=N/A | srv=N/A | subsrv=N/A | comp=Orion | op=postQueryContext.cpp[169]:queryForward | msg=Other Error (context provider response to QueryContext is empty)</code>.	Anyway, the updateContext is properly forwarded to the Agent.</p>		<p>In the Agent Log (in DEBUG) I can see the followings:</p>		<pre><code>iotstack_agent-json.1.xyz@xerus-1    | time=2018-10-18T09:02:33.975Z | lvl=DEBUG | corr=8d2864ec-d2b4-11e8-b445-02420aff0161 | trans=de5680e7-0727-4577-ac44-ddeb59df1f31 | op=IoTAgentNGSI.GenericMiddlewares | srv=lmobile | subsrv=/lmobile_Industry | msg=Request for path [/updateContext] from [&lt;agent_publicip&gt;:&lt;port&gt;] | comp=IoTAgent	iotstack_agent-json.1.xyz@xerus-1    | time=2018-10-18T09:02:33.976Z | lvl=DEBUG | corr=8d2864ec-d2b4-11e8-b445-02420aff0161 | trans=de5680e7-0727-4577-ac44-ddeb59df1f31 | op=IoTAgentNGSI.GenericMiddlewares | srv=lmobile | subsrv=/lmobile_Industry | msg=Body:	iotstack_agent-json.1.xyz@xerus-1    |	iotstack_agent-json.1.xyz@xerus-1    | {	iotstack_agent-json.1.xyz@xerus-1    |     "contextElements": [	iotstack_agent-json.1.xyz@xerus-1    |         {	iotstack_agent-json.1.xyz@xerus-1    |             "type": "Device",	iotstack_agent-json.1.xyz@xerus-1    |             "isPattern": "false",	iotstack_agent-json.1.xyz@xerus-1    |             "id": "t3",	iotstack_agent-json.1.xyz@xerus-1    |             "attributes": [	iotstack_agent-json.1.xyz@xerus-1    |                 {	iotstack_agent-json.1.xyz@xerus-1    |                     "name": "c",	iotstack_agent-json.1.xyz@xerus-1    |                     "type": "Command",	iotstack_agent-json.1.xyz@xerus-1    |                     "value": "100"	iotstack_agent-json.1.xyz@xerus-1    |                 }	iotstack_agent-json.1.xyz@xerus-1    |             ]	iotstack_agent-json.1.xyz@xerus-1    |         }	iotstack_agent-json.1.xyz@xerus-1    |     ],	iotstack_agent-json.1.xyz@xerus-1    |     "updateAction": "UPDATE"	iotstack_agent-json.1.xyz@xerus-1    | }	iotstack_agent-json.1.xyz@xerus-1    |	iotstack_agent-json.1.xyz@xerus-1    |  | comp=IoTAgent	iotstack_agent-json.1.xyz@xerus-1    | time=2018-10-18T09:02:33.978Z | lvl=DEBUG | corr=8d2864ec-d2b4-11e8-b445-02420aff0161 | trans=de5680e7-0727-4577-ac44-ddeb59df1f31 | op=IoTAgentNGSI.DomainControl | srv=lmobile | subsrv=/lmobile_Industry | msg=response-time: 6 | comp=IoTAgent	</code></pre>		<p>Here I don't see warnings or errors but no commands are forwarded to the MQTT Broker on any topic (I'm subscribed both to the specific topic for commands <code>/&lt;apikey&gt;/t3/cmd</code> and to all topics by using the wildcard <code>#</code>).</p>	"
52908085,52948137,52908085,2,0,Tue Oct 23 11:41:00 EDT 2018,1485926,"<p>Not fully sure, but maybe is a problem at provisioning stage. The <code>endpoint</code> starting with <code>tcp://</code> is a bit weird to me...</p>		<p>More in detail, looking to <a href="https://fiware-iot-stack.readthedocs.io/en/master/device_api/index.html#register-your-iot-device" rel="nofollow noreferrer">ths piece of documentation</a> I read:</p>		<blockquote>	  <p>The example shows there are two differences comparing [MQTT provision]	  with provisioning for HTTP:</p>	  	  <ul>	  <li>The absence of an "endpoint" field</li>	  <li>The presence of "transport" field, which value has to be "MQTT".</li>	  </ul>	</blockquote>		<p>So I understant that you shouldn't use <code>endpoint</code> field at all at provisioning time.</p>	"
52908085,92805712,52948137,3,0,Tue Oct 23 12:19:00 EDT 2018,4442344,"Hi fgalan. Thank you for replying. I tried to publish the same device without the endpoint field. But nothing changed"
52908085,52989764,52908085,2,1,Thu Oct 25 12:52:00 EDT 2018,1179828,"<p>@fgalan is correct - you do not need the <code>endpoint</code> field when provisioning a service group for MQTT</p>		<pre><code>curl -iX POST \	  'http://localhost:4041/iot/services' \	  -H 'Content-Type: application/json' \	  -H 'fiware-service: openiot' \	  -H 'fiware-servicepath: /' \	  -d '{	 "services": [	   {	     "apikey":      "4jggokgpepnvsb2uv4s40d59ov",	     "cbroker":     "http://orion:1026",	     "entity_type": "Thing",	     "resource":    ""	   }	 ]	}'	</code></pre>		<p>However it is essential that <code>config.json</code> file is configured correctly to talk to the MQTT Broker.</p>		<p>Personally I'd use <code>docker-compose</code> and assign the values using Docker environment variables, but it is also possible to edit the <code>config.json</code> file directly:</p>		<pre><code> environment:	     - "IOTA_MQTT_HOST=mosquitto" # The host name of the MQTT Broker	     - "IOTA_MQTT_PORT=1883" # The port the MQTT Broker is listening on to receive topics	</code></pre>		<p>Here is the mapping between <code>ENV</code> variables and <code>config.json</code> settings:</p>		<ul>	<li><code>IOTA_MQTT_HOST</code>  - mqtt.host</li>	<li><code>IOTA_MQTT_PORT</code>  - mqtt.port</li>	<li><code>IOTA_MQTT_USERNAME</code>   - mqtt.username</li>	<li><code>IOTA_MQTT_PASSWORD</code> -    mqtt.password</li>	<li><code>IOTA_MQTT_QOS</code> - mqtt.qos</li>	</ul>		<p>Note that <code>cbroker</code> is also an optional attribute - if it is not	provided, the IoT Agent uses the default context broker URL as defined in the	configuration file</p>		<p>The <a href="https://github.com/Fiware/tutorials.IoT-over-MQTT" rel="nofollow noreferrer">Tutorial</a> for provisioning a device over MQTT uses the Ultralight IoT Agent, but the JSON IoT Agent should work in the same fashion.</p>	"
