thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
32565360,32565360,null,1,2,Mon Sep 14 12:53:00 EDT 2015,3747979,"<p>I'm trying to make application that would take a picture using web-camera on Raspberry PI running Windows IoT. The problem is that I can't find console app template.Universal Windows blank app template provides me with GUI but I'm going to call this app from python script so it should be without one.	 Windows IoT projects provide background task template but the output is .winmd file and I cant execute it from python neither.</p>		<p>What is the way to create simple console app in Windows IoT using c#?	Thanks</p>	"
32565360,52985695,32565360,3,0,Mon Sep 14 12:57:00 EDT 2015,23528,"i dont think you can."
32565360,52985705,32565360,3,0,Mon Sep 14 12:57:00 EDT 2015,21567,"The [FAQ](https://ms-iot.github.io/content/en-US/Faqs.htm) seems to suggest, that console mode apps are not supported (at least not when you actually want to "see" the console); look for the entry "Are true console apps supported on Windows 10 IoT Core?"."
32565360,52985715,32565360,3,2,Mon Sep 14 12:57:00 EDT 2015,134204,"You *can* call a desktop application from the command line. You don't need to interact with the GUI"
32565360,32565990,32565360,2,2,Mon Sep 14 13:23:00 EDT 2015,4574,"<p><a href="https://visualstudiogallery.msdn.microsoft.com/06507e74-41cf-47b2-b7fe-8a2624202d36" rel="nofollow">Console applications are supported in Windows IoT but apparently in C++ only</a>. Perhaps you could try to create a solution that has <a href="https://ms-iot.github.io/content/en-US/win10/samples/ConsoleApp.htm" rel="nofollow">a very simple C++ console application</a> that just handles interaction with the user plus a C# class library with all the logic and hardware related code.</p>	"
32565360,53136867,32565990,3,0,Fri Sep 18 05:34:00 EDT 2015,4780581,"Not sure if it works on IoT, but Universal apps that register a protocol handler can be protocol activated (essentially launching them by URI, ie calling appprotocol://[params]"
32565360,53019705,32565990,3,0,Tue Sep 15 09:53:00 EDT 2015,3747979,"thanks for the answer. I'll mark it as a solution. Unfortunately it I didn't succeed in adding console app to my python script cause as it turned out python does not have possibility to run other apps in windows universal context"
32565360,33831124,32565360,2,0,Fri Nov 20 16:08:00 EST 2015,1898217,"<p>If you still wish to move forward using C#, it may be sufficient to create the application as a blank Universal Windows Platform application as 1.) The UI will not be instantiated if the RPi2 is powered on without a connected HDMI cable 2.) You may find it useful to use the included UI as a means of live-debugging your application.</p>	"
32565360,36414666,32565360,2,1,Mon Apr 04 23:33:00 EDT 2016,2671330,"<p>Seems to works with a standard c# console apps. How I found out?	I used Reflector and examined all exe files in c:\windows\system32 on the Pi, and one was a .NET assembly: netcmd.exe	When I look at netcmd.exe in Reflector, it says it's build with standard .NET 4.5, this can't be right? But I made a standard c# console app with framework 4.5, added this:</p>		<pre><code>class Program	{	    static void Main(string[] args)	    {	        Console.WriteLine("Hello world");	    }	}	</code></pre>		<p>put the test.exe on the Pi, and voila: 	C:>test	Hello world</p>		<p>Weirdest thing.</p>		<p>I haven't tested more than this, but I imagine You get into trouble with unimplemented API's since only a subset of .NET (same as in Background Application (IoT)?) exist on the Pi, so you must "manually" take care not use unimplemented stuff (or code most in Background Application "mode", and in the final stage, move to standard .NET 4.5 and add the console code).</p>	"
32565360,77719408,36414666,3,0,Fri Jul 28 17:11:00 EDT 2017,2228257,"Apropos netcmd.exe. Do you know where I can get this file? It would be of much use on a normal Windows 10, too, for automation, because it can connect to WPA2-Enterprise without user interaction."
32565360,78586648,36414666,3,1,Tue Aug 22 10:02:00 EDT 2017,2671330,"Daniel: it does not run on normal Windows, get "Access is denied.". You can get it from Windows_10_IoT_Core_RPi2.msi, extract the File_WindowsIoTRpi2Flash.ffu, mount it (instructions here http://infinitecurious.com/install-windows-10-iot-from-windows-7/)"
32565360,78589370,36414666,3,0,Tue Aug 22 11:11:00 EDT 2017,2228257,"Ah, too bad... Thank you for the reply though!"
32565360,43303810,32565360,2,0,Sun Apr 09 06:40:00 EDT 2017,400223,"<p>If you use your Win 10 device for a single (or multiple) app that all do not need a GUI, (eg for service apps only), you can boot the device with the <code>headless</code> option.</p>		<p><strong>This boots without the whole UI with an extra resource bonus.</strong>, buts still can be accessed over the network.</p>		<p>display the current state of your device, use the setbootoption utility:</p>		<pre><code>  [192.168.0.243]: PS C:\&gt; setbootoption.exe	</code></pre>		<p>To modify the state of your device to enable headless mode, use the setbootoption utility with the headless arg:</p>		<pre><code>  [192.168.0.243]: PS C:\&gt; setbootoption.exe headless	  [192.168.0.243]: PS C:\&gt; shutdown /r /t 0	</code></pre>		<p>To modify the state of your device to enable headed mode, use the setbootoption utility with the headed arg:</p>		<pre><code>  [192.168.0.243]: PS C:\&gt; setbootoption.exe headed	  [192.168.0.243]: PS C:\&gt; shutdown /r /t 0	</code></pre>		<p><strong>The device will start up with a black screen.</strong></p>	"
