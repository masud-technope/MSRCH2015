thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
34282595,34282595,null,1,0,Tue Dec 15 06:41:00 EST 2015,5043475,"<p>In my current project, we are trying to develop a simple application "Notify me when my room temperature goes beyond the certain limit". The flow diagram of this application as follow: <a href="https://i.stack.imgur.com/PgH4s.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/PgH4s.png" alt="enter image description here"></a></p>		<p>Here, temperature sensor is producing temperature data <strong>periodically</strong> and the sensed data is send to the <code>CalculateAvgTemp</code> component. The <code>CalculateAvgTemp</code> component waits for 5 samples and then pass the calculated value to the <code>DisplayTempController</code>. The code of <code>CalculateAvgTemp</code> component, written in <strong>node.js</strong> is as follows.</p>		<pre><code>var mqtt=require('mqtt');	var client=mqtt.connect('mqtt://test.mosquitto.org:1883');	var NUM_SAMPLE_FOR_AVG=5;	var numSample=0;	var tempCelcius=0;	var currentAvg=0;	client.subscribe('sensorMeasurement');	client.on('message',function(topic,payload){		sensorMeasurement=JSON.parse(payload);	console.log(sensorMeasurement);		if(numSample &lt;= NUM_SAMPLE_FOR_AVG){	     numSample = numSample + 1;		    if(sensorMeasurement.unitofMeasurement=='F'){	        tempCelcius=((sensorMeasurement.tempValue-32)*(5/9));       	    }	    else{	        tempCelcius=sensorMeasurement.tempValue;		    }       		    currentAvg=parseFloat(currentAvg)+parseFloat(tempCelcius);		    if(numSample==NUM_SAMPLE_FOR_AVG){	        //console.log(currentAvg);	        currentAvg=currentAvg/NUM_SAMPLE_FOR_AVG;	        var avgTemp={"avgTemp":parseFloat(currentAvg),"unitofMeasurement":sensorMeasurement.unitofMeasurement};	        client.publish('roomAvgTemp',JSON.stringify(avgTemp));	         numSample =0;	         currentAvg=0;	    }	}       	</code></pre>		<p>});</p>		<p>We are trying to implement the <code>calculateAvgTemp</code> component in <strong>Node-RED</strong>. Node-RED provide <strong>function node</strong> that allows developers to write custom function. Now, the real problem starts here --- Node-RED custom function does not implement the <code>calculateAvgTemp</code> functionality correctly. It does not wait for 5 temperature values and fires whenever the temperature arrives. My question is that - Is this Node-RED limitation OR should we implement the <code>calcuateAvgTemp</code> functionality differently in Node-RED, if yes then - how can we implement the functionality in Node-RED?	The code of <code>CalculateAvgTemp</code>written in <strong>Node-RED</strong> is as follows:</p>		<pre><code>context.temps = context.temps || [];	sensorMeasurement=JSON.parse(msg.payload);	var tempValue=parseFloat(sensorMeasurement.tempValue);	context.temps.push(tempValue);	if (context.temps.length &gt; 4) {	if (context.temps.length == 6) {	//throw last value away	context.temps.shift();	}	var avg=0;	for (var i=0; i&lt;=context.temps.length; i++) {	avg += context.temps[i];	}	avg = avg/5;	msg.payload = parseFloat(avg);	return msg;	} else {	return null;	}	</code></pre>	"
34282595,34286051,34282595,2,2,Tue Dec 15 09:58:00 EST 2015,504554,"<p>A function node does not need to pass anything on, if it doesn't return (or returns null) then the flow will stop at that point.</p>		<p>You can also store state in a function node using the <code>context</code> variable. This means you could store the last 5 values passed in and only return something once you have all 5 to compute the average.</p>		<p>Something like:</p>		<pre><code>context.temps = context.temps || [];	context.temps.push(msg.payload);	if (context.temps.length &gt; 4) {	  if (context.temps.length == 6) {	    //throw last value away	    context.temps.shift();	  }	  var avg=0;	  for (var i=0; i&lt;context.temps.length; i++) {	    avg += context.temps[i];	  }	  avg = avg/5;	  msg.payload = avg;	  return msg;	} else {	  return null;	}	</code></pre>	"
34282595,56316727,34286051,3,0,Tue Dec 15 11:11:00 EST 2015,5043475,"@hardilb: It produces output something like: sensorMeasurement : msg.payload : number	NaN	15/12/2015, 16:40:38ec595717.13a6a8	sensorMeasurement : msg.payload : number	NaN"
34282595,56316925,34286051,3,0,Tue Dec 15 11:16:00 EST 2015,504554,"The code supplied was only meant to be a guide, you will need to edit it to match your actual situation"
34282595,56318446,34286051,3,0,Tue Dec 15 11:52:00 EST 2015,5043475,"@hardilb:  I have modified code as per requirement. Could you please check it? Still it display same msg: 15/12/2015, 17:21:23ec595717.13a6a8	sensorMeasurement : msg.payload : number	NaN"
34282595,34506280,34282595,2,0,Tue Dec 29 07:15:00 EST 2015,5043475,"<p>@hardillb---- Many Many Thank for pointer. Following is the solution</p>		<pre><code>context.temps = context.temps || [];	data=JSON.parse(msg.payload);	context.temps.push(data.tempValue);	 var NO_OF_SAMPLE=5;	if (context.temps.length &gt; 4) {	 var avg=0.0;	 for (var i=0; i&lt;NO_OF_SAMPLE; i++) {	 avg =parseFloat(avg)+parseFloat(context.temps[i]);	  }	  avg =avg/NO_OF_SAMPLE;	  msg.payload = avg;	  context.temps=[];	  return msg;	  } else {	   return null;	  }	</code></pre>	"
