thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
46201624,46201624,null,1,-1,Wed Sep 13 15:37:00 EDT 2017,8604287,"<p>Problem statement:- I am trying to automate a MQTT flow, for that I a need to publish and subscribe to multiple topics but in a sequential order. The trick part is that the message received from the first publish has some value which will be passed in the next sub/pub commands.</p>		<p>For eg. </p>		<ol>	<li>Sub to topicA/abc</li>	<li>Pub to topicA/abc</li>	<li>Message received on topicA/abc is xyz</li>	<li>sub to topic topicA/xyz</li>	<li>pub to topic topicA/xyz</li>	</ol>		<p>I am able to receive the message on the first topic but I am not getting how to access the payload of the received message in the main method and pass and attach it to the next topic for next sub.</p>		<p>Is there a way to get the retrieved the message payload from messageArrived callback method to the main method where is client instance is created?</p>		<p>Note:- I am using a single client for publish and subscribe. </p>		<p>kindly help me out as I have ran out of options and methods to do so.</p>		<p>Edited:-</p>		<p>Code snippet</p>		<p>Main class</p>		<pre><code>public class MqttOverSSL {	String deviceId;	MqttClient client = null;		public MqttOverSSL() {		}		public MqttOverSSL(String deviceId) throws MqttException, InterruptedException {	    this.deviceId = deviceId;	    MqttConnection mqttConObj = new MqttConnection();	    this.client = mqttConObj.mqttConnection();	}		public void getLinkCodeMethod() throws MqttException, InterruptedException {		    client.subscribe("abc/multi/" + deviceId + "/linkcode", 0);	    publish(client, "abc/multi/" + deviceId + "/getlinkcode", 0, "".getBytes());			}		}	</code></pre>		<p>Mqtt Claback impl:-</p>		<pre><code>public class SimpleMqttCallBack implements MqttCallback {		  String arrivedMessage;		  @Override	  public void connectionLost(Throwable throwable) {	    System.out.println("Connection to MQTT broker lost!");	  }		  @Override	  public void messageArrived(String s, MqttMessage mqttMessage) throws Exception {		    arrivedMessage = mqttMessage.toString();		    System.out.println("Message received:\t" + arrivedMessage);		    linkCode(arrivedMessage);	  }		  @Override	  public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {	    System.out.println("Delivery complete callback: Publish Completed "+ Arrays.toString(iMqttDeliveryToken.getTopics()));	  }			  public void linkCode(String arrivedMessage) throws MqttException {	    System.out.println("String is "+ arrivedMessage);	    Gson g = new Gson();	    GetCode code = g.fromJson(arrivedMessage, GetCode.class);	    System.out.println(code.getLinkCode());	  }		}	</code></pre>		<p>Publisher class:- </p>		<pre><code>public class Publisher {	    public static void publish(MqttClient client, String topicName, int qos, byte[] payload) throws MqttException {		        String time = new Timestamp(System.currentTimeMillis()).toString();	        log("Publishing at: "+time+ " to topic \""+topicName+"\" qos "+qos);		        // Create and configure a message	        MqttMessage message = new MqttMessage(payload);	        message.setQos(qos);		        // Send the message to the server, control is not returned until	        // it has been delivered to the server meeting the specified	        // quality of service.	        client.publish(topicName, message);	    }		    static private void log(String message) {	        boolean quietMode   = false;	        if (!quietMode) {	            System.out.println(message);	        }	    }	}	</code></pre>	"
46201624,79366842,46201624,3,0,Wed Sep 13 15:55:00 EDT 2017,504554,"Without sharing any code with we really can't help"
46201624,79368333,46201624,3,0,Wed Sep 13 16:37:00 EDT 2017,8604287,"Hi hardilib, have added the same within the original post. Kindly have a look."
46201624,46202935,46201624,2,0,Wed Sep 13 16:47:00 EDT 2017,504554,"<p>OK, it's a little clearer what you are trying to do now.</p>		<p>Short answer No, you can not pass values back to the "main method". MQTT is asynchronous that means you have no idea when a message will arrive for a topic you subscribe to.</p>		<p>You need to update your code to deal check what the incoming message topic is and then deal do what ever action you wanted to do with that response in the <code>messageArrived()</code> handler. If you have a sequence of task to do then you may need to implement what is known as a state machine in order to keep track of where you are in the sequence.</p>	"
