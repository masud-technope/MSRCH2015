thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
54539021,54539021,null,1,2,Tue Feb 05 16:34:00 EST 2019,2143808,"<p>I would like to use my bluetooth device (for example I'm going to create an app to be installed in a tablet) to send data (set of attributes) in Orion Context Broker via IoT Agent.</p>		<p>I'm looking for the FIWARE IoT Agent and probably I've to use IoT Agent LWM2M. Is it correct?	Thanks in advance and regards.</p>		<p>Pasquale</p>	"
54539021,54716542,54539021,2,2,Fri Feb 15 20:24:00 EST 2019,1179828,"<p>Assuming you have freedom of choice, you probably don't need an IoT Agent for that, you just need a service acting as a bluetooth receiver which can receive your message and pass it on using a recognisable transport.</p>		<p>For example, you can receive data using the following <a href="https://stackoverflow.com/questions/47764906/how-to-receive-data-from-bluetooth-device-using-node-js">Stack Overflow answer</a></p>		<p>You can then extract the necessary information to identify the device and the context to be updated.</p>		<p>You can programmatically send NGSI requests in any language capable of HTTP - just generate a library using the NGSI Swagger file - an example is shown in the <a href="https://github.com/Fiware/tutorials.Accessing-Context" rel="nofollow noreferrer">tutorials</a></p>		<pre class="lang-js prettyprint-override"><code>// Initialization - first require the NGSI v2 npm library and set	// the client instance	const NgsiV2 = require('ngsi_v2');	const defaultClient = NgsiV2.ApiClient.instance;		defaultClient.basePath = 'http://localhost:1026/v2';			// This is a promise to make an HTTP PATCH request to the /v2/entities/&lt;entity-id&gt;/attr end point	function updateExistingEntityAttributes(entityId, body, opts, headers = {}) {	  return new Promise((resolve, reject) =&gt; {	    defaultClient.defaultHeaders = headers;	    const apiInstance = new NgsiV2.EntitiesApi();	    apiInstance.updateExistingEntityAttributes(	      entityId,	      body,	      opts,	      (error, data, response) =&gt; {	        return error ? reject(error) : resolve(data);	      }	    );	  });	}	</code></pre>		<p>If you really want to do this with an IoT Agent, you can use the <a href="https://Iotagent-node-lib.readthedocs.io" rel="nofollow noreferrer">IoT Agent Node lib</a> and and <a href="https://iotagent-node-lib.readthedocs.io/en/latest/howto/index.html" rel="nofollow noreferrer">create your own IoT Agent</a></p>	"
