thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
35032975,35032975,null,1,4,Wed Jan 27 09:08:00 EST 2016,5845681,"<p>I try to connect the NodeMCU with the IBM Bluemix IoT Foundation. The unsecured MQTT connect works splendid and pushes data from a BMP180 to the cloud. However, when I start using TLS it won't connect to the broker. I tried to make a TLS connection with mqtt.fx and it works fine, it seems like the NodeMCU is the problem.	If I run this code:</p>		<pre class="lang-Lua prettyprint-override"><code>orgID="****"	BROKER = orgID..".&lt;bluemix&gt;"	BRPORT = 8883		CLIENTID = "d:"..orgID..":generic_esp:generic_esp_01"	print("ClientID: "..CLIENTID)	BRPWD  = "***********"		BRUSER = "use-token-auth"		local function publish()	   dofile('sensor.lc')	   m:publish('iot-2/evt/esp8266/fmt/json',payload,1,0, 	            function(conn) print('Payload published') end)	end		m = mqtt.Client(CLIENTID, 120, BRUSER, BRPWD)	c = false		print('MQTT Init')	m:on('offline', function(con) print('mqtt offline'); c = false end)	m:connect(BROKER, BRPORT, 1, function(conn) 	   print('MQTT connected: '..BROKER..':'..BRPORT) 	   c = true 	   publish()	end)		tmr.alarm(1, 1000, 1, function() 	    if not c then	      print('MQTT reconnecting')	      m:close()	      c = false	      m:connect(BROKER, BRPORT, 1, function(conn) print('.. MQTT reconnected: '..BROKER..':'..BRPORT); c = true end)	    end	    if c then	      publish()	    end	 end)	</code></pre>		<p>the esp8266 just prints "MQTT reconnecting" and can't connect.	Is something wrong with my code or is TLS not fully supported in NodeMCU 1.4, yet?</p>	"
35032975,57844476,35032975,3,1,Thu Jan 28 12:00:00 EST 2016,4788178,"List support by IoTF is too long for a comment, but easily discovered with:		`sslscan --no-failed --tls12 us.messaging.internetofthings.ibmcloud.com:443`"
35032975,57835418,35032975,3,0,Thu Jan 28 08:14:00 EST 2016,5845681,"I'll try to get access to it. 	One interesting tidbit: it seems like the Bluemix broker only accepts TLS with AES. Do you know if NodeMCU uses a different cipher like tripple DES or RC4 by any chance?	EDIT: Can't access the broker for debugging."
35032975,57837365,35032975,3,0,Thu Jan 28 09:07:00 EST 2016,4788178,"It does sound like its most likely a cert/cipher issue. Please note comments here about wildcard domains:		https://docs.internetofthings.ibmcloud.com/reference/mqtt/index.html"
35032975,57800602,35032975,3,0,Wed Jan 27 13:03:00 EST 2016,131929,"NodeMCU uses TLS 1.2, http://nodemcu.readthedocs.org/en/dev/en/modules/mqtt/#mqttclientconnect."
35032975,57809467,35032975,3,0,Wed Jan 27 16:20:00 EST 2016,131929,"If you have access to the Bluemix broker instance you can [turn on Java SSL debug messages](http://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/ReadDebug.html). This should give you enough information to draw some conclusions."
35032975,57843575,35032975,3,0,Thu Jan 28 11:37:00 EST 2016,131929,"If you follow the link to the docs I posted first you'll get to http://j.mp/20uzJs1 which lists all cipher suites."
35032975,57800897,35032975,3,0,Wed Jan 27 13:10:00 EST 2016,131929,"The first thing that comes to mind is a certificate chain validation issue i.e. NodeMCU (or Espressif SDK) doesn't trust the SSL cert or the CA cert it's signed with. 1. Try with a firmware that has debug enabled. 2. Try with a different MQTT broker (difficult if you work for IBM?). 3. Try with a *public* broker like  https://www.cloudmqtt.com so others can verify your code."
35032975,57848460,35032975,3,0,Thu Jan 28 13:33:00 EST 2016,5845681,"I know which cipher suites are supported by IoTF, the problem is that I have no idea which suite is used by the nodemcu an have no way to influence which suite it chooses."
35032975,35119542,35032975,2,2,Sun Jan 31 21:14:00 EST 2016,4788178,"<p>I've captured the your client hello in one of our test stands:</p>		<p>0000   16 03 02 00 33 01 00 00 2f <strong>03 02</strong> 00 00 00 00 d0	0010   b1 a1 3a 07 1c 1b 3e f2 fc 03 91 d6 18 b5 ae 5d	0020   77 65 37 f5 07 10 45 d1 7e 1a ea 00 00 08 00 2f	0030   00 35 00 05 00 04 01 00</p>		<p>This looks like a TLS v1.<strong>1</strong> client hello.  Usually a client will hello with the "best" it can do and be negotiated downwards.  In this case IoTF will simply close the connection because it only supports TLS 1.2.  Please can you check that your device is setup to do TLS 1.2 ?</p>	"
