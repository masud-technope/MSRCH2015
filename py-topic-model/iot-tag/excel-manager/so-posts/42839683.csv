thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42839683,42839683,null,1,14,Thu Mar 16 16:28:00 EDT 2017,4278747,"<p>Azure IoT Hub Supports AMQP, MQTT, HTTP protocols. In order to customize these protocols we have Azure IoT protocol gateway. I can find good samples on MQTT protocol customization. I need some sample codes for TCP based protocol customization using Azure IoT Protocol Gateway.</p>		<p><strong>EDIT (in order to get an answer):</strong> what the OP was asking, is an example using the Azure Protocol Gateway <strong>to support a proprietary TCP-based protocol</strong>. Currently the IoT hub only supports AMQP, MQTT and HTTP. While those protocols actually rely on TCP, the hub doesn't support direct TCP connection without the extra layer of AMQP, MQTT or HTTP.	As explained <a href="https://github.com/Azure/azure-iot-protocol-gateway/issues/44" rel="noreferrer">here</a>, we need a basic example of a custom TCP based protocol.</p>		<p>Imagine a basic device that can only send some proprietary payload through TCP on a given IP address/port: we need an example of a gateway customization that allows this device to send data to the hub.</p>		<p>The current code of the protocol gateway is poorly designed, as it heavily relies on MQTT.</p>		<p>Adding some bounty too.</p>	"
42839683,72788618,42839683,3,1,Thu Mar 16 16:29:00 EDT 2017,134204,"TCP is the *underlying* communication protocol for all of these *message* protocols. What are you trying to do? What protocol do you want to implement? Why not use one of the available protocols?"
42839683,72790038,42839683,3,0,Thu Mar 16 17:03:00 EDT 2017,134204,"I don't think you understand that TCP communication is the underlying protocol of ALL other messaging protocols. When you make an HTTP request, that ends up as a TCP connection and a bunch of TCP packets. It's like insisting that you need a car with wheels. Besides, how are you going to do *anything* if your device can't be programmed?"
42839683,72790094,42839683,3,0,Thu Mar 16 17:04:00 EDT 2017,134204,"What device are you talking about anyway? If the firmware can't be changed, or a program uploaded, how are you even going to set the cloud provider's IP? It sounds like you are trying to modify a device hardwired to work with only the manufacturer's service"
42839683,72790139,42839683,3,0,Thu Mar 16 17:05:00 EDT 2017,134204,"Anyway, it's impossible to answer your question without *specifics* - device, model, protocol you want to use. Azure IoT already supports TCP, just as cars support wheels"
42839683,72788782,42839683,3,0,Thu Mar 16 16:33:00 EDT 2017,134204,"Besides, you already found the Azure IoT Gateway and samples. The MQTT protocol itself was added as a customization using the gateway framework"
42839683,72788888,42839683,3,1,Thu Mar 16 16:35:00 EDT 2017,4278747,"My device supports only TCP communication. It sends a sync message over TCP to a static IP and port. I want this device to be virtualized in Azure IoT Hub. Something which is described here.	https://github.com/Azure/azure-iot-protocol-gateway/issues/44"
42839683,72789051,42839683,3,0,Thu Mar 16 16:39:00 EDT 2017,134204,"That doesn't explain anything. You can use HTTP over TCP - in fact, you are doing so right now. The same with MQTT, AMQP. You just have to right the appropriate client code, or use a library. All of these work over TCP. There are mqtt clients for Arduino for example, like [this client for ESP8266](https://github.com/marvinroger/async-mqtt-client)"
42839683,72789468,42839683,3,0,Thu Mar 16 16:49:00 EDT 2017,4278747,"I agree with you that appropriate client code will work. But the problem here is that the device which i'm holding currently doesn't allow me to update its firmware. It is fully abstracted and it has some configuration done in the past which can support only TCP communication. I cannot add any library or upload any sketch to that. Hence i wanted to do something out of the device"
42839683,84287500,42839683,3,1,Tue Feb 06 14:29:00 EST 2018,870604,"@Panagiotis Kanavos Maybe the OP wasn't clear enough, but the question is a real, unanswered question. The OP sure understands how TCP works. To make it more clear, see my edit. In a few words: we need an example for a proprietary TCP-based protocol. IoT hub doesn't allow any TCP-based protocol to communicate with it: only MQTT, AMQP and HTTP. We need a low-level example of a basic TCP-based protocol. Take [STOMP](https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol) as an example if you want."
42839683,84287613,42839683,3,0,Tue Feb 06 14:31:00 EST 2018,4278747,"Iâ€™m trying to make apple to Apple comparison...AWS has a TCP load balancer...I need something similar to this in IOT hub in Azure"
42839683,84287733,42839683,3,0,Tue Feb 06 14:33:00 EST 2018,870604,"@arunthatham I've modified your question and added a bounty so we can get an answer. Everybody on the github project needs this example but it's still not provided after all this time.Not sure about the load balancer though."
42839683,84288614,42839683,3,0,Tue Feb 06 14:51:00 EST 2018,870604,"@PanagiotisKanavos The [github link](https://github.com/Azure/azure-iot-protocol-gateway/issues/44) the OP provided explained the issue clearly to me. I could write a new question, but everything I would write is already written here. The github issue is the most active one for this repo, and this question got 3 upvotes: we need an example of a TCP-based protocol that is not tied to MQTT. The MS documentation suggest you can use the Azure Protocol Gateway for "custom protocols" which is not true at all currently."
42839683,84288676,42839683,3,0,Tue Feb 06 14:52:00 EST 2018,134204,"@ken2k Good. Then everyone else on SO is dense and couldn't understand this for an entire year. Edit the question. Asking for an entire implementation is out-of-scope anyway. It can't fit in a single answer. The problem is interesting, hence no downvotes. *Answering* it in a Q&A site is somewhat difficult"
42839683,84288863,42839683,3,0,Tue Feb 06 14:56:00 EST 2018,870604,"@PanagiotisKanavos If it was asked yesterday without success doesn't mean it won't today. That's what the "draw attention bounties" are for.  We don't need a full implementation but either a link to an existing work, or some guidelines from MS folks that are monitoring SO tags."
42839683,84288976,42839683,3,0,Tue Feb 06 14:59:00 EST 2018,134204,"@ken2k You said you did the same thing in the past. Why don't you post the answer? Whatever that is, prevents everyone else from answering too"
42839683,84289101,42839683,3,0,Tue Feb 06 15:02:00 EST 2018,870604,"@PanagiotisKanavos What we did previously was a 30 man-days effort. It probably wasn't a good implementation because we had no clue about how to do it. As MS advertises, the protocol gateway should easily allow custom protocol implementation. We need guidelines about how to do it properly. Even an official answer such as "you can't, it really is a 30 man-days effort" would be fine."
42839683,84289930,42839683,3,1,Tue Feb 06 15:22:00 EST 2018,134204,"@ken2k this is SO, not Github or MSDN or UserVoice. If *you* can't post your solution as an answer, who can and what do you expect it to look like? BTW if that someone comes this way, he should be able to read all the required info in the *question*, not the comments. Mentioning STOMP or whatever protocol you used will help"
42839683,84287812,42839683,3,0,Tue Feb 06 14:35:00 EST 2018,4278747,"The answer I heard in past is that use service fabric...and build ur cluster to ingest the data through TCP...no support on IOT hub"
42839683,84288077,42839683,3,0,Tue Feb 06 14:40:00 EST 2018,134204,"@ken2k it is the *OP's* responsibility to clean up the question and explain what he/she wants. The OP still doesn't improve the answer although the comments show that no TCP example is needed. Instead, it's a question about *load balancing*."
42839683,84288083,42839683,3,0,Tue Feb 06 14:40:00 EST 2018,870604,"@arunthatham Well that's one solution for sure, but you'll lose the benefits of the IoT hub (scalability, device registry, security...). I've managed in the past to port some proprietary TCP-based protocol using the Azure Protocol Gateway. But it was a real pain in the ass, as the current gateway code is poorly structured and heavily relies on MQTT. It was a 30 man-days effort to get it working right. Now I need something similar, and I think everyone should benefit from a basic TCP example."
42839683,84288138,42839683,3,0,Tue Feb 06 14:41:00 EST 2018,134204,"@arunthatham update your question explaining what you want. *Don't* add explanations in the comments. You didn't ask about load balancing. And anyway, *ingres* scalability isn't load balancing. AWS doesn't use load balancers for this, it uses Kinesis. For Azure it's Event Hub and lately Event Grid"
42839683,84288188,42839683,3,1,Tue Feb 06 14:42:00 EST 2018,870604,"@PanagiotisKanavos Forget the load balancer. The question is pretty clear as it is now, we need an example of a TCP-based proprietary protocol. Not some MQTT tweak the Azure Protocol Gateway currently provide."
42839683,84288198,42839683,3,0,Tue Feb 06 14:42:00 EST 2018,134204,"@ken2k a basic TCP example of what? Ingres is handled by event hub, event grid. No load balancers are involved here *or* in Amazon Web Services"
42839683,84288229,42839683,3,0,Tue Feb 06 14:43:00 EST 2018,134204,"@ken2k no, it's even more confuse. You said `TCP example` the OP said `load balancer`. It was unclear a year ago, it's unclear now. In fact, if you are correct, it's out-of-scope too. Implementing a custom TCP protocol ins't `basic` or `simple` and can't be covered in a single answer"
42839683,84288298,42839683,3,0,Tue Feb 06 14:45:00 EST 2018,870604,"@PanagiotisKanavos It _really_ was clear a year ago if you are familiar with IoT hub and the protocol gateway MS provides. Now the "load balancer" stuff the OP needs today is not clear, but the original question really is."
42839683,48671998,42839683,2,3,Wed Feb 07 19:41:00 EST 2018,2331581,"<p>The default Protocol Gateway sample are indeed somewhat confusing because of all the MQTT code.	The protocol gateway works by 'simulating' a IoTHub connection for each custom protocol device you connect to the gateway.</p>		<p>To do this translation from the TCP device to an IoTHub device you first need to have a connection to the IoTHub on behalf of the device. This is the gateway part.	Below is the core essentials for this IoTHubConnection.</p>		<pre><code>namespace GatewayTest	{	    using System;	    using System.Text;	    using System.Threading;	    using System.Threading.Tasks;	    using DotNetty.Buffers;	    using Microsoft.Azure.Devices.ProtocolGateway.Identity;	    using Microsoft.Azure.Devices.ProtocolGateway.IotHubClient;	    using Microsoft.Azure.Devices.ProtocolGateway.Messaging;		    public class IoTHubConnection : IMessagingChannel&lt;IMessage&gt;	    {	        private readonly string iotHubHostName;	        private readonly Func&lt;IDeviceIdentity, Task&lt;IMessagingServiceClient&gt;&gt; deviceClientFactory;	        private readonly Func&lt;string, Task&gt; onMessage;	        private IMessagingServiceClient deviceClient;	        private IDeviceIdentity deviceIdentity;		        public IoTHubConnection(	            string iotHubHostName,	            Func&lt;IDeviceIdentity, Task&lt;IMessagingServiceClient&gt;&gt; deviceClientFactory,	            Func&lt;string, Task&gt; onMessage)	        {	            this.iotHubHostName = iotHubHostName;	            this.deviceClientFactory = deviceClientFactory;	            this.onMessage = onMessage;	        }		        public event EventHandler CapabilitiesChanged;		        public async Task OpenAsync(string deviceId, string deviceKey)	        {	            this.deviceIdentity = this.GetDeviceIdentity(deviceId, deviceKey);	            if (this.deviceIdentity != UnauthenticatedDeviceIdentity.Instance)	            {	                this.deviceClient = await this.deviceClientFactory(this.deviceIdentity);	                this.deviceClient.BindMessagingChannel(this);	            }	        }		        public async Task CloseAsync()	        {	            await this.deviceClient.DisposeAsync(null);	            this.deviceClient = null;	        }		        public void Handle(IMessage message)	        {	            var messageBody = message.Payload.ToString(Encoding.UTF8);		            this.onMessage(messageBody);		            this.deviceClient.CompleteAsync(message.Id);	        }		        public Task SendMessage(string message)	        {	            var buffer = Unpooled.WrappedBuffer(Encoding.UTF8.GetBytes(message));	            var deviceMessage = this.deviceClient.CreateMessage($"devices/{this.deviceIdentity.Id}/messages/events", buffer);	            return this.deviceClient.SendAsync(deviceMessage);	        }		        protected virtual void OnCapabilitiesChanged(EventArgs e)	        {	            this.CapabilitiesChanged?.Invoke(this, e);	        }		        private IDeviceIdentity GetDeviceIdentity(string userName, string deviceKey)	        {	            IotHubDeviceIdentity ideviceIdentity;	            if (!IotHubDeviceIdentity.TryParse($"{this.iotHubHostName}/{userName}", out ideviceIdentity))	            {	                return UnauthenticatedDeviceIdentity.Instance;	            }		            ideviceIdentity.WithDeviceKey(deviceKey);	            return ideviceIdentity;	        }	    }	}	</code></pre>		<p>The deviceClientFactory callback method should be implemented as shown below and in <a href="https://github.com/Azure/azure-iot-protocol-gateway/blob/45d5b6ef57dce0027eef467cf14ac1ab6e3a358a/host/ProtocolGateway.Host.Common/Bootstrapper.cs#L149" rel="nofollow noreferrer">this line</a> in the ProtocolGateway repo in Github.</p>		<pre><code>deviceClientFactory = IotHubClient.PreparePoolFactory(	    "IotHubConnectionString",	    400,	    TimeSpan.FromMinutes(3),	    iotHubClientSettings,	    PooledByteBufferAllocator.Default,	    new ConfigurableMessageAddressConverter("TopicNameConversion"));	</code></pre>		<p>When a Tcp Device connects to the protocol, you should create an instance of this IoTHubConnection and send messages from the Device to the IoTHubConnection and vica versa.	The code below shows a very simple version of how this should be done.</p>		<pre><code>private const int BufferSize = 1024;	private byte[] buffer = new byte[BufferSize];	private IoTHubConnection ioTHubConnection;	private NetworkStream stream;		private async Task Start()	{	    listener = new TcpListener(IPAddress.Any, port);	    listener.Start();		    var client = await listener.AcceptTcpClientAsync();	    ioTHubConnection = new IoTHubConnection("IoTHubName", deviceClientFactory, OnIoTHubMessage);	    stream = client.GetStream();		    // Read DeviceId and DeviceKey from some sort of StartConnection-message send by the TcpClient.	    await ioTHubConnection.OpenAsync("DeviceId", "DeviceKey");		    stream.BeginRead(buffer, 0, BufferSize, ReadTcpStreamCallback, null);	}		private void ReadTcpStreamCallback(IAsyncResult ar)	{	    var bytesRead = stream.EndRead(ar);		    if (bytesRead &gt; 0)	    {	        var message = System.Text.Encoding.ASCII.GetString(result);		        ioTHubConnection.SendMessage(message);		        // Read again.	        stream.BeginRead(buffer, 0, BufferSize, ReadTcpStreamCallback, null);	    }	}		private async Task OnIoTHubMessage(string message)	{	    // Potentially do some translation on the IoTHub message	    // and send it to the Device		    var byteData = Encoding.UTF8.GetBytes(message);	    stream.BeginWrite(byteData, 0, byteData.Length, SendTcpCallback, null);	}		private void SendTcpCallback(IAsyncResult ar)	{	    stream.EndWrite(ar);	}	</code></pre>	"
42839683,97894335,48671998,3,0,Tue Apr 09 18:22:00 EDT 2019,4647863,"Was anyone for sure about to get this working? I'm attempting to build out a custom solution of my own and am getting a bit overwhelmed by all of the MQTT code in the example. I'm not completely clear (given the above example) where to plug this in relative to all of the other code/instructions/hosts/etc."
