thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44275080,44275080,null,1,0,Wed May 31 03:22:00 EDT 2017,563420,"<p>I am trying to transmit sensor data from an IoT device via CoAP using <a href="https://github.com/mcollina/node-coap" rel="nofollow noreferrer">node-coap</a>. The order of the data, as it arrives to the CoAP server, is important to me. I can not find a way to preserve the sequence of data, even when using the <code>confirmable</code> request option.</p>		<p>I have a small program below that shows what I mean. </p>		<p><strong>Can CoAP not be used if order/sequence of data is important?  If it can, what am I doing wrong?</strong></p>		<pre class="lang-js prettyprint-override"><code>'use strict';		const coap = require('coap'),	  cbor = require('cbor'),	  server = coap.createServer();		const sequentialData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];	let incomingData = [];	let numResponses = sequentialData.length;		server.on('request', (req, res) =&gt; {	  const obj = cbor.decodeFirstSync(req.payload);	  incomingData.push(obj.data);	  res.end();	});		server.listen(() =&gt; {	  const reqOpts = {	    hostname: 'localhost',	    method: 'POST',	    pathname: '/sequential',	    options: {	      Accept: 'application/cbor'	    }	  };		  sequentialData.forEach((item) =&gt; {	    const req = coap.request(reqOpts);	    req.write(cbor.encode({	      data: item	    }));		    req	      .on('response', (res) =&gt; {	        res.pipe(process.stdout);	        res.on('end', () =&gt; {	          if (--numResponses === 0) {	            console.log(`got data in this order`, incomingData);	            process.exit();	          }	        })	      });		    req.end();	  });	});	</code></pre>		<p>Node Program above will output a different order each time ran.</p>	"
44275080,44288220,44275080,2,1,Wed May 31 15:00:00 EDT 2017,3323777,"<p>It can't as long you are using UDP as transport.</p>		<p>As per RFC7252:</p>		<blockquote>	  <p>As CoAP is bound to unreliable transports such as UDP, CoAP messages	     may arrive out of order, appear duplicated, or go missing without	     notice.  For this reason, CoAP implements a lightweight reliability	     mechanism, without trying to re-create the full feature set of a	     transport like TCP.  It has the following features:</p>	  	  <ul>	  <li><p>Simple stop-and-wait retransmission reliability with exponential	    back-off for Confirmable messages.</p></li>	  <li><p>Duplicate detection for both Confirmable and Non-confirmable	    messages.</p></li>	  </ul>	</blockquote>		<p><a href="https://tools.ietf.org/html/rfc7252" rel="nofollow noreferrer">https://tools.ietf.org/html/rfc7252</a></p>		<p>There are some efforts to make CoAP-over-HTTP in different implementations but it does not belong to CoAP RFC itself.</p>		<p>You may try to dig in this way if you absolutely forced to use CoAP.</p>	"
44275080,75646595,44288220,3,0,Fri Jun 02 04:23:00 EDT 2017,563420,"You mean CoAP over TCP not HTTP correct?"
44275080,75661970,44288220,3,0,Fri Jun 02 12:27:00 EDT 2017,3323777,"Yes. In an implementation used by me (Californium, java), CoAP-over-TCP currently is in progress. I don't know about this in other implementations.  Unfortunately there is only an RFC draft for that yet."
