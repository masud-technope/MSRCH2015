thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44904788,44904788,null,1,0,Tue Jul 04 11:29:00 EDT 2017,4010916,"<p>I am experimenting with Kaa event subsystem for one of my IoT application. I created a event class family and added the same to one of the projects keeping the property as "Both" as I want to send/receive both. My event triggering code looks something like: </p>		<pre><code>    DesktopKaaPlatformContext desktopKaaPlatformContext = new DesktopKaaPlatformContext();	    kaaClient = Kaa.newClient(desktopKaaPlatformContext, new SimpleKaaClientStateListener() {	        @Override	        public void onStarted() {	            System.out.println("--= Kaa client started =--");	        }		        @Override	        public void onStopped() {	            System.out.println("--= Kaa client stopped =--");	        }	    }, true);		    // Obtain the event family factory.	    final EventFamilyFactory eventFamilyFactory = kaaClient.getEventFamilyFactory();		    Random rnRandom = new Random();	    event1 = eventFamilyFactory.getEventClassFamilyDemo();		    DemoEventsCTL event = new DemoEventsCTL(rnRandom.nextBoolean());	    kaaClient.start();	    event.setMachineOn(rnRandom.nextBoolean());	    event1.sendEventToAll(event);	    System.out.println("Hello : Event : " + event.getMachineOn() + "has been addded");		    }		}	</code></pre>		<p>And My Event handler looks like : 	    DesktopKaaPlatformContext desktopKaaPlatformContext = new DesktopKaaPlatformContext();</p>		<pre><code>    kaaClient = Kaa.newClient(desktopKaaPlatformContext, new SimpleKaaClientStateListener() {	        @Override	        public void onStarted() {	            LOG.info("--= Kaa client started =--");	        }		        @Override	        public void onStopped() {	            LOG.info("--= Kaa client stopped =--");	        }	    }, true);	    final EventFamilyFactory eventFamilyFactory = kaaClient.getEventFamilyFactory();	    event1 = eventFamilyFactory.getEventClassFamilyDemo();	    event1.addListener(new EventClassFamilyDemo.Listener() {	        @Override	        public void onEvent(DemoEventsCTL event, String source) {	              System.out.println(kaaClient.isAttachedToUser());	            System.out.println("The event received is :" + event.getMachineOn());		    });	    // Start the Kaa client and connect it to the Kaa server.	    kaaClient.start();	}	</code></pre>		<p>When I execute these applications separately, both run without any error logs, I see the connection to server successful. However, I do not see the sent events being received.	Will proxies be creating any issues? If anyone has tried before, can you tell me if I am missing anything?  </p>	"
44904788,77079585,44904788,3,0,Wed Jul 12 09:02:00 EDT 2017,6565719,"Please see below answer to see the two clients I tried with."
44904788,76916992,44904788,3,0,Fri Jul 07 12:48:00 EDT 2017,6565719,"To enable sending/receiving events to/from endpoints, at first the client should attach the endpoint to the user. `kaaClient.attachUser("userExternalId", "userAccessToken", userAttachCallback )`"
44904788,76983721,44904788,3,0,Mon Jul 10 06:26:00 EDT 2017,4010916,"Thanks Pete. I have attached user. and in logs, I can see the listener request logs as : 11:56:22.008 [pool-6-thread-1] DEBUG o.k.k.c.event.DefaultEventManager - Received event listener resolution response: [{"requestId": -2073544503, "listeners": [], "result": "SUCCESS"}] However, the listener onEvent method is not invoked still. Can you share a sample snippet so that I can check?"
44904788,45053178,44904788,2,0,Wed Jul 12 09:05:00 EDT 2017,6565719,"<p>Here are the two Kaa client implementations that I used. One emits events and the other consumes those events.	You can see that both the clients are attached to the same user <code>("testverifier", "82884822542100000000")</code>.	First I ran the  <code>EventConsumer</code> so that it will be ready to catch events sent by <code>EventEmitter</code> when I start it. </p>		<p><strong>EventConsumer</strong></p>		<pre><code>public class TestEventConsumer {		    private static KaaClient kaaClient;		    private static ScheduledExecutorService scheduledExecutorService;		    public static void main(final String[] args) {	        System.out.println(SampleEventListener.class.getSimpleName() + " Event Consumer Starting!");		        scheduledExecutorService = Executors.newScheduledThreadPool(1);		        // Create the Kaa desktop context for the application.	        final DesktopKaaPlatformContext desktopKaaPlatformContext = new DesktopKaaPlatformContext();	        kaaClient = Kaa.newClient(desktopKaaPlatformContext, new FirstKaaClientStateListener(), true);		        kaaClient.start();		        consumeEvents();		        System.out.println("--= Press any key to exit =--");	        try {	            System.in.read();	        } catch (final IOException e) {	            System.out.println("IOException has occurred: {}" + e.getMessage());	        }	        System.out.println("Stopping Event Consumer...");	        scheduledExecutorService.shutdown();	        kaaClient.stop();	    }		    private static class FirstKaaClientStateListener extends SimpleKaaClientStateListener {		        @Override	        public void onStarted() {	            super.onStarted();	            System.out.println("Kaa client (Event Consumer) started");	        }		        @Override	        public void onStopped() {	            super.onStopped();	            System.out.println("Kaa client (Event Consumer) stopped");	        }	    }		    public static void consumeEvents() {	        kaaClient.attachUser("testverifier", "82884822542100000000", new UserAttachCallback() {	            @Override	            public void onAttachResult(final UserAttachResponse response) {	                System.out.println("Attach response" + response.getResult());	            }	        });			        final EventFamilyFactory eventFamilyFactory = kaaClient.getEventFamilyFactory();	        final MyCustomECF myEcf = eventFamilyFactory.getMyCustomECF();		        myEcf.addListener(new MyCustomECF.Listener() {	            @Override	            public void onEvent(final MyCustomEvent event, final String source) {		                System.out.println("MyCustomEvent received from source : " + source + "Event Data Name : " + event.getName());		            }	        });	    }	}	</code></pre>		<p><strong>EventEmitter</strong></p>		<pre><code>public class TestEventEmitter {		    private static KaaClient kaaClient;		    private static ScheduledExecutorService scheduledExecutorService;		    public static void main(final String[] args) {		        scheduledExecutorService = Executors.newScheduledThreadPool(1);		        // Create the Kaa desktop context for the application.	        final DesktopKaaPlatformContext desktopKaaPlatformContext = new DesktopKaaPlatformContext();		        kaaClient = Kaa.newClient(desktopKaaPlatformContext, new FirstKaaClientStateListener(), true);		        kaaClient.start();	        attachUserandEmitEvents();		        System.out.println("--= Press any key to exit =--");	        try {	            System.in.read();	        } catch (final IOException e) {	            System.out.println("IOException has occurred: {}" + e.getMessage());	        }	        System.out.println("Stopping Event Emitter...");	        scheduledExecutorService.shutdown();	        kaaClient.stop();	    }		    private static void attachUserandEmitEvents() {	        // attach user	        kaaClient.attachUser("testverifier", "82884822542100000000", new UserAttachCallback() {	            @Override	            public void onAttachResult(final UserAttachResponse response) {	                final EventFamilyFactory eventFamilyFactory = kaaClient.getEventFamilyFactory();		                final MyCustomECF myEcf = eventFamilyFactory.getMyCustomECF();		                for (int i = 0; i &lt; 5; i++) {	                    MyCustomEvent event = new MyCustomEvent();	                    event.setCustId("ID00" + i);	                    event.setName("Name - " + i);		                    myEcf.sendEventToAll(event);	                }               	            }	        });	    }		    private static class FirstKaaClientStateListener extends SimpleKaaClientStateListener {		        @Override	        public void onStarted() {	            super.onStarted();	            System.out.println("Kaa client (Event Emitter) started");	        }		        @Override	        public void onStopped() {	            super.onStopped();	            System.out.println("Kaa client (Event Emitter) stopped");	        }	    }	}	</code></pre>	"
44904788,77648776,45053178,3,0,Thu Jul 27 07:12:00 EDT 2017,4010916,"Is this working fine for you?"
44904788,77655824,45053178,3,0,Thu Jul 27 09:57:00 EDT 2017,6565719,"Yes! Its working fine"
44904788,77690232,45053178,3,0,Fri Jul 28 04:14:00 EDT 2017,4010916,"I still don't receive messages to the listeners. Are there any settings you have done? Like proxy etc."
44904788,77803160,45053178,3,0,Mon Jul 31 16:35:00 EDT 2017,6565719,"Nope. No additional settings were made to send/receive the events. The only scenario where I failed to receive the events was when there was a mismatch between the user verifiers. Have you selected the user verifier when you create the SDK profile?"
44904788,77923781,45053178,3,0,Thu Aug 03 10:35:00 EDT 2017,4010916,"Yes. I have selected the same user verifier while creating SDK"
44904788,77609636,45053178,3,0,Wed Jul 26 10:14:00 EDT 2017,4010916,"Thank you for the snippets. I tried with same. Both the clients are attached to same user but I am still facing issues with getting the event triggered in listener in another client. Any thoughts why so?"
