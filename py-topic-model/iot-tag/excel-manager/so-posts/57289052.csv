thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57289052,57289052,null,1,0,Wed Jul 31 10:50:00 EDT 2019,11435535,"<p>I want to switch on and off control from Device update configuration using Google cloud function. I tried but failed to pass parameters into function.</p>		<p>Function Name: MyTestFunction.	msg is the variable which I am using it to pass ‘ON’ or ‘OFF'</p>		<p>URL: <a href="https://us-central1-myiot-237217.cloudfunctions.net/MyTestFunction" rel="nofollow noreferrer">https://us-central1-myiot-237217.cloudfunctions.net/MyTestFunction</a> </p>		<p>I have already tried executing function with the provided existing URl from trigger tab but I am seeing blank screen. When I hard code the action inside the function code then it is sending the same to update config.</p>		<pre class="lang-js prettyprint-override"><code>// Copyright 2019 Google LLC	//	// Licensed under the Apache License, Version 2.0 (the "License");	// you may not use this file except in compliance with the License.	// You may obtain a copy of the License at	//	//     https://www.apache.org/licenses/LICENSE-2.0	//	// Unless required by applicable law or agreed to in writing, software	// distributed under the License is distributed on an "AS IS" BASIS,	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 	//implied.	// See the License for the specific language governing permissions and	// limitations under the License.		const {google} = require('googleapis');		/*	  Variable block. Should be the only pieces needing editing	*/		// Note, this is BAD for production, don't do this. The service account	// private data should be passed into this function so it's encrypted in	// transit, and so you don't have it static as you may want to change	   // permission levels, etc. For the purposes of this blog demo code, 	//I've	// done it for ease of calling and to just show what the data looks like.	   // Please please don't do this in production.	    var serviceAccount = {	      "type": "service_account",	  "project_id": "XXXXXXX",	  "private_key_id": "XXXXXXXXX",	  "private_key": 	};		// You shouldn't need to change this variable, it's here for illustration	// purposes. An advantage of calling a Cloud Function within the same 	//project	// is that there are certain environment varibales you get for free like 	//this	// one	var projectId = process.env.GCP_PROJECT;		// change the following to match your project's values	// you could also easily modify the code to receieve these as variables	// in the GET call since I'm relying on that for the config/command 	//switch	// as well as the actual message being sent	var registryId = 'RTest1';	var gcpLocation = 'us-central1';	var deviceId = 'DTest1';		// a couple default values just for the sake of having something there	var msg = "ON"; // by default will reset the LED matrix	var which = "config"; // by default will send a config message		/*	  END VARIABLE BLOCK	*/		/*	  Responds to a HTTP request and updates the specified	  IoT device with either a config or a command depending on	  what is specified in the GET parameter (defaults to config).		  @param {Object} req Cloud Function request context.	  @param {Object} res Cloud Function response context.	*/	exports.updateDevice = (req, res) =&gt; {		  // variable passed into the Cloud function (as GET or POST)	  const reqMsg = req.query.message;	  // if we didn't pass one in, then just take our default	  const finalMsg = reqMsg ? reqMsg : msg;	  const msgData = Buffer.from(finalMsg).toString('base64');		  // This chunk is what authenticates the function with the API so you 	//can	  // call the IoT Core APIs	  const jwtAccess = new google.auth.JWT();	  jwtAccess.fromJSON(serviceAccount);	  // Note that if you require additional scopes, they should be specified 	//as a	  // string, separated by spaces	  jwtAccess.scopes = 'https://www.googleapis.com/auth/cloud-platform';	  // Set the default authenticatio nto the above JWT access	  google.options({ auth: jwtAccess });		  // the full path to our device in GCP	  var devicePath = ` 																		 projects/${projectId}/locations/${gcpLocation}/	 registries/${registryId}/devices/${deviceId}`;		  // figure out if they're trying to send config vs command	  // note the values of "which" that can be sent via the URL is "config" 	  //or 	  //"command"	  const reqTypeMsg = req.query.which;	  const finalWhich = reqTypeMsg ? reqTypeMsg : which;		  // And here we have the actual call to the cloudiot REST API for 	  //updating a	  // configuration on the device	  var client = google.cloudiot('v1');	  if (finalWhich == "config") {	    // This is the blob send to the IoT Core Admin API	    const configRequest = {	      name: devicePath,	      versionToUpdate: '0',	      binaryData: msgData	    };						 client.projects.locations.registries.devices.modifyCloudToDeviceConfig	(configRequest,	      (err, data) =&gt; {	        if (err) {	          console.log('Message: ', err);	          console.log('Could not update config:', deviceId);	        } else {	          console.log('Success :', data);	        }	     }	    );	  }	  else if (finalWhich == "command") {	    const commandRequest = {	      name: devicePath,	      binaryData: msgData	    };		 client.projects.locations.registries.devices.sendCommandToDevice	(commandRequest,	      (err, data) =&gt; {	        if (err) {	          console.log('Message: ', err);	          console.log('Could not update command:', deviceId);	        } else {	          console.log('Success :', data);	        }	      }	    );	  }		  res.status(200).end();	};	</code></pre>		<p>No Error message</p>	"
