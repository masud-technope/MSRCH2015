thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
45136264,45136264,null,1,0,Mon Jul 17 05:00:00 EDT 2017,1444525,"<p>I need to convert date and time in hex code for writing it on IOT device. 	Here is my code</p>		<pre><code>private String getDateTimeToHexa() { 		Calendar mCalendar = Calendar.getInstance();	TimeZone gmtTime =  TimeZone.getTimeZone(TimeZone.getDefault().getDisplayName());		    mCalendar.setTimeZone(gmtTime);	    final Date date = mCalendar.getTime();	    return Long.toHexString(date.getTime());	}	</code></pre>		<p>It is returning 11 digits hex code I need 8 digits, just like date and time in hex is <code>47C7EDE0</code> for this date <code>12:34:56 29/Feb/2008</code></p>		<p>Please help</p>	"
45136264,77241804,45136264,3,1,Mon Jul 17 05:03:00 EDT 2017,1553851,"`Integer.toHexString((int)(System.currentTimeMillis() / 1000))`?"
45136264,77242058,45136264,3,0,Mon Jul 17 05:17:00 EDT 2017,5221149,"Value returned by `date.getTime()` is in milliseconds, but the hex value `47C7EDE0` is in seconds. That's why comment by @shmosel is correct, because it converts the milliseconds to seconds, before converting that to hex. To see that `47C7EDE0` is in seconds, try printing `new Date(0x47C7EDE0 * 1000L)`. I get `Fri Feb 29 06:34:56 EST 2008` because I'm in Eastern US time zone."
45136264,77242134,45136264,3,0,Mon Jul 17 05:21:00 EDT 2017,5221149,"If you have Java 8, print `Instant.ofEpochSecond(0x47C7EDE0)` and you get `2008-02-29T11:34:56Z`. The date you show seems to be in Central European time zone."
45136264,45136477,45136264,2,0,Mon Jul 17 05:23:00 EDT 2017,7894239,"<p>Try this:</p>		<pre><code> private String getDateTimeToHexa() {	        Calendar mCalendar = Calendar.getInstance();	        TimeZone gmtTime =  TimeZone.getTimeZone(TimeZone.getDefault().getDisplayName());	        mCalendar.setTimeZone(gmtTime);	        final Date date = mCalendar.getTime();	        return Long.toHexString(date.getTime()/1000);	    }	</code></pre>	"
45136264,77242234,45136477,3,0,Mon Jul 17 05:26:00 EDT 2017,1553851,"One does not simply cast a millisecond timestamp to `int`."
45136264,77242276,45136477,3,0,Mon Jul 17 05:28:00 EDT 2017,7894239,"Is it not correct?"
45136264,77242296,45136477,3,0,Mon Jul 17 05:29:00 EDT 2017,1553851,"Of course not. You're just truncating data without any conversion logic."
45136264,77243263,45136477,3,0,Mon Jul 17 06:11:00 EDT 2017,7894239,"ok. Thanks @shmosel"
45136264,45136485,45136264,2,0,Mon Jul 17 05:24:00 EDT 2017,2663579,"<p>Instead of returning</p>		<pre><code>return Long.toHexString(date.getTime());	</code></pre>		<p>Return following</p>		<pre><code>return Long.toHexString(date.getTime()/1000);	</code></pre>		<p>As correctly pointed out by @shmosel that date.getTime() return time in a millisecond and if you want 8 digit Hex format then it needs to be converted in the second format.</p>		<p>The return type of Date can be found <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Date.html#getTime()" rel="nofollow noreferrer">here</a></p>	"
45136264,45136609,45136264,2,2,Mon Jul 17 05:35:00 EDT 2017,8317513,"<pre><code>import java.util.Calendar;	import java.util.Date;	public class Date {	    public static void main(final String[] args)	    {	    final Calendar cal = Calendar.getInstance();	    cal.set(Calendar.DATE, 15);	    cal.set(Calendar.MONTH, Calendar.DECEMBER);	    cal.set(Calendar.YEAR, 2005);	    cal.set(Calendar.HOUR, 17);	    cal.set(Calendar.MINUTE, 35);	    cal.set(Calendar.SECOND, 20);	    final Date date = cal.getTime();		    System.out.printf("Date %s is encoded as: %s\n", date, Long.toHexString(date.getTime()));	    // decode with: new Date(Long.parseLong("1082f469308", 16))	}	</code></pre>		<p>}</p>	"
45136264,77242577,45136609,3,0,Mon Jul 17 05:43:00 EDT 2017,1202025,"Add some explanation with answer for how this answer help OP in fixing current issue"
