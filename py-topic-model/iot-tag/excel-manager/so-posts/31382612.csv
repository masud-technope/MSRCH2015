thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
31382612,31382612,null,1,0,Mon Jul 13 11:50:00 EDT 2015,5110882,"<p>How can I make my server to accept the data sent by cc3200 through mqtt protocol ?Made cc3200 to publish the values successfully to my server IP address but I don't know what should I do to make my server dump those incoming values into its database.Actually I use XAMPP for server functionalities.	any suggestion guys ?	Am using hivemq broker</p>	"
31382612,50788214,31382612,3,1,Tue Jul 14 12:59:00 EDT 2015,5024726,"I just saw that you edited this question with another account using the same name. If this is unintentionally, read this: http://stackoverflow.com/help/merging-accounts"
31382612,50743440,31382612,3,0,Mon Jul 13 12:12:00 EDT 2015,504554,"You will need to expand this question a little for us to be able to help. Which MQTT broker are you running on your server?"
31382612,32165911,31382612,2,3,Sun Aug 23 11:00:00 EDT 2015,5255378,"<p>If your primary goal is to have some telemetry data from CC3200 stored in the database, I would suggest that you take a look at <a href="https://www.youtube.com/watch?v=a5Dw57Q-OIc" rel="nofollow">this webinar</a>. You can configure Kaa server to use one of multiple existing log appenders to publish your data to Spark, Cassandra, MongoDB, HDFS, Couchbase, etc. There are several major benefits of doing data collection with Kaa:</p>		<ol>	<li><p>All of the data is structured end-to-end. You define telemetry data model in Kaa UI, which translates into Avro-compatible schemas, and generates object bindings in the Kaa SDK. Instead of writing boilerplate code for data marshalling, you just invoke SDK functions like this: <code>kaa_logging_add_record(kaa_client_get_context(kaa_client)-&gt;log_collector, log_record);</code> where <code>log_record</code> is a structure auto-generated by Kaa based on your data model. On the other end, in your analytics system, you receive structured data that you can immediately start processing and querying - no need for the custom interpretation code, it's auto-generated for you.</p></li>	<li><p>You can write to several destinations simultaneously: for example, save telemetry data into HDFS for warehousing, send to Spark for stream analytics, and push to your custom data processing/visualization service with REST. All of this is configurable by adding <em>log appenders</em> through the Kaa administrative UI.</p></li>	<li><p>Kaa takes care of the data delivery reliability and consistency. You can set up one or more <em>reliable</em> log appenders. It is not until all of the configured reliable appenders acknowledge a successful write that the client is instructed to remove the local data copy.</p></li>	<li><p>Kaa server is scalable and reliable out-of-the box. There is no single point of failure in the cluster. You can add more server capacity on the fly by spinning off more nodes. They would register against Zookeeper and the cluster would automatically rebalance the load. If there is a node failure, the clients automatically migrate to the remaining nodes.</p></li>	<li><p>Kaa is transport agnostic, so you can plug in pretty much any transport protocol implementation you like, including MQTT. The default protocol is similar to MQTT in the amount of overhead it introduces.</p></li>	</ol>		<p>The integration instructions specifically for CC3200 are being prepared for the upcoming 0.8.0 release <a href="http://docs.kaaproject.org/display/KAA/Texas+Instruments+CC3200" rel="nofollow">here</a>.</p>		<p><em>Disclaimer: I work for a company behind Kaa open-source IoT platform.</em></p>	"
31382612,52219047,32165911,3,1,Sun Aug 23 11:22:00 EDT 2015,599668,"please provide some more information than just the links as they might get out of date."
