thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
53727655,53727655,null,1,1,Tue Dec 11 15:45:00 EST 2018,10760639,"<p>I'm looking for some design-patterns to implement a IoT-Device-Interface in a flexible way.</p>		<p>The scenario is:	We have a group of devices (say different Temperature sensors) which has some common functionalities ... </p>		<p><em>StartMeasurement</em> - to start a temperature reading. </p>		<p>The device types differs in different specialisation. The second device-type addiotinaly implements a Method to configure the temperature resolution. </p>		<p>It's easy to write this device hirachy as Interface-Classes: </p>		<pre><code>interface BasicTempSensor	{	      StartMeasurement()	}		interface ConfigureableSensor : public BasicTempSensor	{	   ConfigureResolution(config)	}	</code></pre>		<p>Now, these devices should be connect as a IoT device. We want to use the Microsoft IoT Device SDK. In it's basics, it provides a way to register Methods (by name) for a Device an register corresponding callbacks. 	-> In general, it's the communication layer, which provides functionality to send and receive commands and messages. </p>		<p><strong>The question is:</strong> 	I'm looking for a way to make a good and flexible abstraction for the communication layer to the upper layers. Also the common interface structure should take into account. 	Is there a design pattern to make such a abstraction?</p>		<p>My first approach is to implement the shown interface structure on device and application side. The Interface implementation maps to commands which could be send through the communication layer. (adapter pattern?) </p>		<p>I also had a look at the <a href="http://johnny-five.io/" rel="nofollow noreferrer">http://johnny-five.io/</a> framework. On application side, the device functionalilty is build up from small basic classes . Don't know how it's implented on device side. 	Maybe some information in this direction is also helpflul. </p>		<p>In short: 	I'm looking for patterns to implement a typesafe device api description which also covers the common parts of the devices in a polymorphic way. </p>		<p>Thanks. 	Tobu</p>	"
53727655,94327173,53727655,3,0,Wed Dec 12 06:23:00 EST 2018,813937,"Bascially, You want to develop an application which can be used to interact, use and manage the IoT devices ? If yes, then at a high level, you need to first divide the application into modular features like discovery, connect, getSensorReadings, manage etc."
53727655,94411591,53727655,3,0,Fri Dec 14 12:59:00 EST 2018,10760639,"Yes, I want to develop a application to manage the IoT devices and interact with it. 	The interface to each device is my question about. How to describe and design the interface of these devices according to the requirement above?"
53727655,94467196,53727655,3,0,Mon Dec 17 05:34:00 EST 2018,813937,"abstract the common attributes and operations of IoTDevice, like name, macId, deviceState, operation, sensorReading etc. Also, using behavior of device in composition will make clean design(Strategy pattern)."
53727655,53817029,53727655,2,0,Mon Dec 17 14:13:00 EST 2018,7493840,"<p>I guess, <a href="https://en.wikipedia.org/wiki/Template_method_pattern" rel="nofollow noreferrer">template method</a> is an answer. </p>		<p>It implies that you define a base class, exposing abstract method for each and any needed operation - which means, <strong>sufficient to describe behavior of the most specific and complicated sensor</strong>. Than you subclass that base class - once per each sensor; your dear friend - compiler - forces you to implement all abstract methods - even those, which have nothing to do with this particular sensor type. So few of them normally would do nothing - either empty <code>void</code> methods or return-oneliners like <code>BaseClass Calibrate(BaseClass baseClass) { return baseClass; }</code>.</p>		<p>Needless to say that you keep those methods <code>protected</code> - not to expose internals outside. Outer world deals and knowns your <code>BaseClass</code> only - except, of course, factories or whatever else is involved in a creation of an appropriate <code>BaseClass</code> implementation.</p>	"
