thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57116316,57116316,null,1,0,Fri Jul 19 16:22:00 EDT 2019,9415921,"<p>I'm working with HiveMQ Client and I wanted to know if there was a way to get the quality of service (QoS) that a client is subscribing with (in terms of a specific topic or in general)? I would be looking for a method I could invoke on a client like so:</p>		<pre><code>    Mqtt5BlockingClient subscriber = Mqtt5Client.builder()	            .identifier(UUID.randomUUID().toString()) // the unique identifier of the MQTT client	            .serverHost("localhost") 	            .serverPort(1883) 	            .buildBlocking();		subscriber.getQoS("topic") // returns the QoS of the subscriber is subscribing to the given topic 	</code></pre>		<p>I would just want this information so I could print in to the console. </p>	"
57116316,100762885,57116316,3,1,Sat Jul 20 07:16:00 EDT 2019,504554,"Generally MQTT clients don't even keep a list of what topics they are subscribed to lets alone at what QOS."
57116316,100946631,57116316,3,0,Fri Jul 26 13:37:00 EDT 2019,504554,"Also deleting and reposting the same comment to trigger a notification is bad form"
57116316,100946691,57116316,3,0,Fri Jul 26 13:38:00 EDT 2019,9415921,"Sorry I didn't know why you didn't mark it as an answer until your comment just now."
57116316,100945673,57116316,3,0,Fri Jul 26 13:07:00 EDT 2019,9415921,"OK you can add that as the answer to this question."
57116316,100945732,57116316,3,0,Fri Jul 26 13:09:00 EDT 2019,504554,"No, not really, as it's a general observation, it may not be true for the HiveMQ implementation (I've never used it so don't know)."
57116316,57685694,57116316,2,2,Wed Aug 28 05:39:00 EDT 2019,10976088,"<p>I think you have to read more about MQTT concepts.	The Quality of Service (QoS) level is an agreement between a sender and receiver of a message regarding the guarantees of delivering a message.	Therefore, the QoS is used in the <code>publish()</code> and <code>subscribe()</code> methods not the <code>connect()</code>.<br></p>		<p><strong>This is the scenario:</strong><br></p>		<p><strong>1. Connect:</strong><br> You have to connect your client to any broker with username/password. Every mqtt library has a <code>connect()</code> method. In this step, you have not specified qos yet.<br>	After successful connection (every mqtt library has a callback for the connect method) and you can publish or subscribe to any desired (or allowed) topics.<br>	Example:<br>	<a href="https://github.com/eclipse/paho.mqtt.java" rel="nofollow noreferrer">Eclipse Paho library:</a><br></p>		<pre><code>IMqttToken token = clientPhone.connect();	</code></pre>		<p><a href="https://github.com/hivemq/hivemq-mqtt-client" rel="nofollow noreferrer">HiveMQ Library:</a><br></p>		<pre><code>client.connect();	//or	client.connectWith().keepAlive(10).send(); 	//or	Mqtt5Connect connectMessage = Mqtt5Connect.builder().keepAlive(10).build();	client.connect(connectMessage);	</code></pre>		<p><strong>2. Publish:</strong><br>	When you want to <code>publish()</code> a message, you have to specify a qos, so that the broker will respond to the client according with this qos:</p>		<pre><code>Qos=0:	Client  ---- Publish method ----&gt; broker	Qos=1:	Client  ---- Publish method  ----&gt; broker	Client &lt;---- PubAck callback ----  broker	Qos=2:	Client  ---- Publish method   ----&gt; broker	Client &lt;---- PubRec callback  ----  broker	Client  ---- PubRel method    ----&gt; broker	Client &lt;---- PubComp callback ----  broker	</code></pre>		<p>Example:</p>		<p><a href="https://github.com/eclipse/paho.mqtt.java" rel="nofollow noreferrer">Eclipse Paho library:</a><br></p>		<pre><code>IMqttDeliveryToken tokenPub = clientPhone.publish(topicPub, message);	</code></pre>		<p><a href="https://github.com/hivemq/hivemq-mqtt-client" rel="nofollow noreferrer">HiveMQ Library:</a><br></p>		<pre><code>client.publishWith()	        .topic("test/topic")	        .qos(MqttQos.AT_LEAST_ONCE)	        .payload("payload".getBytes())	        .send();	//or:	Mqtt5Publish publishMessage = Mqtt5Publish.builder()	        .topic("test/topic")	        .qos(MqttQos.AT_LEAST_ONCE)	        .payload("payload".getBytes())	        .build();	client.publish(publishMessage);	</code></pre>		<p><strong>3. Subscribe:</strong><br>	A SUBSCRIBE message can contain an arbitrary number of subscriptions for a client. Each subscription is a pair of a topic and QoS level. The topic in the subscribe message can also contain wildcards, which makes it possible to subscribe to certain topic patterns. If there are overlapping subscriptions for one client, the highest QoS level for that topic wins and will be used by the broker for delivering the message.<br>	Example:</p>		<p><a href="https://github.com/eclipse/paho.mqtt.java" rel="nofollow noreferrer">Eclipse Paho library:</a><br></p>		<pre><code>IMqttToken subToken = MqttAndroidClientInstance.subscribe(topics, qos);	</code></pre>		<p><a href="https://github.com/hivemq/hivemq-mqtt-client" rel="nofollow noreferrer">HiveMQ Library:</a><br></p>		<pre><code>client.subscribeWith().topicFilter("test/topic").qos(MqttQos.EXACTLY_ONCE).send();	//or:	Mqtt5Subscribe subscribeMessage = Mqtt5Subscribe.builder()	        .topicFilter("test/topic")	        .qos(MqttQos.EXACTLY_ONCE)	        .build();	client.subscribe(subscribeMessage);	</code></pre>	"
