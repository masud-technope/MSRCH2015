thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
56188312,56188312,null,1,0,Fri May 17 14:17:00 EDT 2019,11516486,"<p>I am trying to use google cloudiot api from a google cloud function written in python. When I make http requests to the Cloud IoT api, I get a 403 "forbidden' error. I have authenticated using a service account with full permissions.</p>		<p>import os	from flask import json	import base64</p>		<p>import firebase_admin	from firebase_admin import db</p>		<p>import googleapiclient	from googleapiclient import discovery	from google.oauth2 import service_account</p>		<p>default_app = firebase_admin.initialize_app(options={'databaseURL': '<a href="https://lucid-v2-1.firebaseio.com/" rel="nofollow noreferrer">https://lucid-v2-1.firebaseio.com/</a>'})</p>		<p>def get_client(service_account_json):	    """Returns an authorized API client by discovering the IoT API and creating	    a service object using the service account credentials JSON."""	    api_scopes = ['<a href="https://www.googleapis.com/auth/cloud-platform" rel="nofollow noreferrer">https://www.googleapis.com/auth/cloud-platform</a>', '<a href="https://www.googleapis.com/auth/cloudiot" rel="nofollow noreferrer">https://www.googleapis.com/auth/cloudiot</a>']	    api_version = 'v1'	    discovery_api = '<a href="https://cloudiot.googleapis.com/" rel="nofollow noreferrer">https://cloudiot.googleapis.com/</a>$discovery/rest'	    service_name = 'cloudiotcore'</p>		<pre><code>#credentials = service_account.Credentials.from_service_account_file(service_account_json)	credentials = service_account.Credentials.from_service_account_file(service_account_json)	scoped_credentials = credentials.with_scopes(api_scopes)		discovery_url = '{}?version={}'.format(	        discovery_api, api_version)		print(credentials.service_account_email)		return discovery.build(	        service_name,	        api_version,	        discoveryServiceUrl=discovery_url,	        credentials=scoped_credentials,	        cache_discovery=False)	</code></pre>		<p>def request_posted(event, context):</p>		<pre><code>print(os.environ)	#	client = get_client(os.environ.get('GOOGLE_APPLICATION_CREDENTIALS'))	"""Triggered by a change to a Firebase RTDB reference.	Args:	     event (dict): Event payload.	     context (google.cloud.functions.Context): Metadata for the event.		"""		print(client)		resources = context.resource.split('/')	request_id = resources[-1]	request_values = event['delta']		response_ref = db.reference("experience_channel/responses/" + str(request_id))	response_ref.update({"ack":True})		db.reference("experience_channel/experience_data")		device_id = "2593786060198708"	project_id = "lucid-iOS-v2-1"	cloud_region = "us-central1"	registry_id = "Lucid_IoT_Registry"	device_path = 'projects/{}/locations/{}/registries/{}/devices/{}'.format(project_id, cloud_region, registry_id, device_id)		print(device_path)	epoch_length = 20		message_contents = {	"experience_id":request_id,	"epoch_length":epoch_length,	"experience_length":request_values['length']	}		message_json = json.dumps(message_contents)		test_body = "test_body"		command_body = {	    'binaryData': base64.urlsafe_b64encode(	        message_json.encode('utf-8')).decode('ascii'),	    'subfolder' : 'commands'	}		#client.projects().locations().registries().testIamPermissions(resource = )			print(client.projects(	    ).locations().registries(	    ).devices().list(parent = "projects/lucid-iOS-v2-1/locations/us-central1/registries/Lucid_IoT_Registry").execute())		resp = client.projects(	    ).locations().registries(	    ).devices().sendCommandToDevice(	    name = device_path, body = command_body).execute()		print(resp)		return resp	</code></pre>	"
56188312,99109135,56188312,3,0,Tue May 21 19:41:00 EDT 2019,9932532,"When you say "service account with full permission", can you tell me which roles specifically that service account has? That might be an issue. Also, were you able to access the Cloud IoT Core API locally (not through Cloud Functions)? It might be important to isolate the issue to whether it is Cloud Functions specific, or if the 403 happens elsewhere as well."
56188312,99148393,56188312,3,0,Wed May 22 23:11:00 EDT 2019,3534690,"Where is `service_account_json` defined? Have you dumped the variable to confirm it's there and that you're using the service account you think you are? Depending on how that's handled, you might be getting a default service account which doesn't have the right permissions."
56188312,99465834,56188312,3,0,Mon Jun 03 23:58:00 EDT 2019,9932532,"Keep in mind that the newer Python library is technically in Alpha and does not have the standard SLOs associated with it. With that said, I do recommend trying it to see if we can isolate the issue."
56188312,99274263,56188312,3,0,Tue May 28 01:21:00 EDT 2019,609290,"You may be incorrectly specifying `'subfolder': 'commands'`. The API documentation suggests that by specifying a subfolder, you'll get to `/devices/{device-id}/commands/{subfolder}`, so you may be incorrectly attempting to use `.../commands/commands`. See https://developers.google.com/resources/api-libraries/documentation/cloudiot/v1/python/latest/cloudiot_v1.projects.locations.registries.devices.html#sendCommandToDevice"
56188312,99274319,56188312,3,0,Tue May 28 01:27:00 EDT 2019,609290,"Not (!) that this will solve your issue but -- unless you've a need to stick with the older API Client Library -- there's a more modern (idiomatic) Cloud Client library for Cloud IoT for Python too (https://googleapis.github.io/google-cloud-python/latest/iot/index.html)"
