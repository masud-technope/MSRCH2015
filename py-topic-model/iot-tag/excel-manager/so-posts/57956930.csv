thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57956930,57956930,null,1,0,Mon Sep 16 12:29:00 EDT 2019,4884456,"<p>I have a few I2C devices hooked up to a Raspberry Pi. However, I need to be able to read/write to specific registers of an I2C device. I've tried this in the included UWP I2C Library, but I can't seem to find any support for reading/writing to a specific internal register of an I2C device. </p>		<p>I have gone through the given C# I2C tutorials, but found nothing about reading or writing from specific registers. </p>		<p>Here is the code I have to read from a device:</p>		<pre class="lang-cs prettyprint-override"><code>    public static async void ReadFromRegisterAsync(string PinAddress, int I2CAddress, string Register)	    {	        string i2cDeviceSelector = I2cDevice.GetDeviceSelector();	        IReadOnlyList&lt;DeviceInformation&gt; devices = await DeviceInformation.FindAllAsync(i2cDeviceSelector);		        var currentSensorSettings = new I2cConnectionSettings((int)I2CAddress);			        I2cDevice sensorDevice = await I2cDevice.FromIdAsync(devices[0].Id, currentSensorSettings);	        byte[] SensorReadingByte = new byte[1024];	        sensorDevice.Read(SensorReadingByte);		    }	</code></pre>		<p>Any help with this would be much appreciated. If the standard I2C library doesn't have that functionality, a recommendation of a C# library that does would be amazing.</p>	"
57956930,102326109,57956930,3,0,Mon Sep 16 12:45:00 EDT 2019,2511795,"What OS are you doing this all for?"
57956930,102326190,57956930,3,0,Mon Sep 16 12:48:00 EDT 2019,4884456,"@0andriy Windows 10 IoT. We have a different version written in python in case we want to go the linux route, but we'd rather stick with windows/c# if possible"
57956930,102326924,57956930,3,0,Mon Sep 16 13:08:00 EDT 2019,3070060,"You may need to look at the manufacturers data sheet for the specific I2C devices you are trying to read/write. Typically you would write to the device, with the first byte selecting the register for the subsequent read/write command. Some devices there may be additional bits in that first write byte that also affect mode of operation of the device."
57956930,102327930,57956930,3,0,Mon Sep 16 13:37:00 EDT 2019,4884456,"@PaulF I'm using the I2C Library built into UWP, are you saying i should do a write operation, and then a read depending on the manufacturer's specifications?"
57956930,102328773,57956930,3,0,Mon Sep 16 14:00:00 EDT 2019,3070060,"Yes - it has nothing to do with the library or the OS - it is a function of the I2C device itself. Just looking at data sheets I have to hand - MAX6650 Fan Speed Regulator - register is selected by the writing an 8 bit address to select a register - if you want to read another register then you need to write that address. With a PC9698 I/O expander - the register is selected by the low 6bits of the write command, the top bit is used to select auto-increment mode. When set you can read/write registers sequentially, otherwise you need to write the required register each time."
57956930,102329147,57956930,3,0,Mon Sep 16 14:10:00 EDT 2019,3070060,"You also need to read the data sheet very carefully - for example the PCA9501 I/O port with EEPROM. If you want to read from a random location in the EEPROM - you need to select the 8-bit address with a Write command but you must ensure that there is no I2C stop bit transmitted prior to the subsequent I2C read command as this causes an auto-increment of the address that you will read from. Many I2C libraries will always issue a stop bit after the Write command which causes problems reading the EEPROM."
