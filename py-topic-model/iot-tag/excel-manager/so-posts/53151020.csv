thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
53151020,53151020,null,1,0,Mon Nov 05 08:50:00 EST 2018,10606853,"<p>Iâ€™m creating an IOT device with some unusual needs when compared with typical home automation. I wanted to ask if anyone knew of a mesh protocol (Zigbee, Thread, BLE Mesh), that might be able to achieve this user experience: </p>		<ol>	<li>When someone turns on their device, it looks to connect to a mesh network, comprised of other devices they have previously â€œfriendedâ€?. </li>	<li>If no network is found, it creates its own mesh network, available for other â€œfriendedâ€? devices to connect to, when those devices turn on.</li>	<li>If the device creates its own mesh network (as in behaviour above), but no one connects to it â€“ and then the device finds a different network with more than one friend on it, the device should kill its own network in favour of connecting to the other. </li>	<li>Iâ€™m expecting that there will not be a â€œmasterâ€? node who has â€œfriendedâ€? every possible device that wants to join the network â€“ Iâ€™d like the possibility for â€œfriendsâ€? to bring their â€œfriendsâ€?, to also join the network. </li>	<li>If a partition in the network occurs (this is very likely to occur in my use case), the network should automatically re-form when the devices are close to each other again. </li>	<li>All devices are expected to be identical in function, size, software â€“ so BLE Mesh is probably not suitable given it needs a â€œProvisionerâ€??</li>	<li>Messages transferred will be bespoke to this application â€“ ruling out Zigbeeâ€™s Application Layer?</li>	<li>Messages will be small in size, so data transfer speed is not a big concern.</li>	</ol>		<p>I believe from what Iâ€™ve read that Thread is probably the most suitable for this use case â€“ but wanted some other opinions to see what the best choice might be?	 Seems to be a bit of a mine field to fully understand the ins and outs of all of these mesh protocols!</p>	"
53151020,93193007,53151020,3,0,Mon Nov 05 09:14:00 EST 2018,7556604,"This is highly dependent on your hardware. Also, how do objects recognize themselves ? Does the data needs to be encrypted ?"
53151020,93194820,53151020,3,0,Mon Nov 05 10:11:00 EST 2018,10606853,"Hardware is not defined yet, so I am flexible on this - Ideally the device will be a low power embedded device (currently looking at the Nordic NRF52840 if I go with Thread). I'm imagining each device will have a randomly generated UUID assigned to that particular user, to distinguish themselves from others - however this is not vital, as my use case doesn't require messages to be transferred to specific nodes - all messages should flood the entire network. Data doesn't need to be encrypted."
53151020,93206605,53151020,3,0,Mon Nov 05 16:07:00 EST 2018,7556604,"From the use case you've described, all three protocol can work in a mesh network. I'd suggest looking into other factor such as : bandwidth, power consumption, price (HW), security, physical range, frequency (interference with other device around) etc. Otherwise I'd choose the most simple protocol for mesh network which IMHO would be ZigBee. But I've also never used openthread so it could also work."
53151020,53158878,53151020,2,0,Mon Nov 05 16:58:00 EST 2018,6383731,"<p>I believe Thread/OpenThread addresses all of the use case items you listed above.</p>	"
