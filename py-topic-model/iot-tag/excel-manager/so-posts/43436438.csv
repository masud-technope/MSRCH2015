thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
43436438,43436438,null,1,-1,Sun Apr 16 10:53:00 EDT 2017,5541940,"<p>Someone from another forum recently boasted to me that he managed to make a server (chat server) using java socket connections (or maybe websocket) that handles over 1000+ simultaneous connections just by using an IOT device (I assumed it was raspberry pi 3 since it is the most powerful in its series).</p>		<p>From the hardware specs wise, I find it hard to believe that, but maybe there are certain java tricks other than open and close socket connections, which I think is expensive and prone to synch issues. Maybe someone can share some tips of how it is possible to use java socket to host a chat server with 1000+ connections at the same time just by using micro computer such as raspberry? Maybe I missed something.</p>	"
43436438,73930009,43436438,3,0,Sun Apr 16 10:59:00 EDT 2017,3426328,"You can boast and tell him that your pi3 chat server handles 1500 simultaneous connections."
43436438,43436506,43436438,2,0,Sun Apr 16 11:01:00 EDT 2017,7053782,"<p>I don't see any specific constraint/limitation here. Holding 1000+ connections just means the process holds 1000+ socket file descriptors  + several objects that map to those sockets + buffers.	Read/Writing from/to sockets is not considered that much of a costly operation ( it's not like your doing heavy computation ).</p>		<p>RPI3 has 1GB of ram, let's assume with the right OS around 768MB are free for apps. unless you're loading a heap of 3rd party Jars, that should suffice to keep 1000 connections alive + multiplex between read/write operations of sockets.</p>	"
43436438,73933765,43436506,3,0,Sun Apr 16 14:45:00 EDT 2017,816620,"Probably need to make sure there aren't 1000 Java threads."
