thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
34177156,34177156,null,1,0,Wed Dec 09 11:02:00 EST 2015,1792570,"<p>I'm working on an IoT App which will do majority of the basic IoT operations like reading and writing to "Things".</p>		<p>Naturally, it only makes sense to have an event-driven server than a polling server for real-time updates. I have looked into many options that are available and read many articles/discussions too but couldn't reach to a conclusion about the technology stack to use for the backend.</p>		<p>Here are the options that i came across:</p>		<ul>	<li>Meteor</li>	<li>Python + Tornado</li>	<li>Node.js + Socket.io</li>	<li>Firebase</li>	<li>PubNub</li>	<li>Python + Channel API (Google App Engine)</li>	</ul>		<p>I want to have as much control on the server as possible, and of course at the best price. What options do i have? Am i missing something out?</p>		<p>Personally, i prefer having a backend in Python from my prior experience.</p>	"
34177156,34178035,34177156,2,1,Wed Dec 09 11:45:00 EST 2015,3238659,"<p>You're comparing apples to oranges here in your options. The first three are entirely under your control, because, well, you own the server. There are many ways to get this wrong and many ways to get this right, depending on your experience and what you're trying to build.</p>		<p>The last three would fall under Backend-As-A-Service (BaaS). These let you quickly build out the backend of an application without worrying about all the plumbing. Your backend is operated, maintained by a third party so you lose control when compared to your own server.</p>		<blockquote>	  <p>... and of course at the best price</p>	</blockquote>		<p>AWS, Azure, GAE, Firebase, PubNub all have free quotas. If your application becomes popular and you need to scale, at some point, the BaaS options <em>might</em> end up being more expensive.</p>	"
34177156,34183576,34177156,2,0,Wed Dec 09 16:10:00 EST 2015,3809559,"<p><a href="https://www.backand.com" rel="nofollow">Back&amp;</a> is another BaaS you can consider which gives you more control on socket.io but without the need to setup anything (disclaimer: I work for backand.com). </p>		<p>In the server side actions you make a decision when to fire the event and to which users or roles and in the client just add listener and it works.</p>		<p>Checkout this codepen  demonstrating the solution: <a href="http://codepen.io/backand/pen/VvoKya" rel="nofollow">http://codepen.io/backand/pen/VvoKya</a></p>		<p>Client side:</p>		<pre><code>Backand.on('todo_updated', function (data) {	  //Get the event and refresh the list	  console.log("event:" + data);	  $scope.readList();	});	</code></pre>		<p>Server side:</p>		<pre><code>Socket.emitAll('todo_updated', dbRow);	</code></pre>	"
