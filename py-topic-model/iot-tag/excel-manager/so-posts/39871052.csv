thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
39871052,39871052,null,1,1,Wed Oct 05 10:04:00 EDT 2016,5284909,"<p>I am using Apache Spark to take real time data from Apache Kafka which are from any sensors in Json format.</p>		<p>example of data format : </p>		<pre><code>{	    "meterId" : "M1",	    "meterReading" : "100"	 }	</code></pre>		<p>I want to apply rule to raise alert in real time. i.e. if I did not get data of "meter M 1" from last 2 hours or meter Reading exceed some limit the alert should be created.</p>		<p>so how can I achieve this in Scala?</p>	"
39871052,67062413,39871052,3,0,Thu Oct 06 05:18:00 EDT 2016,5284909,"Thanks @VladoDemcak. It will help me a lot. but want to know how can i read individual object like for meterId M1 meterReading is 100. can i parse each line coming from kafka for this?"
39871052,67063931,39871052,3,1,Thu Oct 06 06:22:00 EDT 2016,2715438,"I added answer with example in more details"
39871052,67050278,39871052,3,0,Wed Oct 05 18:58:00 EDT 2016,2715438,"*First thing* - As I know the json in kafka should be: one message per one line - send this instead -> `{"meterId":"M1","meterReading":"100"}`		*Second*: Create SparkStreamingContext and configure to read messages from kafka in batches.		*Third*: Implement your logic ("exceed some limit", "no data in some time" ...) with spark and write output to somewhere - place with all alerts (eg. hdfs, kafka ...)"
39871052,39888882,39871052,2,1,Thu Oct 06 06:21:00 EDT 2016,2715438,"<p>I will respond here as an answer - too long for comment.</p>		<p>As I said json in kafka should be: one message per one line - send this instead -> <code>{"meterId":"M1","meterReading":"100"}</code></p>		<p>If you are using kafka there is KafkaUtils with that you can create stream:</p>		<p><code>JavaPairDStream&lt;String, String&gt; input = KafkaUtils.createStream(jssc, zkQuorum, group, topics);</code></p>		<p>Pair means <code>&lt;kafkaTopicName, JsonMessage&gt;</code>. So basically you can take a look only to jsonmessage if you dont need to use kafkaTopicName.</p>		<p>for <code>input</code> you can use many methods that are described in <a href="http://spark.apache.org/docs/latest/api/java/index.html?org/apache/spark/streaming/api/java/JavaPairDStream.html" rel="nofollow">JavaPairDStream documentation</a> - eg. you can use map to get only messages to simple JavaDStream.</p>		<p>And of course you can use some json parser like <code>gson</code>, <code>jackson</code> or <code>org.json</code> it depends on use cases, performance for different cases and so on.</p>		<p>So you need to do something like this:</p>		<pre><code>JavaDStream&lt;String&gt; messagesOnly = input.map(	   new Function&lt;Tuple2&lt;String, String&gt;, String&gt;() {	       public String call(Tuple2&lt;String, String&gt; message) {	           return message._2();	       }	   }	); 	</code></pre>		<p>now you have only messages withou kafka topic name, now you can use your logic like you described in question.</p>		<pre><code> JavaPairDStream&lt;String, String&gt; alerts = messagesOnly.filter(	    new Function&lt;Tuple2&lt;String, String&gt;, Boolean&gt;() {	        public Boolean call(Tuple2&lt;String, String&gt; message) {	            // here use gson parser e.g 	            // filter messages with meterReading that doesnt exceed limit	            // return true or false based on your logic	        }	    }	);	</code></pre>		<p>And here you have only alert messages - you can send it to another place.</p>		<hr>		<p><strong><em>-- AFTER EDIT</em></strong></p>		<p>Below is the example in <code>scala</code></p>		<pre><code>// batch every 2 seconds	val ssc = new StreamingContext(sparkConf, Seconds(2))	ssc.checkpoint("checkpoint")		val topicMap = topics.split(",").map((_, numThreads.toInt)).toMap		def filterLogic(message: String): Boolean=	{	    // here your logic for filtering	}		// map _._2 takes your json messages	val messages = KafkaUtils.createStream(ssc, zkQuorum, group, topicMap).map(_._2)		// filtered data after filter transformation	val filtered = messages.filter(m =&gt; filterLogic(m))	</code></pre>	"
39871052,67501934,39888882,3,0,Tue Oct 18 18:14:00 EDT 2016,2715438,"@Nilesh In the answer I have added example for `scala`"
