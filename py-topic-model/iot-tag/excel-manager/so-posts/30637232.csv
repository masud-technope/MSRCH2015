thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
30637232,30637232,null,1,0,Thu Jun 04 07:07:00 EDT 2015,4972546,"<p>I have an Aurdino YUN where i get some water data ( how much i have used ) 	I would like to get this data on the web and have just started to check around with azure which seems to be an amazing service but a bit overwhelming. </p>		<p>I expect my project to grow and im a bit confused as to what service i should use. </p>		<p>My questions is. 	What service should i use? 	1. Mobile service 	2. azure event Bus</p>		<p>I have read alot of guides and they seem to use the mobileservice but Microsoft seems to want me to use the eventbus.</p>		<p>Can someone please clarify the difference on the services or recommend me which one to use? </p>		<p>BR	Emil</p>	"
30637232,30637694,30637232,2,0,Thu Jun 04 07:33:00 EDT 2015,361100,"<p>I recommend you to use Azure Event Hub. it's pure and reliable message queue so that you can understand it and utilize it easily.</p>		<p>Mobile service is not quite applicable to your project as it's normally suitable for a service which consists of OAuth authentication, mobile push message, and NoSQL (Azure Table) data storage.</p>	"
30637232,30637712,30637232,2,1,Thu Jun 04 07:34:00 EDT 2015,134204,"<p>That's because the two services do completely different things. In fact, you could almost consider one the opposite of the other:</p>		<ul>	<li>Mobile services provide services <em>to</em> mobile devices to <em>call</em>. While you could use them to post event streams, they aren't optimised for this. They don't store the stream, have no concept of consumers, etc. You would have to write everything that an Event Hub does by yourself.</li>	<li>Event Hubs exist to <em>accept</em> a lot of data events from a large number of devices. It's designed to accept millions of events per second</li>	</ul>		<p>Mobile Services just aren't made for event processing. </p>		<p>Event Hubs offer a lot of advantages:</p>		<ul>	<li>The stream is cached and queued, so you don't have to consume events right away</li>	<li>You have a simple API to define consumers, without bothering about event storage etc. You just call <code>receiver.Receive()</code> to read the next event from the stream.</li>	<li>You can have multiple consumers processing a stream. </li>	<li>Consumers can stop and resume processing at specific points in a stream using checkpoints. This way, if a consumer crashes and restarts it won't lose events after the last checkpoint.</li>	<li>Scaling is very easy if the traffic is high, you simply buy more throughput units</li>	</ul>		<p>You'll find a much better explanation in the <a href="https://msdn.microsoft.com/en-us/library/azure/dn836025.aspx" rel="nofollow">Event Hubs Overview</a> article at MSDN.</p>	"
30637232,61423514,30637712,3,0,Fri Apr 29 07:13:00 EDT 2016,4754101,"@Panagiotis Please update with information about Azure IoT Hub, which was made GA in February."
30637232,49340332,30637712,3,0,Thu Jun 04 07:42:00 EDT 2015,4972546,"Thanx alot for your help. :)"
