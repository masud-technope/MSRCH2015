thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42009016,42009016,null,1,0,Thu Feb 02 17:49:00 EST 2017,3074491,"<p>I have been struggling to find a way of persisting an SQLite database on a Pi under Win IoT which can be accessed by different background applications (not concurrently).</p>		<p>I thought I had the answer when I discovered Libraries (Music, Pictures, Videos - but perversely not Documents, without more work). I can create a text file in one app and write it to the Pictures library's default folder. I can then read the text file with another app. File.Exists returns true. Bingo (I thought)! </p>		<p>However, SQLite will not create a database in the folder or open an existing database that I copy to the folder. SQLite.Net.SQLiteConnection returns an SQLite exception: "Could not open database file: C:\Data\Users\DefaultAccount\Pictures\MyDb.db (CannotOpen)" - no further clues. </p>		<p>The folder appears to grant full permissions. Does anyone have any ideas, please?</p>		<p>Creating and Writing a text file:</p>		<pre><code>using System;	using Windows.ApplicationModel.Background;	using System.IO;	using System.Diagnostics;		//*** NOTE: Pictures Library checked in Package.appxmanifest 'Capabilities'		namespace LibraryTest	{	    public sealed class StartupTask : IBackgroundTask	    {	        private BackgroundTaskDeferral Deferral;		        public async void Run (IBackgroundTaskInstance taskInstance)	        {	            Deferral = taskInstance.GetDeferral ();		            var myPictures = await Windows.Storage.StorageLibrary.GetLibraryAsync	                (Windows.Storage.KnownLibraryId.Pictures);		            string path = myPictures.SaveFolder.Path;	            Debug.WriteLine ($"'Pictures' Folder: {path}");		            string newFilePath = Path.Combine (path, "TestTextFile.txt");	            Debug.WriteLine ($"New File Path: {newFilePath}");		            try {	                using ( var stream = File.OpenWrite (newFilePath) ) {	                    using ( var writer = new StreamWriter (stream) ) {	                        writer.Write ("This is some test text.");	                    }	                }	                Debug.WriteLine ($"File created OK");	            }	            catch (Exception ex) { Debug.WriteLine ($"Exception: {ex.Message}"); }	        }	    }	}	</code></pre>		<p>Produced:</p>		<pre><code>'Pictures' Folder: C:\Data\Users\DefaultAccount\Pictures	New File Path: C:\Data\Users\DefaultAccount\Pictures\TestTextFile.txt	File created OK	</code></pre>		<p>Reading:</p>		<pre><code>using System;	using Windows.ApplicationModel.Background;	using System.IO;	using System.Diagnostics;		//*** NOTE: Pictures Library checked in Package.appxmanifest 'Capabilities'		namespace ReadLibraryTest	{	    public sealed class StartupTask : IBackgroundTask	    {	        private BackgroundTaskDeferral Deferral;		        public async void Run (IBackgroundTaskInstance taskInstance)	        {	            Deferral = taskInstance.GetDeferral ();		            var myPictures = await Windows.Storage.StorageLibrary.GetLibraryAsync	                (Windows.Storage.KnownLibraryId.Pictures);		            string path = myPictures.SaveFolder.Path;	            Debug.WriteLine ($"'Pictures' Folder: {path}");		            string newFilePath = Path.Combine (path, "TestTextFile.txt");	            Debug.WriteLine ($"New File Path: {newFilePath}");		            try {	                using ( var stream = File.OpenRead (newFilePath) ) {	                    using ( var reader = new StreamReader (stream) ) {	                        string fileContents = reader.ReadLine ();	                        Debug.WriteLine ($"First line of file: '{fileContents}'");	                    }	                }	                Debug.WriteLine ($"File read OK");	            }	            catch ( Exception ex ) { Debug.WriteLine ($"Exception: {ex.Message}"); }	        }	    }	}	</code></pre>		<p>Produced:</p>		<pre><code>'Pictures' Folder: C:\Data\Users\DefaultAccount\Pictures	New File Path: C:\Data\Users\DefaultAccount\Pictures\TestTextFile.txt	First line of file: 'This is some test text.'	File read OK	</code></pre>	"
42009016,71350573,42009016,3,0,Tue Feb 07 12:49:00 EST 2017,3074491,"Rita, I have added the code to the original question above. The new file is visible in Windows Explorer."
42009016,71212340,42009016,3,0,Fri Feb 03 07:35:00 EST 2017,6601582,"The exception due to access limitation to path "C:\Data\Users\DefaultAccount\Pictures\" of UWP app. You can check [File access permissions](https://msdn.microsoft.com/en-us/windows/uwp/files/file-access-permissions)."
42009016,71236101,42009016,3,0,Fri Feb 03 18:32:00 EST 2017,3074491,"Thanks for your response, Rita. It is strange, though, that I was able to both create and read a text file in this folder using standard SYSTEM.IO stream methods. Also, I could copy a file into the folder and open the file from Windows Explorer on my PC (which reports full privileges to me as a user on the Pi). I would not have thought that SQLite would require any greater privileges than the read & write allowed for these other operations."
42009016,71291236,42009016,3,0,Mon Feb 06 02:00:00 EST 2017,6601582,"**"that I was able to both create and read a text file in this folder using standard SYSTEM.IO stream methods."** Can you show the code of this part?"
42009016,42128843,42009016,2,2,Thu Feb 09 05:22:00 EST 2017,6601582,"<blockquote>	  <p>However, SQLite will not create a database in the folder or open an	  existing database that I copy to the folder.	  SQLite.Net.SQLiteConnection returns an SQLite exception: "Could not	  open database file: C:\Data\Users\DefaultAccount\Pictures\MyDb.db	  (CannotOpen)" - no further clues.</p>	</blockquote>		<p>Yes, I reproduced this issue. It seems this folder does not work with SQLite file operations but I don't know where the problem is.</p>		<p>As a workaround, you can use <a href="https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.ApplicationData#Windows_Storage_ApplicationData_GetPublisherCacheFolder_System_String_" rel="nofollow noreferrer">PublisherCacheFolder</a>. I create the .db file and write data in one background app. And read the data from another background app. It works. </p>		<p>Contact class:</p>		<pre><code>public sealed class Contact	{	    public int Id { get; set; }	    public string Name { get; set; }	}	</code></pre>		<p>Create and write file:</p>		<pre><code>            StorageFolder sharedFonts = Windows.Storage.ApplicationData.Current.GetPublisherCacheFolder("test");		            var sqlpath = System.IO.Path.Combine(sharedFonts.Path, "MyDb.db");		            using (SQLite.Net.SQLiteConnection conn = new SQLite.Net.SQLiteConnection(new SQLite.Net.Platform.WinRT.SQLitePlatformWinRT(), sqlpath))	            {	                conn.CreateTable&lt;Contact&gt;();	                for (var i = 0; i &lt; 100; i++)	                {	                    Contact contact = new Contact()	                    {	                        Id = i,	                        Name = "A"	                    };	                    conn.Insert(contact);	                }	            }	</code></pre>		<p>Read file:</p>		<pre><code>            StorageFolder sharedFonts = Windows.Storage.ApplicationData.Current.GetPublisherCacheFolder("test");		            var sqlpath = System.IO.Path.Combine(sharedFonts.Path, "MyDb.db");		            using (SQLite.Net.SQLiteConnection conn = new SQLite.Net.SQLiteConnection(new SQLite.Net.Platform.WinRT.SQLitePlatformWinRT(), sqlpath))	            {	                var query = conn.Table&lt;Contact&gt;().Where(v =&gt; v.Name.Equals("A"));		                foreach (var stock in query)	                    Debug.WriteLine("contact: " + stock.Id);	            }	</code></pre>		<p>To use this publisher folder you need add the following lines in Package.appxmanifest:</p>		<pre><code>  &lt;Extensions&gt;	    &lt;Extension Category="windows.publisherCacheFolders"&gt;	      &lt;PublisherCacheFolders&gt;	        &lt;Folder Name="test" /&gt;	      &lt;/PublisherCacheFolders&gt;	    &lt;/Extension&gt;	  &lt;/Extensions&gt;	</code></pre>	"
42009016,71537326,42128843,3,0,Sun Feb 12 12:39:00 EST 2017,3074491,"Thanks, Rita. Worked very well. For the benefit of anyone reading, I am using the async version of SqlLite and create the connection as follows:"
42009016,42187682,42009016,2,0,Sun Feb 12 12:43:00 EST 2017,3074491,"<p>Thanks, Rita. Worked very well. For the benefit of anyone reading, I am using the async version of SqlLite and create the connection as follows:</p>		<pre><code>const string FileName = "MyFile.db";	string DbDir;	string DbPath;			Constructor:	    DbDir = Windows.Storage.ApplicationData.Current.GetPublisherCacheFolder("test").Path;	    DbPath = Path.Combine (DbDir, DbFileName);			public SQLite.Net.Async.SQLiteAsyncConnection GetConnectionAsync ()	    {	        var connectionFactory = new Func&lt;SQLite.Net.SQLiteConnectionWithLock&gt;(()=&gt;	                new SQLite.Net.SQLiteConnectionWithLock(new SQLitePlatformWinRT(),	                        new SQLite.Net.SQLiteConnectionString(DbPath, storeDateTimeAsTicks: false)));	        var asyncConnection = new SQLiteAsyncConnection(connectionFactory);	        return asyncConnection;	    }	</code></pre>		<p>Then, for instance, read a table of type Parms:</p>		<pre><code>public async Task&lt;Parms&gt; ReadParmsAsync ()	{	    var db = GetConnectionAsync ();	    var query = db.Table&lt;Parms&gt; ().Where (p =&gt; p.Id == 1);	    return await query.FirstOrDefaultAsync ();	}	</code></pre>		<p>My concern about the SQLite async connection is that it is not IDisposable. Therefore, will the 'factory' eventually run out of steam (memory, handles)? But I guess that is a subject for another thread.</p>	"
