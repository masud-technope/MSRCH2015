thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
50716912,50716912,null,1,0,Wed Jun 06 09:32:00 EDT 2018,9902478,"<p>I am very new to C# and Azure IoT. Perhaps the problem I have is very simple to solve. I would like to update the an UI Element by invoking a method from the cloud. But I am getting the following Error:</p>		<blockquote>	  <p>The application called an interface that was marshalled for a	  different thread. (Exception from HRESULT: 0x8001010E	  (RPC_E_WRONG_THREAD))</p>	</blockquote>		<p>I know t has something to do with the fact that the UI is running in another thread. but I didnÂ´t find any solution.</p>		<p>Here the code</p>		<pre><code>public sealed partial class MainPage : Page	{		    DeviceClient deviceClient;		    public MainPage()	    {	        this.InitializeComponent();	        deviceClient = DeviceClient.CreateFromConnectionString(GlobalConstant.DEVICE_CONNECTION_STRING, TransportType.Mqtt);	        deviceClient.SetMethodHandlerAsync("UpdateTextfield", UpdateTextfield, null);	    }		    private void updateTextField ()	    {	        IncomingMessage.Text = "Update";	    }		    private Task&lt;MethodResponse&gt; UpdateTextfield(MethodRequest methodRequest, object userContext)	    {	        updateTextField();	        string result = "{\"result\":\"Executed direct method: " + methodRequest.Name + "\"}";	        return Task.FromResult(new MethodResponse(Encoding.UTF8.GetBytes(result), 200));	    }	}	</code></pre>	"
50716912,88443473,50716912,3,0,Wed Jun 06 09:58:00 EDT 2018,932728,"Possible duplicate of [How do I update the GUI from another thread?](https://stackoverflow.com/questions/661561/how-do-i-update-the-gui-from-another-thread)"
50716912,88445830,50716912,3,0,Wed Jun 06 11:00:00 EDT 2018,134204,"No operating system allows you to modify the UI from another thread. In a XAML/WPF/UWP application that uses MVVM or simply data binding you don't need to anyway. You *don't* modify the control directly. The control binds to a property and gets updated when the property is modified and the PropertyChanged event is raised"
50716912,88445890,50716912,3,0,Wed Jun 06 11:02:00 EDT 2018,134204,"You can use the `IProgress<T>` interface to report progress or any other message from a background thread anyway, as shown in [Enabling Progress and Cancellation in Async APIs](Enabling Progress and Cancellation in Async APIs)"
50716912,89103916,50716912,3,0,Wed Jun 27 07:20:00 EDT 2018,6601582,"@quallenbezwinger Does the reply solved your issue or still have some problem?"
50716912,50732071,50716912,2,0,Thu Jun 07 02:15:00 EDT 2018,6601582,"<p>The process that you are calling the:	<code>IncomingMessage.Text = "Update";</code>	is happening on a thread that is non-UI threads. You need to marshal the thread from the current executing thread to the UI thread.</p>		<p>Windows.UI.Core.CoreDispatcher can be used to this. Here is an example:</p>		<pre><code>    using Windows.ApplicationModel.Core;		    private async void updateTextField ()	    {	        await CoreApplication.MainView.CoreWindow.Dispatcher.RunAsync(CoreDispatcherPriority.Normal, ()=&gt;{	            IncomingMessage.Text = "Update";	        });    	    }	</code></pre>		<p>Cross reference: "<a href="https://stackoverflow.com/questions/10579027/run-code-on-ui-thread-in-winrt">Run code on UI thread in WinRT</a>"</p>	"
50716912,88475530,50732071,3,0,Thu Jun 07 05:59:00 EDT 2018,6601582,"@DannyChen You're right. Thanks. I update my answer."
50716912,88472081,50732071,3,0,Thu Jun 07 02:21:00 EDT 2018,323924,"I'm not familiar with WPF/UWP, but is it better to put the assignment of `dispatcher` in the `async void updateTextField` method? `GetForCurrentThread` here we need to make sure the `current` is really the one we want."
