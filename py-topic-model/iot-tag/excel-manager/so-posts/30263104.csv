thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
30263104,30263104,null,1,-1,Fri May 15 15:16:00 EDT 2015,2798367,"<p>I am trying to write a simple Universal app that presents media files from a network / SAN.	I've managed to get the thing working end-to-end, I'm just having difficulty obtaining files from the network in a <em>reliable</em> way.  </p>		<p>I have a feeling it is due to my poor grasp of asynchrony in C# and/or data binding in XAML apps, but I can't find a way through.</p>		<pre><code>using Windows.Storage;		// Private field to keep files	private BlockingCollection&lt;StorageFile&gt; fileList = new BlockingCollection&lt;StorageFile&gt;();		// Called after page initialization	private async Task InitFilesAsync()	{	    var deviceRoot = KnownFolders.MediaServerDevices;	    await WalkFolderAsync(deviceRoot);	    foreach (var f in fileList)	    {	        this.lbxFiles.Items.Add(f);	    }	}	</code></pre>		<p>And the <code>WalkFolder</code> method looks like this:</p>		<pre><code>private async Task WalkFolderAsync(StorageFolder parent)	{   	    var items = await parent.GetItemsAsync();	    foreach(var item in items)	    {	        if (item.IsOfType(StorageItemTypes.Folder))	        {	            await WalkFolderAsync((StorageFolder)item);	        }	        else if (item.IsOfType(StorageItemTypes.File))	        {	            fileList.Add((StorageFile)item);	        }	    }	}	</code></pre>		<p>Works ok to a degree; but sometimes 0 files come through, sometimes 5 or 6, and occasionally all fifteen files come through.</p>		<p><strong>Update:</strong>	I have refactored my code slightly as per suggestions in the comments, but this has not improved anything.</p>		<p><strong>Update #2</strong>	Still no luck really. It looks like the recursive async stuff (or indeed binding) may not be the problem; but possibly the device itself? I've tried handling any await call exceptions. I occasionally get Access Is Denied, but again this is not reproducible.</p>	"
30263104,48626087,30263104,3,2,Fri May 15 15:20:00 EDT 2015,1320845,"The main problem is likely that `List` is not thread safe and you're adding to it from multiple threads.  Either use a `lock` or a thread safe collection.  A second comment is you should be returning a `Task` from async methods else you have no ability to `await` them."
30263104,48647274,30263104,3,0,Sat May 16 09:50:00 EDT 2015,121309,"What would happen if WalkFolderAsync doesn't update the global fileList, but returns the list of items found?"
30263104,48647814,30263104,3,0,Sat May 16 10:23:00 EDT 2015,2798367,"Well originally I had tried writing the recursive method so that it accepted a `fileList` and returned the same list after additions took place. (since the `ref` keyword is not compatible with `async`).  Maybe trying this with a thread safe collection will work.  I shall give this a go.   Also, I'm starting to wonder about exceptions - my housemate connected their device to the network and then no files were coming through at all.  I eventually tracked this down to an `Access is Denied` exception..."
30263104,30263316,30263104,2,3,Fri May 15 15:28:00 EDT 2015,885318,"<p>The root issue is your use of <code>async void</code>. You should <strong>only</strong> use <code>async void</code> for event handlers. Since they don't return a task you can <code>await</code> until completion they force unneeded multi-threading which your <code>List</code> doesn't support. </p>		<p>You also don't wait for the list to fill up before iterating it so you have a race condition.</p>		<p>You should make your <code>async</code> methods return <code>Task</code>s and <code>await</code> them which would make your "walk" asynchronous but sequential.</p>		<pre><code>private async Task InitFilesAsync()	{	    await WalkFolderAsync(KnownFolders.MediaServerDevices);	    foreach (var f in fileList)	    {	        this.lbxFiles.Items.Add(f);	    }	}		private async Task WalkFolderAsync(StorageFolder parent)	{   	    var items = await parent.GetItemsAsync();	    foreach(var item in items)	    {	        if (item.IsOfType(StorageItemTypes.Folder))	        {	            await WalkFolderAsync((StorageFolder)item);	        }	        else if (item.IsOfType(StorageItemTypes.File))	        {	            fileList.Add((StorageFile)item);	        }	    }	}	</code></pre>	"
30263104,48626821,30263316,3,0,Fri May 15 15:38:00 EDT 2015,2798367,"Thanks for the clear explanations.  I have tried with the above code, and also using `BlockingCollection` instead of `List` for my file collection.  I am seeing nothing different really.  (I am invoking `InitFilesAsync` from the constructor, using `Task.Run(() => this.InitFilesAsync());` if that helps.  Does it matter where I instantiate my collection?"
30263104,48626941,30263316,3,0,Fri May 15 15:41:00 EDT 2015,885318,"@ne1410s You don't need `Task.Run` when you call an `async` method. Also, you can't `await` in the constructor so you need to call it in the window load event."
30263104,48627505,30263316,3,0,Fri May 15 15:55:00 EDT 2015,2718186,"I'd also avoid doing stuff in the window load event, because of [disappearing onload exceptions](http://blog.paulbetts.org/index.php/2010/07/20/the-case-of-the-disappearing-onload-exception-user-mode-callback-exceptions-in-x64/)"
30263104,48705614,30263316,3,0,Mon May 18 13:55:00 EDT 2015,2798367,"@i3arnon +1 thanks for your help with this.  However I found that my media device was configured to implement CIFS, FTP, NFS and AFS simultaneously.  I disabled all except CIFS and it seems to be serving up folder and file info fine now. :oD   It also doesn't seem to *"like"* me firing requests at it rapidly; so I've implemented more of a folder-navigator control instead."
30263104,48650345,30263316,3,0,Sat May 16 12:43:00 EDT 2015,885318,"@ne1410s If you call and `await` `InitFilesAsync` correctly this code should work."
30263104,48628115,30263316,3,0,Fri May 15 16:09:00 EDT 2015,885318,"@ne1410s I can only guess that one of the calls to `WalkFolderAsync` isn't `await`ed in your code."
30263104,48646716,30263316,3,0,Sat May 16 09:13:00 EDT 2015,2798367,"I have updated the question with the code changes suggested.  (I am still experiencing the same issues though)."
