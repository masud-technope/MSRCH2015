thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
33754583,33754583,null,1,0,Tue Nov 17 10:28:00 EST 2015,3688930,"<p><br>	I try to receive messages from Devices with the "EventHubReceiver" (Device2Cloud). Each device should have it's own, single receiver. <br><br>	It isn't a problem to create one single EventHubReceiver (per Partition) for all devices:</p>		<pre><code>string iotHubconnectionString = CloudConfigurationManager.GetSetting("Microsoft.IotHub.ConnectionStringPayed");	string iotHubD2cEndpoint = "messages/events";	EventHubClient eventHubClient = EventHubClient.CreateFromConnectionString(iotHubconnectionString, iotHubD2cEndpoint);	EventHubRuntimeInformation runtimeInformation = eventHubClient.GetRuntimeInformation();	</code></pre>		<p>If I then want to receive messages from the clients I do the following steps:</p>		<pre><code>EventHubReceiver eventHubReceiver = eventHubClient2.GetDefaultConsumerGroup().CreateReceiver(partition);  //Get the partitions via the runtimeInformation: string[] partitions = runtimeInformation.PartitionIds;	var incommingMessage = eventHubReceiver.ReceiveAsync();    //Wait here for incomming messages	</code></pre>		<p>That works all right, but all messages from all "Devices" arrive then at this one "EventHubReceiver". I would like to have multiple receiver, that only receive messages from a single device. <br>	I tried to change the following codeline:</p>		<pre><code>string iotHubD2cEndpoint = "messages/events";	</code></pre>		<p>to</p>		<pre><code>string iotHubD2cEndpoint = "devices/{deviceID}/messages/events";	</code></pre>		<p>but that doesn't work all right. I get the following error: <br></p>		<pre><code>The link address 'devices/secondDevice/messages/events/$management' did not match any of the expected formats. Supported formats: '/$cbs', '/devices/{deviceid}/messages/events', '/devices/{deviceid}/messages/deviceBound', '/messages/deviceBound', '/messages/serviceBound/feedback', '/messages/events/*'.	</code></pre>		<p>So the problem is that I get <code>'devices/secondDevice/messages/events/$management'</code> <br>insted of <code>'devices/secondDevice/messages/events/'</code> <br>	I don't know, whether it is just not possible to create a single EventHubReceiver for each Device or I've got a error in the code or thinking.</p>	"
33754583,33754983,33754583,2,2,Tue Nov 17 10:47:00 EST 2015,2210944,"<p>When a device send telemetry data to IoT Hub, the events are made available to the related D2C endpoint in the cloud that is "event hub compatible".	It has an "event hub like" behaviour and for this reason we are able to get message using an EventHubReceiver.	However, event hubs works in partitions and the incoming message can be assigned to partitions in a round robin fashion or hashing a partition key.	In the IoT Hub architecture I don't know if it use round robin but it's possibile that it use to hash the device id (as partition key) so all messages from a device go into a partition. It doesn't mean that the partition contains messages only for that device ! It's impossible to have a partition for each device :-)	So ... a partition containes messages mixed from different device (but message from a specific device go always in the same partition). An Event Hub receiver can read from partition so it gets all messages from more device. You need to distinguish them based on device id.</p>	"
33754583,55278021,33754983,3,0,Tue Nov 17 11:02:00 EST 2015,3688930,"He, you like to answer my questions :D..."
33754583,55278248,33754983,3,0,Tue Nov 17 11:07:00 EST 2015,2210944,"Did I already answer any other your questions ? great ! :-) Did you find the last one useful ?"
33754583,55278604,33754983,3,0,Tue Nov 17 11:17:00 EST 2015,3688930,"Yes just a few days ago: http://stackoverflow.com/questions/33689947/azure-iot-hub-feedbackreceiver-receiveasync-is-very-slow-15-seconds-high-laten"
33754583,55278730,33754983,3,0,Tue Nov 17 11:20:00 EST 2015,2210944,"Oh great ! Sorry I didn't catch that ! However if you found my replies as useful you could mark them as answers to help other people who have same problem ;-)"
33754583,33755541,33754583,2,0,Tue Nov 17 11:16:00 EST 2015,3688930,"<p>I forgot to mention, that I've already got a solution. But it is not very nice: <br></p>		<ul>	<li>All deviceThreads (one for each partition and device) wait ("WaitOne") at one point (locked with AutoResetEvent)</li>	<li>I receive all messages with a single receiver</li>	<li>I put the message into a own queue for each device (Dictionary that contains as key a object of the device(id and partition) and as value a List</li>	<li>I set a single thread set free with the "set" command.</li>	<li>The thread looks in its queue and:</li>	<li><ul>	<li>if there is a message in the queue it continues and returns the result with a "yield return" -> waits again for a new message</li>	</ul></li>	<li><ul>	<li>else it sets a different thread fee and returns to the freeze state<br></li>	</ul></li>	</ul>		<p>All threads loop in a while(true) to wait for messages.	The solution is working, but it doesn't look very performant (with many threads) and a bit complicated.</p>	"
