thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44461516,44461516,null,1,3,Fri Jun 09 15:24:00 EDT 2017,8137977,"<p>Is it possible to use the UPNP protocol for automatic port forwarding on the router using ESP8266?</p>		<p>I need to be able to access my ESP8266 module even when I am away from home.	Currently I have configured port forwarding manually in my router settings.</p>		<p>But in the future, in order for my project to become a commercial product, it needs to be able to do automatic port forwarding as this would be a barrier for the average user.</p>		<p>On the internet I found something talking about UPNP on ESP8266, but it was not about port forwarding.</p>		<p>Thank you very much in advance!</p>	"
44461516,44474605,44461516,2,2,Sat Jun 10 14:43:00 EDT 2017,1175633,"<p>I don't see why not. UPnP implements multiple profiles, the one you are interested in is named <a href="https://en.wikipedia.org/wiki/Internet_Gateway_Device_Protocol" rel="nofollow noreferrer">IGD (Internet Gateway Device)</a>, which most home routers implement to allow client applications on the local network (e.g Skype, uTorrent, etc.) to map ports on the router's NAT.</p>		<p>UPnP works over <a href="https://en.wikipedia.org/wiki/Multicast" rel="nofollow noreferrer">IP multicast</a> to discover and announce devices implementing UPnP services over the address <code>239.255.255.250</code>. Devices interested in such announcements subscribe to this multicast group and listen on port <code>1900</code>. In fact, UPnP does not itself provide a discovery mechanism, but relies on a protocol called <a href="https://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol" rel="nofollow noreferrer">SSDP (Simple Service Discovery Protocol)</a> to discover hosts on the local network.</p>		<p>All that's needed is an UDP socket bound to the aforementioned address and port to subscribe and publish messages on your home multicast group. You'd need to use an implementation of SSDP to discover your router, once you have discovered your router, you can send commands using UPnP wrapped around <a href="https://en.wikipedia.org/wiki/SOAP" rel="nofollow noreferrer">SOAP</a> enveloppes. </p>		<p>There are many implementations of the UPnP IGD profile in Posix C, which you may reuse and port to the ESP 8266 (e.g <a href="https://github.com/miniupnp/miniupnp" rel="nofollow noreferrer">MiniUPnP</a>, <a href="https://github.com/shadeslayer/gupnp-igd" rel="nofollow noreferrer">gupnp-igd</a>).</p>	"
44461516,46267791,44461516,2,7,Sun Sep 17 19:00:00 EDT 2017,4295037,"<p>You can have a look at my library that I made just for that:	<a href="https://github.com/ofekp/TinyUPnP" rel="noreferrer">https://github.com/ofekp/TinyUPnP</a></p>		<p>I have an example for an IOT device (LED lights) within the package, I cannot attach the link due to low reputation.</p>		<p>You can have a look at the example code. All made for ESP8266.	Very simple to use, just call addPortMapping with the port you want to open, just as showed in the example.	You have to do this every 36000 <code>(LEASE_DURATION)</code> seconds, since UPnP is lease based protocol.</p>		<p>Declare:</p>		<pre><code>unsigned long lastUpdateTime = 0;	TinyUPnP *tinyUPnP = new TinyUPnP(-1);  // -1 means blocking, preferably, use a timeout value (ms)	</code></pre>		<p>Setup:</p>		<pre><code>if (tinyUPnP-&gt;addPortMapping(WiFi.localIP(), LISTEN_PORT, RULE_PROTOCOL_TCP, LEASE_DURATION, FRIENDLY_NAME)) {	    lastUpdateTime = millis();	}	</code></pre>		<p>Loop:</p>		<pre><code>// update UPnP port mapping rule if needed	if ((millis() - lastUpdateTime) &gt; (long) (0.8D * (double) (LEASE_DURATION * 1000.0))) {	    Serial.print("UPnP rule is about to be revoked, renewing lease");	    if (tinyUPnP-&gt;addPortMapping(WiFi.localIP(), LISTEN_PORT, RULE_PROTOCOL_TCP, LEASE_DURATION, FRIENDLY_NAME)) {	        lastUpdateTime = millis();	    }	}	</code></pre>		<p>I only checked it with my D-Link router.</p>		<p>To anyone interested in how the library works:</p>		<ol>	<li>It sends an M_SEARCH message to UPnP UDP multicast address.</li>	<li>The gateway router will respond with a message including an HTTP header called <code>Location</code>.</li>	<li><code>Location</code> is a link to an XML file containing the IGD (Internet Gateway Device) API in order to create the needed calls which will add the new port mapping to your gateway router.</li>	<li>One of the services that is depicted in the XML is <code>&lt;serviceType&gt;urn:schemas-upnp-org:service:WANPPPConnection:1&lt;/serviceType&gt;</code> which is what the library is looking for.</li>	<li>That service will include a <code>eventSubURL</code> tag which is a link to your router's IGD API. (The base URL is also depicted in the same file under the tag <code>URLBase</code>)</li>	<li>Using the base URL and the WANPPPConnection link you can issue an HTTP query to the router that will add the UPnP rule.</li>	<li>As a side note, the service depicted in the XML also includes a <code>SCPDURL</code> tag which is a link to another XML that depicts commands available for the service and their parameters. The package skips this stage as I assumed the query will be similar for many routers, this may very well not be the case, though, so it is up to you to check.</li>	<li>From this stage the package will issue the service command using an HTTP query to the router. The actual query can be seen in the code quite clearly but for anyone interested:</li>	</ol>		<p>Headers:</p>		<pre><code>"POST " + &lt;link to service command from XML&gt; + " HTTP/1.1"	"Content-Type: text/xml; charset=\"utf-8\""	"SOAPAction: \"urn:schemas-upnp-org:service:WANPPPConnection:1#AddPortMapping\""	"Content-Length: " + body.length()	</code></pre>		<p>Body:</p>		<pre><code>"&lt;?xml version=\"1.0\"?&gt;\r\n"	"&lt;s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"&gt;\r\n"	"&lt;s:Body&gt;\r\n"	"&lt;u:AddPortMapping xmlns:u=\"urn:schemas-upnp-org:service:WANPPPConnection:1\"&gt;\r\n"	"  &lt;NewRemoteHost&gt;&lt;/NewRemoteHost&gt;\r\n"	"  &lt;NewExternalPort&gt;" + String(rulePort) + "&lt;/NewExternalPort&gt;\r\n"	"  &lt;NewProtocol&gt;" + ruleProtocol + "&lt;/NewProtocol&gt;\r\n"	"  &lt;NewInternalPort&gt;" + String(rulePort) + "&lt;/NewInternalPort&gt;\r\n"	"  &lt;NewInternalClient&gt;" + ipAddressToString(ruleIP) + "&lt;/NewInternalClient&gt;\r\n"	"  &lt;NewEnabled&gt;1&lt;/NewEnabled&gt;\r\n"	"  &lt;NewPortMappingDescription&gt;" + ruleFriendlyName + "&lt;/NewPortMappingDescription&gt;\r\n"	"  &lt;NewLeaseDuration&gt;" + String(ruleLeaseDuration) + "&lt;/NewLeaseDuration&gt;\r\n"	"&lt;/u:AddPortMapping&gt;\r\n"	"&lt;/s:Body&gt;\r\n"	"&lt;/s:Envelope&gt;\r\n";	</code></pre>		<p>I hope this helps.</p>	"
44461516,86495625,46267791,3,0,Mon Apr 09 19:49:00 EDT 2018,4295037,"@Peza Thank you for the warm words, I am attending to issues at the repo and recently improved it with the help of few very helpful users. I am glad you are considering the use of this library but I cannot make any promises as to its reliability simply because proper use, hardware and other processes running along side it may have an effect on it."
44461516,86392614,46267791,3,1,Fri Apr 06 10:17:00 EDT 2018,7189752,"Hi @ofekp, thanks so much for this library, like Julio I also need this functionality for a commercial product. Can you comment on the  longterm reliability? I need serious QA for my application."
