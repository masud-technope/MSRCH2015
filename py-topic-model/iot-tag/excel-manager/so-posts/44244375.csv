thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44244375,44244375,null,1,4,Mon May 29 14:01:00 EDT 2017,1253911,"<p>I am trying to use 'Authenticate using Cognito-Identity with Cognito user pool' in my Android application. My Cognito user pool authentication works well, when I run that separately and I had seen a JWTToken as well. When I run the the 'PubSub' sample application with Unauthenticated role, it worked as expected.  When I integrate these two features in one application, the application threw following error.</p>		<pre><code>W/System.err: MqttException (0) - java.io.IOException: Already connected	W/System.err:     at org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java:38)	W/System.err:     at org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG.run(ClientComms.java:664)	W/System.err:     at java.lang.Thread.run(Thread.java:761)	W/System.err: Caused by: java.io.IOException: Already connected	W/System.err:     at java.io.PipedOutputStream.connect(PipedOutputStream.java:100)	W/System.err:     at java.io.PipedInputStream.connect(PipedInputStream.java:195)	W/System.err:     at org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver.&lt;init&gt;(WebSocketReceiver.java:42)	W/System.err:     at org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketSecureNetworkModule.start(WebSocketSecureNetworkModule.java:78)	W/System.err:     at org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG.run(ClientComms.java:650)	W/System.err:   ... 1 more	</code></pre>		<p>I have been trying to resolve this issue since last Thursday and still stuck at the same place. Really No idea where should i check.!</p>		<p>I am adding my Authentication(Cognito user pool authentication) activity and Connect activity.</p>		<pre><code>AmazonCognitoIdentityProviderClient identityProviderClient = new 	AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), new ClientConfiguration());	identityProviderClient.setRegion(Region.getRegion(Regions.US_WEST_2));	CognitoUserPool userPool = new CognitoUserPool(getApplicationContext(), "us-west-2_ghtcc6ho9", "4t0mk45hNso69dp2j4jvel5ghm", "1jmq0lhhq721oif9k6nug31c29i760vihua8hvrgu5umfr2a1vd7", identityProviderClient);	cogUser = userPool.getUser();	authenticationHandler = new AuthenticationHandler() {				        @Override	        public void onSuccess(CognitoUserSession userSession, CognitoDevice newDevice) {	            String ids = userSession.getIdToken().getJWTToken();	            Log.d("MyToken","session id___"+userSession.getIdToken().getExpiration()+"___"+userSession.getIdToken().getIssuedAt());	            Intent pubSub = new Intent(MainActivity.this, PubSubActivity.class);	            pubSub.putExtra("token",""+ids);	            startActivity(pubSub);	            //MainActivity.this.finish();		        }		        @Override	        public void getAuthenticationDetails(AuthenticationContinuation authenticationContinuation, String userId) {	            Log.d("MyToken","getAuthenticationDetails");	            AuthenticationDetails authenticationDetails = new AuthenticationDetails("shone", "172737", null);	            authenticationContinuation.setAuthenticationDetails(authenticationDetails);	            // Allow the sign-in to continue	            authenticationContinuation.continueTask();	        }		        @Override	        public void getMFACode(MultiFactorAuthenticationContinuation multiFactorAuthenticationContinuation) {	            Log.d("MyToken","getMFACode");	            multiFactorAuthenticationContinuation.continueTask();	        }		        @Override	        public void authenticationChallenge(ChallengeContinuation continuation) {	            Log.d("MyToken","authenticationChallenge"+continuation.getChallengeName());	            newPasswordContinuation.continueTask();	        }		        @Override	        public void onFailure(Exception exception) {	            exception.printStackTrace();	            Log.d("MyToken","onFailure");	        }	    };	     cogUser.getSessionInBackground(authenticationHandler); 	</code></pre>		<p>When It reaches 'OnSuccess' I am launching my connect activity and passing my session token along with the Intent. Moving to the next activity</p>		<pre><code>private static final String COGNITO_POOL_ID = "us-west-2:a153a090-508c-44c0-a9dd-efd450298c4b";	private static final Regions MY_REGION = Regions.US_WEST_2;	AWSIotMqttManager mqttManager;	String clientId;	AWSCredentials awsCredentials;	CognitoCachingCredentialsProvider credentialsProvider;	 @Override	protected void onCreate(Bundle savedInstanceState) {	    super.onCreate(savedInstanceState);	    setContentView(R.layout.activity_main);	    Intent intent = getIntent();	if(null == intent){	    Toast.makeText(getApplicationContext(), "Token is null", Toast.LENGTH_SHORT).show();	}else {	    token = intent.getStringExtra("token");	}	 clientId = UUID.randomUUID().toString();	    credentialsProvider = new CognitoCachingCredentialsProvider(	            getApplicationContext(), 	            COGNITO_POOL_ID, 	            MY_REGION 	    );	mqttManager = new AWSIotMqttManager(clientId, CUSTOMER_SPECIFIC_ENDPOINT);	 Map loginsMap = new HashMap();	    loginsMap.put("cognito-idp.us-west-2.amazonaws.com/us-west-2_ghtcc6ho9", token);	    credentialsProvider.setLogins(loginsMap);	    Log.d("SESSION_ID", ""+token);	    new Thread(new Runnable() {	        @Override	        public void run() {	            credentialsProvider.refresh();	            awsCredentials = credentialsProvider.getCredentials();	            Log.d("SESSION_ID B: ", ""+awsCredentials.getAWSAccessKeyId());	            Log.d("SESSION_ID C: ", ""+awsCredentials.getAWSSecretKey());	        }	    }).start();	}		 View.OnClickListener connectClick = new View.OnClickListener() {	    @Override	    public void onClick(View v) {		        Log.d(LOG_TAG, "clientId = " + clientId);		        try {	            mqttManager.connect(credentialsProvider, new AWSIotMqttClientStatusCallback() {	                @Override	                public void onStatusChanged(final AWSIotMqttClientStatus status,	                        final Throwable throwable) {	                    Log.d(LOG_TAG, "Status = " + String.valueOf(status)+"______"+((null !=throwable)?throwable.getMessage():""));		                    runOnUiThread(new Runnable() {	                        @Override	                        public void run() {	                            if (status == AWSIotMqttClientStatus.Connecting) {	                                tvStatus.setText("Connecting...");		                            } else if (status == AWSIotMqttClientStatus.Connected) {	                                tvStatus.setText("Connected");		                            } else if (status == AWSIotMqttClientStatus.Reconnecting) {	                                if (throwable != null) {	                                    Log.e(LOG_TAG, "Connection error.", throwable);	                                }	                                tvStatus.setText("Reconnecting");	                            } else if (status == AWSIotMqttClientStatus.ConnectionLost) {	                                if (throwable != null) {	                                    Log.e(LOG_TAG, "Connection error.", throwable);	                                    throwable.printStackTrace();	                                }	                                tvStatus.setText("Disconnected");	                            } else {	                                tvStatus.setText("Disconnected");		                            }	                        }	                    });	                }	            });	        } catch (final Exception e) {	            Log.e(LOG_TAG, "Connection error.", e);	        }	    }	};	</code></pre>		<p>What is wrong in my code? Why it throws exception when the MQTT connect is being invoked? Any help would be appreciated. </p>	"
44244375,78787613,44244375,3,0,Mon Aug 28 08:17:00 EDT 2017,1253911,"Right after authentication, a policy should be attached to the identity. This information is missing in the document. I solved this by using 'attachPolicy()' method."
44244375,44249720,44244375,2,0,Mon May 29 20:07:00 EDT 2017,4750017,"<p>When a client connected to broker it has a unique client ID. If clients tried to connect with same client id then this error occur. Use different client IDs like foo1, foo2, foo3, etc.</p>	"
44244375,75517570,44249720,3,0,Tue May 30 06:15:00 EDT 2017,1253911,"I am not clear. Could you please explain it a little more?"
44244375,75549611,44249720,3,0,Tue May 30 19:52:00 EDT 2017,4750017,"I have updated my answer."
44244375,75565099,44249720,3,0,Wed May 31 08:06:00 EDT 2017,1253911,"Brother, you are taking about the second connection or the scenario after the first successful connection. I am trying to establish first the connection."
44244375,48856472,44244375,2,2,Sun Feb 18 20:54:00 EST 2018,8572965,"<p>I beat my head up with this almost a week.</p>		<p>Full course of action ->	After succesfull login you will have a jwt token</p>		<pre><code>String idToken = cognitoUserSession.getIdToken().getJWTToken();	</code></pre>		<p>put it into a map</p>		<pre><code>Map&lt;String, String&gt; logins = new HashMap&lt;String, String&gt;(); 	//fill it with Cognito User token	logins.put("cognito-idp.&lt;REGION&gt;.amazonaws.com/&lt;COGNITO_USER_POOL_ID&gt;", idToken);	</code></pre>		<p>then use it to set in two places (not stated in any documentation!)</p>		<pre><code>CognitoCachingCredentialsProvider credentialsProvider = new 	CognitoCachingCredentialsProvider(context, IDENTITY_POOL_ID, REGION);	credentialsProvider.setLogins(logins);	</code></pre>		<p>and</p>		<pre><code>AmazonCognitoIdentity cognitoIdentity = new AmazonCognitoIdentityClient(credentialsProvider);	GetIdRequest getIdReq = new GetIdRequest();	getIdReq.setLogins(logins); //or if you have already set provider logins just use credentialsProvider.getLogins()	getIdReq.setIdentityPoolId(COGNITO_POOL_ID);	GetIdResult getIdRes = cognitoIdentity.getId(getIdReq);	</code></pre>		<p>after that you still nedd to make some call</p>		<pre><code>AttachPrincipalPolicyRequest attachPolicyReq = new AttachPrincipalPolicyRequest(); //in docs it called AttachPolicyRequest but it`s wrong	attachPolicyReq.setPolicyName("allAllowed"); //name of your IOTAWS policy	attachPolicyReq.setPrincipal(getIdRes.getIdentityId());	new AWSIotClient(credentialsProvider).attachPrincipalPolicy(attachPolicyReq);	</code></pre>		<p>and only after that you can enable connect button and continue like that</p>		<pre><code>mqttManager.connect(credentialsProvider, new AWSIotMqttClientStatusCallback() {	</code></pre>		<p>Really for this small piece of code i spent a lot of time...</p>	"
44244375,84761499,48856472,3,0,Tue Feb 20 06:00:00 EST 2018,1253911,"I spent a lot of time on this. i could not find anything from their document. After that I bought a paid developer support membership and asked them to tell me the solution. They took a week to find the solution and the solution was 'attaching policy to the identity'. Then I asked them to show where it is mentioned on the document. I did not receive any response after that. :D"
44244375,54898307,44244375,2,0,Wed Feb 27 04:59:00 EST 2019,2396539,"<p>I was also getting same error -</p>		<pre><code>Feb 27, 2019 10:23:09 AM com.amazonaws.services.iot.client.mqtt.AwsIotMqttConnectionListener onFailure	WARNING: Connect request failure	MqttException (0) - java.io.IOException: Already connected	    at org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java:38)	    at org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG.run(ClientComms.java:664)	    at java.lang.Thread.run(Thread.java:748)	Caused by: java.io.IOException: Already connected	    at java.io.PipedOutputStream.connect(PipedOutputStream.java:100)	</code></pre>		<p>but the problem was different. </p>		<p>First of all, you do not need to call <code>attachPrincipalPolicy</code> from code. You can use the command line as well. You can do something like -</p>		<p><code>aws iot attach-principal-policy --principal us-east-1:1c973d17-98e6-4df6-86bf-d5cedc1fbc0d --policy-name "thingpolicy" --region us-east-1 --profile osfg</code></p>		<p>You will get the principal ID from identity browser of your identity pool. Now lets come to the error -</p>		<p>To successfully connect to mqtt with authenticated Cognito credentials, you need 2 correct policies -</p>		<ol>	<li>Authenticated role corresponding to your identity pool should allow all mqtt operations.</li>	<li>AWS IoT policy should allow the same operations and you need to associate your cognito identity with this policy. We use <code>attachPrincipalPolicy</code> to do so.</li>	</ol>		<p>If anyone step is missed we get above error. I agree the error is misleading - <code>Already connected</code> makes no sense to me for this. I would normally think it has to do with clientId, which should be unique. But anyways hopefully AWS folks would make this better at some point.</p>		<p>For my particular case issue was point 1. Though my IoT policy had all the required permissions, the auth role corresponding to the identity pool did not. So make sure you do that.</p>		<p>I have created a youtube video to show this as well: <a href="https://www.youtube.com/watch?v=j2KJVHGHaFc" rel="nofollow noreferrer">https://www.youtube.com/watch?v=j2KJVHGHaFc</a></p>	"
