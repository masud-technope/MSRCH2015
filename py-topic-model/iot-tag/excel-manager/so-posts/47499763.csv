thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
47499763,47499763,null,1,0,Sun Nov 26 18:50:00 EST 2017,9011450,"<p>I'm trying to control my raspberry using Amazon Alexa, IoT and Lambda.	What I got working so far:</p>		<ul>	<li>Setting up raspberry as IoT device and being able to publish and subscribe to a topic (Testes using the IoT Client)</li>	<li>Setting up a test lambda node.js script</li>	<li>Setting up a test Alexa Skill that triggers an intent in my lambda script</li>	</ul>		<p>Here's the intent handling in my node.js script:</p>		<pre><code>switch(event.request.intent.name) {	      case "testone":	        var config = {};	        config.IOT_BROKER_ENDPOINT      = "restAPILinkFromIoT".toLowerCase();	        config.IOT_BROKER_REGION        = "us-east-1";		        //Loading AWS SDK libraries	        var AWS = require('aws-sdk');	        AWS.config.region = config.IOT_BROKER_REGION;	        var iotData = new AWS.IotData({endpoint: config.IOT_BROKER_ENDPOINT});	        var topic = "/test";	        var output = "test output without publish"	        var params = {	            topic: topic,	            payload: "foo bar baz",	            qos:0	        };	        iotData.publish(params, (err, data) =&gt; {	            if (!err){	               output = "publish without error"	                this.emit(':tell', tell);	            } else {	                output = err	            }	        });	        context.succeed(	              generateResponse(	                buildSpeechletResponse(output, true),	                {}	              )	            )	        break;	        ...	</code></pre>		<p>Basically the script should either return "publish without error" or the error message. The Problem it always returns "test output without publish". It seems like the publish function (or at least the callback function) is never triggered. I also don't see a message in the topic.</p>		<p>Am I doing something wrong? </p>		<p>Thanks in advance!</p>	"
47499763,47502605,47499763,2,1,Mon Nov 27 00:50:00 EST 2017,13070,"<p>This part:</p>		<pre><code>   iotData.publish(params, (err, data) =&gt; {	        if (!err){	           output = "publish without error"	            this.emit(':tell', tell);	        } else {	            output = err	        }	    });	</code></pre>		<p>Is an asynchronous method call. The <code>iotData.publish()</code> method will return immediately. Then the anonymous callback function with the <code>if(!err) ...</code> code block will be executed  at some future time once the asynchronous call completes.</p>		<p>That means that this part:</p>		<pre><code>   context.succeed(	          generateResponse(	            buildSpeechletResponse(output, true),	            {}	          )	        )	</code></pre>		<p>Is being called before the IoT <code>publish()</code> call has completed, and before the <code>output</code> variable has anything assigned to it.</p>		<p>To fix this you could move your code into the callback itself:</p>		<pre><code>   iotData.publish(params, (err, data) =&gt; {	        if (!err){	           context.succeed(generateResponse(	            buildSpeechletResponse("publish without error", true),	            {});	          )	        } else {	           context.succeed(generateResponse(	            buildSpeechletResponse(err, true),	            {});            	        }	    });	</code></pre>		<hr>		<p>As a side note, I really don't recommend trying to learn NodeJS and AWS Lambda and IoT at the same time. I recommend going with Python if you need to learn a language at the same time you are learning Lambda and other AWS stuff because you don't have to deal with these asynchronous callback issues in Python.</p>	"
47499763,82098360,47502605,3,0,Thu Nov 30 09:59:00 EST 2017,9011450,"Thanks! This solved the problem"
