thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
55453260,55453260,null,1,1,Mon Apr 01 10:44:00 EDT 2019,2824342,"<p>This issue looks very much like a bug but I believe there must be something wrong in my terraform file because I can't find anybody on the web having the same problem.</p>		<p>Here is the part of my terraform file that creates a lambda and a topic rule for it:</p>		<pre><code>resource "aws_lambda_function" "rds_persist" {	  filename         = "${local.rds_persist_file_path}"	  function_name    = "RdsPersist-${var.env}"	  role             = "${aws_iam_role.lambda_role.arn}"	  handler          = "package.handler"	  source_code_hash = "${local.rds_persist_package_hash}"	  runtime          = "nodejs8.10"	  memory_size      = 128	  timeout          = 10		  vpc_config = {	    subnet_ids         = ["${var.private_subnet_ids}"]	    security_group_ids = ["${aws_security_group.all_vpc_access.id}"]	  }		  environment {	    variables = {	      DB             = "${var.database_url}"	      IOT_DEVICE_ARN = "${var.iot_device_v1_sns_arn}"	    }	  }	}		resource "aws_iot_topic_rule" "rds_push" {	  name        = "${var.env}_RdsPush"	  description = "Pushes events to a persistence lambda (rds store)"	  enabled     = true	  sql         = "SELECT * as payload, topic() as topic, timestamp() AS timestamp FROM '#' WHERE startswith(clientid(), '${var.env}-')"	  sql_version = "2016-03-23"		  lambda {	    function_arn = "${aws_lambda_function.rds_persist.arn}"	  }	}	</code></pre>		<p>Here is the result in AWS Console:</p>		<p><a href="https://i.stack.imgur.com/QNbCX.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/QNbCX.png" alt="enter image description here"></a></p>		<p><a href="https://i.stack.imgur.com/TTzc0.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/TTzc0.png" alt="enter image description here"></a></p>		<p>If I delete and re-add the rule in the console, then the trigger appears on the lambda.</p>		<blockquote>	  <p>It might be the case your lambda function that your topic uses is being created before the function.</p>	</blockquote>		<p>I tested this also by tainting the topic rule alone so it got recreated (see the logs below). Unfortunately it didn't solve the issue.</p>		<pre class="lang-none prettyprint-override"><code>An execution plan has been generated and is shown below.	Resource actions are indicated with the following symbols:	-/+ destroy and then create replacement		Terraform will perform the following actions:		-/+ module.lambda.aws_iot_topic_rule.rds_push (tainted) (new resource required)	      id:                             "dev_RdsPush" =&gt; &lt;computed&gt; (forces new resource)	      arn:                            "arn:aws:iot:eu-west-1:827689093226:rule/dev_RdsPush" =&gt; &lt;computed&gt;	      description:                    "Pushes events to a persistence lambda (rds store)" =&gt; "Pushes events to a persistence lambda (rds store)"	      enabled:                        "true" =&gt; "true"	      lambda.#:                       "1" =&gt; "1"	      lambda.1860721139.function_arn: "arn:aws:lambda:eu-west-1:827689093226:function:RdsPersist-dev" =&gt; "arn:aws:lambda:eu-west-1:827689093226:function:RdsPersist-dev"	      name:                           "dev_RdsPush" =&gt; "dev_RdsPush"	      sql:                            "SELECT * as payload, topic() as topic, timestamp() AS timestamp FROM '#' WHERE startswith(clientid(), 'dev-')" =&gt; "SELECT * as payload, topic() as topic, timestamp() AS timestamp FROM '#' WHERE startswith(clientid(), 'dev-')"	      sql_version:                    "2016-03-23" =&gt; "2016-03-23"			Plan: 1 to add, 0 to change, 1 to destroy.	</code></pre>		<p><strong>Update: I just found a very similar issue at a different place:</strong></p>		<p>There's supposed to be an SNS subscription between this another lambda and a SNS. Here is the relevant code in the terraform:</p>		<pre><code>resource "aws_sns_topic_subscription" "conference_call" {	  topic_arn = "${module.sns.conference_call_arn}"	  protocol  = "lambda"	  endpoint  = "${module.lambda.messaging_arn}"	}	</code></pre>		<p>(Obviously I checked the resources and they are correct)</p>		<p>In the console I don't see the trigger in the lambda but I do see the subscription in SNS:</p>		<p><a href="https://i.stack.imgur.com/hD2xi.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/hD2xi.png" alt="enter image description here"></a></p>		<p><a href="https://i.stack.imgur.com/BEwoZ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/BEwoZ.png" alt="enter image description here"></a></p>		<p><strong>Update: exact same issue when creating the resources using AWS CLI</strong></p>		<pre class="lang-none prettyprint-override"><code># For the first issue	$ aws iot create-topic-rule --rule-name dev_RdsPush --topic-rule-payload '{"sql":"SELECT * as payload, topic() as topic, timestamp() AS timestamp FROM \'#\' WHERE startswith(clientid(), \'dev-\')","actions":[{"lambda":{"functionArn":"arn:aws:lambda:eu-west-1:xxxxxxxxx:function:RdsPersist-dev"}}]}'		# For the second issue	$ aws sns subscribe --topic-arn arn:aws:sns:eu-west-1:xxxxxxxx:conference-call-v1-dev --protocol lambda --notification-endpoint arn:aws:lambda:eu-west-1:xxxxxxxxx:function:Messaging-dev	</code></pre>		<hr>		<p><strong>Solution:</strong></p>		<p>Add these:</p>		<p>IoT:</p>		<pre><code>resource "aws_lambda_permission" "conference_call_sns" {	  statement_id  = "AllowExecutionFromSNS"	  action        = "lambda:InvokeFunction"	  function_name = "${aws_lambda_function.conference_call.function_name}"	  principal     = "sns.amazonaws.com"	  source_arn    = "${var.conference_call_sns_arn}"	}	</code></pre>		<p>SNS:</p>		<pre><code>resource "aws_lambda_permission" "messaging_sns" {	  statement_id  = "AllowExecutionFromSNS"	  action        = "lambda:InvokeFunction"	  function_name = "${aws_lambda_function.messaging.function_name}"	  principal     = "sns.amazonaws.com"	  source_arn    = "${var.conference_call_sns_arn}"	}	</code></pre>	"
55453260,55454735,55453260,2,1,Mon Apr 01 12:05:00 EDT 2019,2904202,"<p>It might be the case your lambda function that your topic uses is being created before the function. Try adding <code>depends_on = ["aws_lambda_function.rds_persist"]</code> on your <code>aws_iot_topic_rule</code> and see how it goes.</p>	"
55453260,97625875,55454735,3,0,Mon Apr 01 13:32:00 EDT 2019,2824342,"I don't know if that counts but I had the same idea and to test this I tainted only the topic rule and it got recreated alone. But the lambda is still not linked properly."
55453260,55460796,55453260,2,1,Mon Apr 01 17:43:00 EDT 2019,3083468,"<p>You need to add a lambda permission to allow IoT to invoke lambda. The Lambda console uses the permissions of the function to show what can invoke it.</p>		<p><a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-rule-actions.html#lambda-rule" rel="nofollow noreferrer">https://docs.aws.amazon.com/iot/latest/developerguide/iot-rule-actions.html#lambda-rule</a>.</p>	"
55453260,97635599,55460796,3,0,Mon Apr 01 18:35:00 EDT 2019,2824342,"It works! Thanks a lot :)"
