thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42605717,42605717,null,1,5,Sun Mar 05 07:29:00 EST 2017,1600747,"<p>I have a NodeMCU ESP8266 board running MicroPython. I'm running a web server on my ESP8266. This is my first IoT project based on one of these boards.</p>		<p>The below is a snippet of the code. </p>		<p>This is being executed within <code>main.py</code>. Every now and then, something causes the code to crash (perhaps timing and request based). When <code>main.py</code> exits, for whatever reason, I'm dropped back at the python CLI.</p>		<p>I'd like for the board to reset when this happens (if there isn't a better way).</p>		<p>What is the best method of restarting/reseting the ESP8266?</p>		<pre><code>addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]		s = socket.socket()	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)	s.bind(addr)	s.listen(5)	print('listening on', addr)		while True:	    cl, addr = s.accept()	    print('client connected from', addr)	    cl_file = cl.makefile('rwb', 0)	    print("Request:")	    while True:	        line = cl_file.readline()	        print("Line:" , line)	        if not line or line == b'\r\n':	            print("breaking")	            break	        if line == b'GET /active HTTP/1.1\r\n':	</code></pre>	"
42605717,72341381,42605717,3,0,Sun Mar 05 07:42:00 EST 2017,1600747,"This is the error that is reported when the webserver exits.	     OSError: [Errno 104] ECONNRESET"
42605717,72463428,42605717,3,0,Wed Mar 08 10:57:00 EST 2017,24447,"Although the [docs](https://docs.micropython.org/en/latest/esp8266/library/machine.WDT.html) say the `machine.WDT` watchdog timer is not available for the esp8266, [this forum post](http://forum.micropython.org/viewtopic.php?f=16&t=2404&p=13940) implies it is now implemented in basic form. That would probably be the first thing to try. (The zeroth thing to try would be to figure out how to stop your code crashing, of course). [This thread](http://forum.micropython.org/viewtopic.php?f=16&t=2788&p=16576) also has some discussion about creating a watchdog on the ESP."
42605717,43187789,42605717,2,0,Mon Apr 03 14:50:00 EDT 2017,7731027,"<p>You could execute your code (which should be outside of the main.py -> other file) from the boot or the main.py. if it drops out it should execute the following code, which could trigger a reset.</p>		<p>You may have to catch the error first.</p>		<p>I hope I helped</p>	"
42605717,73520614,43187789,3,0,Wed Apr 05 08:03:00 EDT 2017,1600747,"This is the approach that I took. I moved my main code to boot.py and then within main.py I include a call to reset the ESP8266.		If anything caused the web service loop to terminate, boot.py would exit and main.py would execute, reseting the device.		I found better reliability though in shifting to lua and mqtt on the ESP8266 and moving the web service component to an actual apache webserver running on another host."
42605717,73448822,43187789,3,0,Mon Apr 03 14:53:00 EDT 2017,1215753,"Perhaps a code snippet would help clarify your response"
42605717,44832988,42605717,2,6,Thu Jun 29 18:58:00 EDT 2017,496009,"<p>MicroPython has <a href="http://docs.micropython.org/en/latest/esp8266/library/machine.html#machine.reset" rel="noreferrer">machine.reset()</a> function to reset a board.</p>		<p>Python (not just MicroPython) uses <a href="https://docs.python.org/3/tutorial/errors.html" rel="noreferrer">exception handling</a> to handle errors. </p>		<p>Combining the two, you can easily achieve what you want. For example:</p>		<pre><code>a = 4	b = 2	try:	    a / b	except:	    machine.reset()	</code></pre>		<p>If in the code above you replace value of <code>b</code> with 0, your board will reset. If you think about it for a bit, you probably will find out that it doesn't make much sense - you don't want your board suddenly reset if you just divide by 0 by mistake or otherwise. There're got to be better ways to handle errors! Likewise, you may want to think about your own case and see if resetting the board is really the best choice. If you think that yes, that's fine, just always keep in mind that <em>you</em> programmed your board to suddenly reset. Otherwise, your next question here may be "My board suddenly resets! Why???" ;-)</p>	"
42605717,78065079,44832988,3,0,Mon Aug 07 17:35:00 EDT 2017,1373804,"This is a nice response, an efficient way to accomplish what was requested AND some thoughts on better practices or paths to solving the underlying problem."
42605717,46595452,42605717,2,1,Thu Oct 05 22:02:00 EDT 2017,3383150,"<p>you could add a while loop checking for the Flash Button (GPIO pin 0) like this:</p>		<pre><code>import machine	pin = machine.Pin(0, machine.Pin.IN, machine.Pin.PULL_UP)                                                                 	while pin.value():	    print('Put your code here...')	    print('..this will looping until the Flash button is pressed...')		print('...and then it continues here.')	</code></pre>	"
42605717,48226569,42605717,2,4,Fri Jan 12 12:44:00 EST 2018,2836115,"<p>It may be late for the original question, but the answer I am going to share might help other people. Consider it is not a final solution, but in many scenarios, it may save a day. You can explore your case.</p>		<p>The solution is using the internal scheduling function of MicroPython. since its execution is guaranteed, then its behavior can be used as a tool to mimic a functional watchdog. </p>		<p>Following code will run with given timers and threshold which can be customized in your case, and if the timer reaches its threshold, and the value of wd_buffer is not updated for that time, then the function might be called, and we repeat the process again. 	So in order to prevent the ESP getting restarted in this case after 12 sec, you have to in someplace in your code, periodically (shorter than 12 sec or adjust the timer and threshold according to your need) update the value of the Global wd_buffer variable. Hope it helps.</p>		<pre><code># Simple WD - Global Variable	wd_feeder = 0 	wd_buffer = 0	wd_counter = 0	wd_threshold = 4		def wd_checker(calledvalue):	    print('watchdog is checking... feeder= {} buffer= {}'.format(wd_feeder, wd_buffer))	    global wd_counter	    global wd_buffer	    global wd_feeder	    if wd_feeder == wd_buffer:	        print('state is suspicious ... counter is {} incrementing the counter'.format(wd_counter))	        wd_counter += 1	    else:	        wd_counter = 0	        wd_feeder = wd_buffer	    if wd_counter == wd_threshold:	        print('Counter is reached its threshold, following function will be called')	        wd_feeder = wd_buffer = wd_counter = 0	        machine.reset()			if __name__ == '__main__':	    scheduler_wd = machine.Timer(-1)	    scheduler_wd.init(period=3000, mode=machine.Timer.PERIODIC, callback=wd_checker)	</code></pre>	"
