thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
38532396,38532396,null,1,0,Fri Jul 22 17:39:00 EDT 2016,545078,"<p>I am trying to publish to an IoT topic from a Lambda function, which is triggered from an Alexa skill. In the Lambda function, I'm doing this IoT publish:</p>		<pre><code>var params = {	  topic: 'testTopic',	  payload: new Buffer('test message'),	  qos: 1	};		iotData.publish(params, function(err, data) {	  if (err) console.log('ERR: ', err); // an error occurred	  else if (data) console.log('DATA: ', data);  // successful response	});	</code></pre>		<p>If I run this code (and this code only) in a Lambda function, it works fine. But if I put the params and the publish function in the onIntent function of the Alexa Skill template, and put that in a new Lambda function, it doesn't work. (Both Lambda functions have the same configuration and policies.) </p>		<p>If I comment out intentHandler.call(), then iotData.publish() does run, so it appears the the intentHandler call is cancelling it for some reason I don't understand.</p>		<pre><code>onIntent: function (intentRequest, session, response) {	  var intent = intentRequest.intent,	      intentName = intentRequest.intent.name,	      intentHandler = this.intentHandlers[intentName];		  if (intentHandler) {	    console.log('dispatch intent = ' + intentName);		    var params = {	      topic: 'testTopic',	      payload: new Buffer('test message'),	      qos: 1	    };		    iotData.publish(params, function(err, data) {	      if (err) console.log('ERR: ', err); // an error occurred	      else if (data) console.log('DATA: ', data);  // successful response	    });		    intentHandler.call(this, intent, session, response);	  } else {	    throw 'Unsupported intent = ' + intentName;	  }	}	</code></pre>	"
38532396,38595695,38532396,2,0,Tue Jul 26 16:50:00 EDT 2016,545078,"<p>This appears to be related to the Lambda function context. <code>intentHandler.call()</code> calls the intent in question, which in turn calls <code>context.succeed()</code>. I'm assuming this means the Lambda function finishes running before the <code>iotData.publish()</code> call can be executed, because when I put the <code>intentHandler.call()</code> in the callback for <code>iotData.publish()</code> like this, everything works fine:</p>		<pre><code>onIntent: function (intentRequest, session, response) {	  var intent = intentRequest.intent,	      intentName = intentRequest.intent.name,	      intentHandler = this.intentHandlers[intentName];		  if (intentHandler) {	    console.log('dispatch intent = ' + intentName);		    var params = {	      topic: 'signals',	      payload: new Buffer(intentName),	      qos: 1	    };		    iotData.publish(params, function(err, data) {	      if (err) console.log(err, err.stack); // an error occurred	      else {	        console.log(data);           // successful response	        intentHandler.call(this, intent, session, response);	      }     	    });	  } else {	    throw 'Unsupported intent = ' + intentName;	  }	}	</code></pre>	"
