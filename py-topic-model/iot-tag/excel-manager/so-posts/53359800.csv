thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
53359800,53359800,null,1,0,Sun Nov 18 10:20:00 EST 2018,10341985,"<p>I have developed an embedded system which sends data to a server as TCP requests. I can't use more-frequent HTTP requests, because of its data overhead. Less package length will result in less energy consumption and less communication expenses. </p>		<p>The server has to listen to a special port, get the data from device and store in a table. </p>		<p>As I explored, Java servlets + Apache Tomcat is a popular solution but in this case should not be used, because a Java servlet is more suitable for HTTP-based connections.</p>		<p>Is there a better solution for this type of communication?</p>	"
53359800,53360268,53359800,2,1,Sun Nov 18 11:20:00 EST 2018,6126446,"<p>Please take a look at <a href="https://docs.oracle.com/javase/tutorial/networking/sockets/index.html" rel="nofollow noreferrer">Sockets</a>. They are on the Application layer TCP/IP model and they provide reliable, bidirectional communication, with no data overhead. However, you will need to design a tiny protocol for the communication to much your needs. </p>		<p>Most probably this will suffice your needs, but if you decide to go with the HTTP solution, keep in mind <a href="https://en.wikipedia.org/wiki/WebSocket" rel="nofollow noreferrer">Websockets</a> which is an interesting solution, will diminish the overhead of the HTTP protocol (but they won't eliminate it, the overhead will remain at around 2-10 bytes.). Unfortunately, Java SE doesn't built in provide support for Websockets so you will need to use an external library. </p>		<p>PS: Both options support encryption over TLS but I didn't mention it, cause it adds a noticeable overhead (at least during the initialization of the connection)</p>	"
53359800,93614225,53360268,3,0,Mon Nov 19 05:46:00 EST 2018,10341985,"How should I deploy a socket-based application in Tomcat?"
53359800,93693971,53360268,3,1,Wed Nov 21 10:04:00 EST 2018,10341985,"Up to now we have embedded netty libs into out application and deployed it on the tomcat."
53359800,93677733,53360268,3,1,Tue Nov 20 20:47:00 EST 2018,6126446,"@ImanH Tomcat is a Servlet container and Servlets in theory were created to support a variety of protocols. However,  no Servlet implementation exists that supports anything but HTTP(S). So you can implement a socket-based app but until the Websockets handshake completes you'll have the HTTP overhead. For that you'll need to dive inside Java EE. I'dont know neither how experienced you are with Java, neither the task you are assigned. But if you don't have previous experience and your task is simple you really don't want to mess with the Java EE ecosystem."
53359800,93678096,53360268,3,1,Tue Nov 20 21:00:00 EST 2018,6126446,"@ImanH In my opinion the ideal solution for your situation would be to use Java SE Sockets and over that use JSON to represent your data. Java SE doesn't provide JSON parser (until Java 8 there wasn't for sure, and there is a feature request for future versions) so you can use GSON (provided in Guava I think) but you can import it as an independent module. https://github.com/google/gson"
