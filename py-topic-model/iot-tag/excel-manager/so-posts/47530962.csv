thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
47530962,47530962,null,1,1,Tue Nov 28 11:54:00 EST 2017,130910,"<p>I have a Mosquitto broker which receives positioning information from remote devices.</p>		<p>I need to store this data somewhere to be processed by other micro-services.</p>		<p>At present, there is a Node.js process which subscribes to the broker, and writes to the Postgres database in batches.</p>		<pre><code>Devices -&gt; Mosquitto -&gt; DB writer -&gt; (source-of-truth) Postgres		(source-of-truth) -&gt; Service A	                  -&gt; Service B	</code></pre>		<p>But the problem I see is that now any other service which needs to process this position data, needs to query the Postgres database.</p>		<p>Constraint: This is for on-premise deployments so ideally we want to maintain as little as possible. One VM with a database, and perhaps a link to a customer-maintained database.</p>		<p>An alternative to the database as the source of truth for the sensor data is a Kafka-like event log / event-sourcing approach. Then there would be one subscriber to the broker, and all microservices could read from it, and pick up where they left off if they go down.</p>		<p>Because it is on-premise I want something more lightweight than Kafka, and have found NATS Streaming Server.</p>		<p>Now, the NATS event log can be persisted by configuring it with a data store. It currently supports a simple file store and a SQL store.</p>		<p>Now if I used the SQL store, it seems like a waste of time to store raw messages to database, read from database, then store them again, plus bad for performance. The SQL store interface also has its own batching implemented. I'm not sure how much I trust the file store as the source of truth too.</p>		<p>So, is this a viable approach?</p>	"
47530962,47537767,47530962,2,1,Tue Nov 28 17:41:00 EST 2017,7817149,"<p>You can consume messages "by batches" in NATS Streaming by creating your subscription with a MaxInflight and ManualAckMode. The server will not send more than MaxInflight messages without receiving corresponding message acks from the clients.</p>		<p>If you need to do transformation before storing, I understand your process. However, if you just don't trust the FileStore or SQLStore from the NATS Streaming server, why would you be using NATS Streaming in the first place? That is, the stores have been implemented by the same people (including me) that wrote the NATS Streaming server ;-)</p>	"
47530962,82069929,47537767,3,0,Wed Nov 29 15:32:00 EST 2017,94416,"there is some info here https://github.com/nats-io/nats-streaming-server  mysql and postgres atm"
47530962,82082913,47537767,3,1,Wed Nov 29 21:59:00 EST 2017,7817149,"Check this: https://github.com/nats-io/nats-streaming-server#sql-store-options. That being said, those are implementation details. Also, if you want each operation to translate to execution of SQL statement, you can disable caching with `-sql_no_caching=true` from command line (`no_caching` in sql configuration section in config file: https://github.com/nats-io/nats-streaming-server#configuration-file)"
47530962,82035784,47537767,3,0,Tue Nov 28 19:26:00 EST 2017,130910,"Where can I find more information on the SQL store implementation regarding the caching behavior?"
