thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42004579,42004579,null,1,-1,Thu Feb 02 14:19:00 EST 2017,4266956,"<p>I am using Node.js to get data from a MQTT broker (<a href="https://www.npmjs.com/package/ttn" rel="nofollow noreferrer">with this</a>) and store in a MongoDB database. Now I want to visualize this data in a web app (possibly) in real time.	The data comes from different Internet Of Things node, so every time a node send data, I would that a button in HTMl become green or blink.</p>		<p>I am not an expert backend programmer, so what could be the best way, in terms of complexity? There are some intuitive libraries?	API ? Socket.io ? Moongose ?</p>	"
42004579,71186788,42004579,3,2,Thu Feb 02 14:57:00 EST 2017,1264862,"One possible way is to use WebSockets for connecting NodeJS & HTML (front-end) in real-time. That is whenever you receive a data in Node, pass it to websockets, and in front-end handle the data appropriately."
42004579,71189602,42004579,3,0,Thu Feb 02 16:03:00 EST 2017,4266956,"WebSocket code is implemented server side or client side (browser)?"
42004579,71190502,42004579,3,0,Thu Feb 02 16:26:00 EST 2017,7406574,"Both. The client needs to open a connection with the server. Once there is an open connection, the server can push data to the client without making any new requests or connections."
42004579,71211344,42004579,3,0,Fri Feb 03 06:59:00 EST 2017,1264862,"@FabioDev As Max commented, it should be implemented on both side. I have posted an answer on how to implement, please to check it."
42004579,42007899,42004579,2,0,Thu Feb 02 16:52:00 EST 2017,7506662,"<p>Solution 1	You could let your front end to subscribe your MQTT broker. The potential problem is the data may not go into your DB but it shows up on the web page.</p>		<p>Solution 2	You could open a web socket or stream between your backend and frontend so that the backend will push data in real time.</p>	"
42004579,42018455,42004579,2,1,Fri Feb 03 06:57:00 EST 2017,1264862,"<p>WebSocket is similar to MQTT but with no emphasised protocol on how a client or server should communicate with each other.</p>		<p>Since you have already implemented MQTT in NodeJS, I would recommend using the following pattern to establish communication. </p>		<p><strong>IOT -> sends DATA via MQTT -> Server receives DATA -> Server sends DATA via WebSocket -> Client receives DATA.</strong></p>		<p>I am using socket.io, a popular WebSocket library for the purpose of demonstration.</p>		<p><strong>STEP 1:</strong> Installing socket.io</p>		<blockquote>	  <p>npm install socket.io</p>	</blockquote>		<p><strong>STEP 2:</strong> Server side implementation</p>		<pre><code>var app = require('express')();	var http = require('http').Server(app);	var mqtt = require('mqtt'); // This is for demonstration only, use your existing mqtt library instead.	var client = mqtt.connect('mqtt://test.mosquitto.org');		var io = require('socket.io')(http);		io.on('connection', function(socket) { // Whenever a new client is connected, this event is triggered	    console.log("[Live] A new client connected.", socket.id);	    socket.on('disconnect', function(socket) {	        console.log("[Live]", socket.id, "got disconnected.");	    });	});		client.on('message', function (topic, message) {	   io.emit('live', message.toString());  // io.emit(channel, message);	   // Broadcasts message to all client instance's that are subscribed to 'live' channel.	});		http.listen(3000, function(){	  console.log('listening on *:3000');	});	</code></pre>		<p><strong>STEP 3:</strong> Client side implementation</p>		<pre><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.2/socket.io.js"&gt;&lt;/script&gt;	&lt;script&gt;	  var socket = io('http://localhost:3000');	  socket.on('live', function (data) { // This event is triggered when server publishes data to 'live' channel	    console.log(data);	  });	&lt;/script&gt;	</code></pre>		<p>Simple, isn't it. Hope it helps.</p>	"
