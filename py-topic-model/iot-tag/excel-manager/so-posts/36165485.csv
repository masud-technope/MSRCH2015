thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
36165485,36165485,null,1,0,Tue Mar 22 21:21:00 EDT 2016,1858187,"<p>I'm trying the jamod library for java accessing a modbus enabled device.	I want set a specific register (40149), according the modbus-profile of	the device the datatype expected must be a Signed 32 bit int.	I have set up the following code (based on <a href="https://github.com/jeick/jamod/blob/master/src/main/java/net/wimpi/modbus/cmd/TCPMasterTest.java" rel="nofollow">https://github.com/jeick/jamod/blob/master/src/main/java/net/wimpi/modbus/cmd/TCPMasterTest.java</a>), but it doesn't work. The register	is  write only, but the device has a display where i can see the register value.	So one modbus register is 16 bit (according modbus-profile of the device) I sent a array of two length with the first element is the actual required value 20000 and the second set to 0.</p>		<pre><code>private static int requestNumber = 7;	public static void main(String[] args) {	    int port = Modbus.DEFAULT_PORT;	    int unitId = 3; //Same as TCPSlaveTest.java	    try {	        if (args != null &amp;&amp; args.length == 1) {	            port = Integer.parseInt(args[0]);	        }	        //InetAddress addy = InetAddress.getLocalHost();	        InetAddress addy = InetAddress.getByName("192.168.2.11");	        TCPMasterConnection connection = new TCPMasterConnection(addy);	        connection.setTimeout(3000);	        connection.setPort(port);	        System.out.println("Trying to connect to "+addy.getCanonicalHostName()+" on port "+port);	        connection.connect();		        ModbusTCPTransaction transaction = new ModbusTCPTransaction(connection);		        ModbusRequest request;	        while ((request = getNextRequest()) != null) {	            request.setUnitID(unitId);	            transaction.setRequest(request);	            transaction.execute();	            ModbusResponse response = transaction.getResponse();	            gotResponse(response);	        }	    } catch (Exception e) {	        e.printStackTrace();	    }	}		private static void gotResponse(ModbusResponse response) {	    System.out.println("Got response: "+ response.getHexMessage());	}		private static ModbusRequest getNextRequest() {	    //Note: simple process image uses 0-based register addresses	    switch (requestNumber) {	        case 0:	            return new WriteCoilRequest(0,true);	        case 1:	            return new ReadCoilsRequest(0, 2);	        case 2:	            return new ReadInputDiscretesRequest(0,4);	        case 3:	            return new ReadInputRegistersRequest(0,1);	        case 4:	            return new ReadMultipleRegistersRequest(30052,2);	        case 5:	            Register r = ModbusCoupler.getReference().getProcessImageFactory().createRegister();	            r.setValue(420);	            return new WriteSingleRegisterRequest(0,r);	        case 6:	            return new ReadMultipleRegistersRequest(30051,2);	        case 7:	            SimpleRegister[] registers = new SimpleRegister[2];	            registers[0] = new SimpleRegister(0);	            registers[1] = new SimpleRegister(2000);	            return new WriteMultipleRegistersRequest(40149,registers);	        default:	            return null;	    }	}	</code></pre>		<p>Any Suggestions ? </p>	"
36165485,40866284,36165485,2,0,Tue Nov 29 12:45:00 EST 2016,6833803,"<p>Writing a value into register is not a complex process, the method i used to do so is.</p>		<pre><code>import java.net.InetAddress;	import java.net.UnknownHostException;		import net.wimpi.modbus.ModbusException;	import net.wimpi.modbus.ModbusIOException;	import net.wimpi.modbus.ModbusSlaveException;	import net.wimpi.modbus.io.ModbusTCPTransaction;	import net.wimpi.modbus.msg.ReadInputDiscretesRequest;	import net.wimpi.modbus.msg.ReadInputDiscretesResponse;	import net.wimpi.modbus.msg.WriteSingleRegisterRequest;	import net.wimpi.modbus.net.TCPMasterConnection;	import net.wimpi.modbus.procimg.SimpleRegister;		public class WriteToRegister {		    TCPMasterConnection con = null; //the connection	    ModbusTCPTransaction trans = null; //the transaction	    ReadInputDiscretesRequest req = null; //the request	    ReadInputDiscretesResponse res = null; //the response		    WriteToRegister( String ipaddress , int port ) throws UnknownHostException {		        InetAddress ipaddr = null;		        ipaddr = InetAddress.getByName(ipaddress);		        con = new TCPMasterConnection(ipaddr);	        con.setPort(port);	        System.out.println("Making connection to Plc..");		        try {	            con.connect();	        } catch (Exception e) {	            System.err.println("Connection successful");	            e.printStackTrace();	        }	    }		    public void writeRegister(int regaddr, int value) throws ModbusIOException, ModbusSlaveException, ModbusException {		        WriteSingleRegisterRequest WriteReq = null; 	        SimpleRegister MyReg = new SimpleRegister(1);		        //3. Prepare the request	        WriteReq = new WriteSingleRegisterRequest();	        WriteReq.setReference(regaddr);  //register number	        MyReg.setValue(value);         //value for register	        WriteReq.setRegister(MyReg);		        //4. Prepare the transaction		        trans = new ModbusTCPTransaction(con);	        trans.setRequest(WriteReq);		        trans.execute();		    }		    public static void main(String[] args) throws UnknownHostException, ModbusIOException, ModbusSlaveException, ModbusException {		        WriteToRegister w = new WriteToRegister("192.168.0.34",502);	        // Make sure you insert register value in hexadecimal 	        // and value should be in range of -32,768 to 32,767 	        w.writeRegister(0x1000, 255);		    }		}	</code></pre>		<p>Hope that it helps! Works for me.</p>	"
