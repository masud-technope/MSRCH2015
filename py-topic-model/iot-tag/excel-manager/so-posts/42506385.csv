thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42506385,42506385,null,1,3,Tue Feb 28 10:35:00 EST 2017,7634751,"<p>I've been trying for so many days, but my code is not working. What I want is to send data from an Arduino Uno using WiFi cc3000 to my web application. I've successfully connected to WiFi but can't connect to my web server which is deployed on IIS server. Could you please provide me a basic link or solve the problem in my code? </p>		<pre><code>#include &lt;Adafruit_CC3000.h&gt;	#include &lt;ccspi.h&gt;	#include &lt;SPI.h&gt;	#include &lt;string.h&gt;	#include "utility/debug.h"			#define WLAN_SSID       "xxxx"           	#define WLAN_PASS       "xxxxxxx"	#define WLAN_SECURITY   WLAN_SEC_WPA2		#define IDLE_TIMEOUT_MS  3000      // Amount of time to wait (in milliseconds) with no data 	                                   // received before closing the connection.  If you know the server	                                   // you're accessing is quick to respond, you can reduce this value.		// What page to grab!	#define WEBSITE      "http://www.sohail.com/ArduinoTCPCommunication/"	#define WEBPAGE      "default.aspx"					uint32_t ip;			void setup(void)	{	  Serial.begin(9600);	  Serial.println(F("Hello, CC3000!\n")); 		  Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);		  /* Initialise the module */	  Serial.println(F("\nInitializing..."));	  if (!cc3000.begin())	  {	    Serial.println(F("Couldn't begin()! Check your wiring?"));	    while(1);	  }		  // Optional SSID scan	  // listSSIDResults();		  Serial.print(F("\nAttempting to connect to ")); Serial.println(WLAN_SSID);	  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {	    Serial.println(F("Failed!"));	    while(1);	  }		  Serial.println(F("Connected!"));		  /* Wait for DHCP to complete */	  Serial.println(F("Request DHCP"));	  while (!cc3000.checkDHCP())	  {	    delay(100); // ToDo: Insert a DHCP timeout!	  }  		  /* Display the IP address DNS, Gateway, etc. */  	  while (! displayConnectionDetails()) {	    delay(1000);	  }		ip=0;	        Serial.println("IP to Connect");	             cc3000.printIPdotsRev(ip);	//   Try looking up the website's IP address	  Serial.print(WEBSITE); Serial.print(F(" -&gt; "));	  while (ip == 0) {	    if (! cc3000.getHostByName(WEBSITE, &amp;ip)) {	      Serial.println(F("Couldn't resolve!"));	    }	    delay(500);	  }		  //cc3000.printIPdotsRev(ip);		  serial.print(F("\n\rPinging ")); cc3000.printIPdotsRev(ip); Serial.print("...");  	  replies = cc3000.ping(ip, 5);	  Serial.print(replies); Serial.println(F(" replies"));	  */  			  if (www.connected()) {	          Serial.println(F("connected"));	    www.fastrprint(F("GET "));	    www.fastrprint(WEBPAGE);	    www.fastrprint(F(" HTTP/1.1\r\n"));	    www.fastrprint(F("Host: ")); www.fastrprint(WEBSITE); www.fastrprint(F("\r\n"));	    www.fastrprint(F("\r\n"));	    www.println();	  } else {	    Serial.println(F("Connection failed"));    	    return;	  }				  /* Read data until either the connection is closed, or the idle timeout is reached. */ 	  unsigned long lastRead = millis();	  while (www.connected() &amp;&amp; (millis() - lastRead &lt; IDLE_TIMEOUT_MS)) {	    while (www.available()) {	      char c = www.read();	      Serial.print(c);	      lastRead = millis();	    }	  }	  www.close();			  /* the next time your try to connect ... */	  Serial.println(F("\n\nDisconnecting"));	  cc3000.disconnect();		}		void loop(void)	{	 delay(1000);	}				bool displayConnectionDetails(void)	{	  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;		  if(!cc3000.getIPAddress(&amp;ipAddress, &amp;netmask, &amp;gateway, &amp;dhcpserv, &amp;dnsserv))	  {	    Serial.println(F("Unable to retrieve the IP Address!\r\n"));	    return false;	  }	  else	  {	    Serial.print(F("\nIP Addr: ")); cc3000.printIPdotsRev(ipAddress);	    Serial.print(F("\nNetmask: ")); cc3000.printIPdotsRev(netmask);	    Serial.print(F("\nGateway: ")); cc3000.printIPdotsRev(gateway);	    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);	    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);	    Serial.println();	    return true;	  }	}	</code></pre>		<p>Here is the output for data sent to the local server, but I can't find the local IP:	<img src="https://i.stack.imgur.com/JQZZs.png" alt="Screenshot"></p>	"
