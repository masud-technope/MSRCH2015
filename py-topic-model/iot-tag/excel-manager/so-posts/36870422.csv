thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
36870422,36870422,null,1,0,Tue Apr 26 16:16:00 EDT 2016,6124487,"<p>I need to implement a TCP comunication between the <strong>SPWF01SA Wifi-Module</strong> (from <a href="http://www.st.com/web/en/catalog/sense_power/FM1968/CL1976/SC1930/PF258591" rel="nofollow">ST Microelectronics</a>) and an Android App. For the Wifi-Module firmware i'm using the <strong>X-Cube-WIFI</strong> <a href="http://www.st.com/web/en/catalog/tools/PF262298" rel="nofollow">Middleware library</a> as a Server Socket, while in Android i have an AsyncTask as a Client Socket. The wifi module is controlled by the stm32f103 micro(using an I2C interface) and they are both connected to an access point. Here is the Android Client Socket code for the initialization/socket-read and socket-write:</p>		<pre><code>@Override	protected Boolean doInBackground(Void... params) { //This runs on a different thread	    boolean result = false;		    try {	        Log.i("AsyncTask", "doInBackground: Creating socket");	        //Get a List of IPs that have a the desired port opened		        SocketAddress sockaddr = new InetSocketAddress(MY_IP, PORT);	        nsocket = new Socket();	        nsocket.connect(sockaddr, 5000); //10 second connection timeout	        if (nsocket.isConnected()) {	            nsocket.setSendBufferSize(250);	            nis = nsocket.getInputStream();	            nos = nsocket.getOutputStream();	            Log.i("AsyncTask", "doInBackground: Socket created, streams assigned");	            Log.i("AsyncTask", "doInBackground: Waiting for inital data...");	            byte[] buffer = new byte[4096];	            int read = nis.read(buffer, 0, 4096); //This is blocking	            publishType = PUBLISH_READ;	            while(read != -1){	                byte[] tempdata = new byte[read];	                System.arraycopy(buffer, 0, tempdata, 0, read);	                publishProgress(tempdata);	                Log.i("AsyncTask", "doInBackground: Got some data");	                read = nis.read(buffer, 0, 4096); //This is blocking	            }	        }	    } catch (IOException e) {	        e.printStackTrace();	        Log.i("AsyncTask", "doInBackground: IOException");	        result = true;	    } catch (Exception e) {	        e.printStackTrace();	        Log.i("AsyncTask", "doInBackground: Exception");	        result = true;	    } finally {	        try {	            nis.close();	            nos.close();	            nsocket.close();	        } catch (IOException e) {	            e.printStackTrace();	        } catch (Exception e) {	            e.printStackTrace();	        }	        Log.i("AsyncTask", "doInBackground: Finished");	    }	    return result;	}		public boolean sendDataToNetwork(final String cmd)	{	    if (nsocket.isConnected())	    {	        Log.i("AsyncTask", "SendDataToNetwork: Writing received message to socket");	        new Thread(new Runnable()	        {	            public void run()	            {	                try	                {	                    nos.write(cmd.getBytes());	                }	                catch (Exception e)	                {	                    e.printStackTrace();	                    Log.i("AsyncTask", "SendDataToNetwork: Message send failed. Caught an exception");	                }	            }	        }).start();		        return true;	    }		    Log.i("AsyncTask", "SendDataToNetwork: Cannot send message. Socket is closed");	    return false;	}	</code></pre>		<p>For small size socket write(From Android to the module) everything works, the problem rises when i need to send more than 512bytes (witch is the wifi module rx buffer). If i send more than that to the wifi module, its RX buffer goes on overflow. I thought, that the line <strong>nsocket.setSendBufferSize(250)</strong> would make the trick, but doesn't make any difference. How can i stream to the wifi module large amount of data, if the latter has a small receiver buffer?	I'm new to TCP implementations, thank you for your time.</p>		<hr>		<p>Other info:</p>		<p>The WiFi Module is controlled through the I2C interface by the <strong>STM32F103RB</strong> microcontroller, and the Middlware library is provided directly by ST(I have posted the link at the beginging).</p>		<hr>		<p>After debbuging the software on the micro that comunicates with the wifi module, i saw that there are two malfunctions that occur ramdomply:</p>		<ul>	<li><p>either the I2C Rx buffer overflows</p></li>	<li><p>or while it reads the rx buffer it can miss some I2C commands from the wifi modules, wich serves to read the current pending packet on the i2c rx buffer;</p></li>	</ul>		<p>I2C speed between wifi-module and micro is set at 460800kbps.	Either of two, the problem seems to be that the TCP stream from android is too fast. Here are some specifications for the wifi module communciation(Provided by the STM team):</p>		<ul>	<li><p>Wifi Module buffer size is 1Kb(same on the micro);</p></li>	<li><p>For TCP, the MSS (maximum segment size) is equal to 730B (fixed in the lwip stack options). So, both for TX and for RX, this is the max segment transmittable or receivable by the module.</p></li>	</ul>		<p>ST Microelectronics affirm that by spliting the data in 100B packets, they reached 60kB/s.	How can i slow down the stream from the Android App, and fix an MSS less or equal to 730B?</p>	"
36870422,61335960,36870422,3,0,Wed Apr 27 09:29:00 EDT 2016,6124487,"@greenapps I updated my post. The SPWF01SA Wifi-Module needs to be controlled by a micro, so the STM32F103 is controlling it using I2C interface. The library is provided by ST and I can't post it(and it's long), you can download it at this [link](http://www.st.com/web/en/catalog/tools/PF262298#). Basicaly the wifi module handles all the wireless Internet connectivity and you just send commands via I2C to control and configure it."
36870422,61336178,36870422,3,0,Wed Apr 27 09:33:00 EDT 2016,2108972,"Ok. Thats better information. I wonder why you did not tell this when i asked for the setup. But i will not deep in that library of course. You first should tell how you know that that buffer overflows. And then post that part of the code here. Further you still did not tell if you talk about an overflowing buffer in the i2s communication or that it really is a buffer used in the wifi code."
36870422,61511284,36870422,3,0,Mon May 02 08:25:00 EDT 2016,6124487,"@greenapps The library it runs on the micro. I updated my post with the TCP communciation specs provided by ST. The problem seem to be that the stream from Android app is too fast for the module+micro to handle. Is it possible to change the MSS (maximum segment size) to less than 1KB?"
36870422,61336350,36870422,3,0,Wed Apr 27 09:37:00 EDT 2016,2108972,"The library you talk about. Does it run on the wifi module? Or on the micro? And where is that overflow buffer? Wifi module or micro?"
36870422,61333652,36870422,3,0,Wed Apr 27 08:31:00 EDT 2016,6124487,"@greenapps thank you, I have rephrased my post. My setup is: The wifi-module is controled by a micro(stm32f103) and it runs a TCP Server Socket. The android app runs the Client socket and they are both connected to the same wifi network. `doInBackground` would connect the android client to the server socket and than read incoming messages. From the andorid user interface i can send messages to the wifi module by calling `sendDataToNetwork()`. What do you mean by "they are not used in the wifi communciation to begin with"? I know that TCP is a stream delivery service."
36870422,61334128,36870422,3,0,Wed Apr 27 08:43:00 EDT 2016,2108972,"Do you see a TX in Android app's wifi code? Do you see a RX in your apps code? I dont. I see no problems with your Android code. If there are problems with your servers code then show the servers code. RX and TX are lines used in serial communication. But here we talk about wifi communication."
36870422,61334272,36870422,3,0,Wed Apr 27 08:47:00 EDT 2016,2108972,"`How can i stream to the wifi module large amount of data, if the latter has a small receiver buffer`. You should read it out quicker i would think."
36870422,61334560,36870422,3,0,Wed Apr 27 08:54:00 EDT 2016,2108972,"`its RX buffer goes on overflow`. How do you know? Please show relevant code and logging details."
36870422,61334708,36870422,3,0,Wed Apr 27 08:57:00 EDT 2016,2108972,"Is that in the firmware TCP stack implementation or in your servers code? If the first then you have a problem."
36870422,61335094,36870422,3,0,Wed Apr 27 09:06:00 EDT 2016,2108972,"Did you connect this serial wifi module to another system using the UART TX,RX lines?   Are you talking about that? Please explain."
36870422,61335295,36870422,3,0,Wed Apr 27 09:12:00 EDT 2016,2108972,"`The wifi-module is controled by a micro(stm32f103) `. So what do you mean by that? Are they two modules connected by tx,rx?"
36870422,61515942,36870422,3,0,Mon May 02 10:41:00 EDT 2016,2108972,"Sorry. Think i cannot help you."
36870422,61332029,36870422,3,0,Wed Apr 27 07:49:00 EDT 2016,6124487,"@greenapps For small size TX packets I mean for small messages sent from Android App to the WiFi Module(Messages that are less than 512 bytes).  `sendDataToNetwork()` is called on a button click in the android user interface."
36870422,61332167,36870422,3,0,Wed Apr 27 07:52:00 EDT 2016,2108972,"You still did not tell what that has to do with TX and RX. They are not used in wifi communication to begin with."
36870422,61332229,36870422,3,0,Wed Apr 27 07:54:00 EDT 2016,2108972,"If you do not mean TX then rephrase your post. You could start telling your setup like how did you connect all?"
36870422,61311864,36870422,3,0,Tue Apr 26 18:10:00 EDT 2016,2108972,"Small size TX? What do you mean? I see no TX."
36870422,61311935,36870422,3,0,Tue Apr 26 18:12:00 EDT 2016,2108972,"`sendDataToNetwork()`. Who is calling this and when? Has it to do with your problem?"
36870422,61312022,36870422,3,0,Tue Apr 26 18:14:00 EDT 2016,2108972,"`//This is blocking`. Really? Please tell more."
