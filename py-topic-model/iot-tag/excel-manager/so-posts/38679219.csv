thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
38679219,38679219,null,1,3,Sat Jul 30 22:53:00 EDT 2016,2915625,"<p>I am trying to set up a MQTT system for a project that connects many clients. </p>		<p>These clients are of different type and may have different functionality. Some client-types have information - like temperature - which is being published but at the same time feature states that need to be set - like switches - which can be set by other clients.</p>		<p>So using MQTT I came up with the following concept:</p>		<ol>	<li><p>The client publishes the informations it has - in the above example this would be the temperature, so like:</p>		<p>customer/group/device/temperature</p></li>	<li><p>When the client connects to a broker, in order to receive a state for the switch from different clients it subscribes to:</p>		<p>customer/group/device/switch</p></li>	</ol>		<p>I have been using a websocket based solution so far but since MQTT is a famous protocol for IoT devices I was asking myself how to implement one to one communications between clients and came up with the above example of how I would do that. </p>	"
38679219,64743214,38679219,3,0,Sun Jul 31 07:56:00 EDT 2016,504554,"MQTT topics should not start with a /, this just adds a null element to the tree and makes things harder later"
38679219,64743320,38679219,3,0,Sun Jul 31 08:04:00 EDT 2016,2915625,"Have changed it!"
38679219,64743501,38679219,3,1,Sun Jul 31 08:18:00 EDT 2016,504554,"You've asked and answered your own question here between the title and the body of the "question". What response are you expecting?"
38679219,38695745,38679219,2,2,Mon Aug 01 09:47:00 EDT 2016,423955,"<p>Your solution is pretty OK. For example, client <code>A</code> can publish to client <code>B</code> using topic <code>customer/group/B/switch</code>, then client <code>B</code> replies to <code>customer/group/A/switch</code>.</p>		<p>As an alternative, client <code>A</code> can publish to <code>customer/group/B/switch</code> and specify in the payload the topic where it expects replies, for example</p>		<pre><code>{	    "data":"your message",	    "reply-to":"customer/group/A/segretreply-fromB-1345313"	}	</code></pre>		<p>(just an example of JSON payload).	You can use timestamps, MACs or other sources of "uniqueness" to build the reply-to topic. Client <code>A</code> could subscribe to different reply-to topics to mantain "separate" channels for each other client.</p>		<p>The real problem is that MQTT <strong>is not a one-to-one</strong> communication, each client can, potentially, subscribe to <code>#</code> and receive all messages.<br>	You should have some sort of <strong>authorization</strong> in your broker to decide whether a client can publish/subscribe to a topic or not.</p>		<p>I suggest reading this excellent article <a href="http://www.hivemq.com/blog/mqtt-security-fundamentals-authorization" rel="nofollow">MQTT Security Fundamentals: Authorization</a>. Then you can setup topics and authorization rules to better fit your requirements.</p>		<p>I'm not affiliated with HiveMQ. The link provided is just for educational purposes, their tutorial are great.</p>	"
