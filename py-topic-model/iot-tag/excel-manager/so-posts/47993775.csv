thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
47993775,47993775,null,1,-1,Wed Dec 27 14:21:00 EST 2017,5533928,"<p>I have a python script that acts as a webhook. A part of it is as follows:</p>		<pre><code>import json	import os	import urllib	import socket	import _thread	from flask import Flask	from flask import request	from flask import make_response	app=Flask(__name__)		ip = ('192.168.1.75', 9050)		@app.route('/webhook',methods=['GET','POST'])	    def webhook():	        _thread.start_new_thread(sendDataToDevice,(ip))	        req = request.get_json(silent=True,force=True)	        print("Request:")	        print(json.dumps(req,indent=4))	        res=makeWebHookResult(req)	        res=json.dumps(res,indent=4)	        r=make_response(res)	        r.headers['Content-Type']='application/json'	        return r		if __name__ == '__main__':	    app.run(port=8080,host='localhost')	</code></pre>		<p>The function of the script is to send some data to a device connected to the local network.	It works flawlessly when I open my web browser and type the following on the url bar:</p>		<pre><code>http://localhost:8080/webhook	</code></pre>		<p>I want to host the script on a server, eg. Heroku. How can I access the local device in that case?</p>		<p>Note: I know I can run the script on my local machine and make it visible to the internet using ngrok, but I want to keep it accessible even when my computer is switched off. Also, want a fixed link, and the links given by ngrok change on every run.</p>	"
47993775,82956113,47993775,3,0,Wed Dec 27 14:39:00 EST 2017,2598661,"Correct me if I'm wrong. In your example you have some device running at `device_ip, device_port = "192.168.1.75", 9050` on your local network. What you want is to be able to get a device_ip and device_port when you host your app on a remote server (e.g. Heroku)?	Also can you tell me what kind of device is this? Is it a computer, smartphone or embedded system?"
47993775,82956160,47993775,3,0,Wed Dec 27 14:41:00 EST 2017,5533928,"That is correct. The device is an embedded system, to be specific, an Arduino Uno board with esp8266 WiFi module."
47993775,82956365,47993775,3,0,Wed Dec 27 14:48:00 EST 2017,2598661,"Can I assume you have admin access to the WiFi router on your local network?"
47993775,82956396,47993775,3,0,Wed Dec 27 14:49:00 EST 2017,5533928,"Yes, I have admin access."
47993775,47994468,47993775,2,1,Wed Dec 27 15:12:00 EST 2017,2598661,"<p>I've faced a similar issue before with IoT. Unfortunately there is no simple way to make a device be visible online. Here's a simple solution I've used. It might not be the best, but it works.</p>		<h2>DDNS + Port Forwarding + Static IP</h2>		<p>If you have access to your local WiFi router, then you can setup something called as DDNS (Dynamic Domain Name System). Your router will then connect to a DDNS service provider like <strong>no-ip</strong> (www.noip.com) and it will be visible on the internet. You can give a custom URL like <code>susmit-home.noip.com</code>.</p>		<p>However <code>susmit-home.noip.com</code> will now point only to your WiFi router and not your WiFi network. So if you want to access the local <code>device_ip</code> and <code>device_port</code> such as "192.168.1.75", 9050. Then you can setup Port Forwarding on your router for that local IP-Port combination. Usually the setup looks like this:</p>		<ul>	<li>Local IP: <code>device_ip</code> (e.g. 192.168.1.75)</li>	<li>Local Port: <code>device_port</code>  (e.g. 9050)</li>	<li>Outbound Port: <code>any_port</code> (e.g. 9050)</li>	</ul>		<p>Make sure that your <code>device_ip</code> is a static IP on your WiFi router so that it doesn't change.</p>		<p>Finally in your code you can just replace the line <code>ip = ('192.168.1.75', 9050)</code> with <code>ip = ('susmit-home.noip.com', 9050)</code>.</p>		<h2>Other solutions:</h2>		<ol>	<li>A slightly more complicated solution is setting up a VPN, such that your local network and your remote server (e.g. Heroku) will all be available to each other as if they were within the same local network.</li>	<li>If your device is a computer or a Raspberry Pi, then you can use SSH Remote Port Forwarding to have access to your local device from the remote server.</li>	</ol>	"
47993775,82960154,47994468,3,0,Wed Dec 27 17:09:00 EST 2017,2598661,"If this worked for you, let people know."
47993775,82960801,47994468,3,0,Wed Dec 27 17:38:00 EST 2017,5533928,"It didn't work for me, but I found another workaround. I added a new webhook function to the script. I keep polling it using the device and process the results. This essentially eliminates the need to get the device's IP or port. I'll look into where I went wrong using your method."
47993775,82961302,47994468,3,0,Wed Dec 27 17:59:00 EST 2017,2598661,"Yep, polling is the most preferred solution even during production :)	An alternate solution that I once tried was keeping the connection always open and dumping results onto the connection. It provides real-time connectivity but it's very unreliable, especially on embedded systems."
