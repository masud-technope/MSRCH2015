thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
32864894,32864894,null,1,-1,Wed Sep 30 11:27:00 EDT 2015,5387597,"<p><strong>How can I write a timecritic backgroundapplication for Windows IoT in C#?</strong></p>		<p>The target is to Programm a stepper Motor via C# over the Raspberry Pi 2 with Windows IoT and Visual Studio 2015. Prgramming via Remote-Debug works fine but there is no sleep or delay available. Also System.Threading.Thread.Sleep(time) is not possible. </p>		<p>Also if we implement a timer the time between the steps is not the same at every step.</p>		<p>It is like 5 steps fast - 2 slowly - 5 steps fast - 2 slowly - 5 steps fast - and so on....</p>		<p><strong>How can I Programm the Motor that he is acting correct?</strong></p>		<p>Data:</p>		<p>Motor: HSY214 - F0.8 A NEMA8 - Steppermotor</p>		<p>Driver: A4988  </p>	"
32864894,74489245,32864894,3,0,Mon May 01 16:48:00 EDT 2017,2093880,"Also, refer to this thread: [Windows Store apps embrace asynchrony - and an "asynchronous pause" is provided by Task.Delay. So within an asynchronous method, you'd write:](http://stackoverflow.com/a/12641288/2093880)"
32864894,32889478,32864894,2,1,Thu Oct 01 13:57:00 EDT 2015,566608,"<p>You should have a law relating the I/O status with the time, and a clock with a proper resolution. Then you have a thread continuosly looping and checking the elapsed time with the clock. By applying the law you can then rise/lower I/O according.</p>	"
32864894,53754083,32889478,3,0,Tue Oct 06 08:01:00 EDT 2015,5387597,"can you explain that in form of a Code? Because of I have a Background Application in C# and I am not able to do any timecritic Task, there is no sleep or something.  Please give me an example."
32864894,33831049,32864894,2,2,Fri Nov 20 16:04:00 EST 2015,1898217,"<p>We have added C# support for Software PWM and Hardware PWM in the <a href="https://github.com/jbienzms/iot-devices" rel="nofollow">iot-devices project</a>.  You may also see <a href="http://ms-iot.github.io/content/en-US/win10/samples/arduino-wiring/StepperMotor.htm" rel="nofollow">this C++ example</a> of driving a stepper motor using Windows IoT Core.  If necessary, you may implement a functionality similar to Thread.Sleep using <a href="https://msdn.microsoft.com/en-us/library/hh194873(v=vs.110).aspx" rel="nofollow">System.Threading.Tasks.Task.Delay</a>. </p>	"
32864894,34802445,32864894,2,-4,Fri Jan 15 00:37:00 EST 2016,5792483,"<p>It looks like this is the way:</p>		<pre><code>var t = Task.Run(async delegate	         {	             await Task.Delay(1000);	             return 42;	          });	  t.Wait();	</code></pre>		<p>I am used to doing it like this:</p>		<pre><code>Thread.Sleep(1000);	</code></pre>		<p>So why is C# IoT coding so much more convoluted ?	I also program using C++ on Raspberry Pi, and it looks like the future of IoT is Linux, if MS-10 C# expects 6 lines of code to do a fixed delay in a thread.</p>	"
32864894,34934302,32864894,2,2,Thu Jan 21 21:04:00 EST 2016,4315433,"<p>Maybe in this way:</p>		<pre><code>Task.Delay(-1).Wait(100);	</code></pre>		<p>or </p>		<pre><code>Task.Delay(100).Wait(-1);	</code></pre>		<p>or</p>		<pre><code>Task.Delay(100).Wait();	</code></pre>		<p>in all case the result is the same.</p>		<p>I made a simple test for:</p>		<pre><code>while (true)	        {	            pin26.Write(GpioPinValue.High);	            Task.Delay(-1).Wait(100);	            pin26.Write(GpioPinValue.Low);	            Task.Delay(-1).Wait(100);	        }	</code></pre>		<p>Result of pulses width is not so good - from 98us to 116 us,	worse result is for short delay time...	<a href="http://i.stack.imgur.com/nnI5N.png" rel="nofollow">100us delay</a></p>		<p><a href="http://i.stack.imgur.com/QHSAP.png" rel="nofollow">10us delay</a></p>		<p>Will be better if you use external servo drive for this motor with step direction interface.</p>	"
32864894,43723102,32864894,2,0,Mon May 01 17:02:00 EDT 2017,2093880,"<p>We could use <a href="https://docs.microsoft.com/en-us/uwp/api/windows.system.threading.threadpooltimer" rel="nofollow noreferrer">ThreadPoolTimer</a></p>		<blockquote>	  <p>Tasks may also be referred to as threads, particularly when they exist within a task. One of the standard thread objects in Windows is the Timer....In Windows, instead of using a delay, we can start a timer thread. Once the thread is started, we can go about doing other useful things, and the timer will alert us when the period has expired. The timer does this through a Timer Tick event. </p>	</blockquote>		<p><a href="https://learn.adafruit.com/windows-iot-application-development-headless-application/program-architecture" rel="nofollow noreferrer">By Rick Lesniak</a></p>	"
