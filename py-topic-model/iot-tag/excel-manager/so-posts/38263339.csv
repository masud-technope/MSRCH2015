thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
38263339,38263339,null,1,6,Fri Jul 08 09:32:00 EDT 2016,761855,"<p>A client that I’m working for has a fleet of BeagleBones/Raspberry PI’s operating at customer locations. These devices are installed on local networks and behind firewalls. For SSH connectivity there are several options but we’re still struggling with Software deployments on these devices. We’re not relying on container technology for the moment, so Docker Cloud or Resin.io are not an option, but resin.io looks very promising. We’re using AWS IoT for data collection.</p>		<p>Some requirements regarding the deployment:</p>		<ul>	<li>push software server -> device</li>	<li>staged rollouts, rollout to a percentage of device which increases over time</li>	<li>rollback software</li>	<li>device provisioning</li>	<li>no container technology</li>	</ul>		<p>What are some good approaches to achieve this?</p>	"
38263339,38299209,38263339,2,1,Mon Jul 11 04:32:00 EDT 2016,3098602,"<p>How about Kura project?	The project has Beaglebone and RPi Gateway software.</p>		<p><a href="http://www.eclipse.org/kura/" rel="nofollow">http://www.eclipse.org/kura/</a></p>		<p><a href="http://eclipse.github.io/kura/doc/deploying-bundles.html#install-deployment-package-to-target-device" rel="nofollow">http://eclipse.github.io/kura/doc/deploying-bundles.html#install-deployment-package-to-target-device</a></p>	"
38263339,39285211,38263339,2,3,Fri Sep 02 05:55:00 EDT 2016,171237,"<p><em>(Disclaimer: developer evangelist at resin.io here).</em></p>		<p>The good thing is, that software that does not rely on containers, can still packaged up (while it does not work the other way around). Containers in resin.io are used as a means to deliver software onto the device, and implement interesting, useful, and safe update strategies, which otherwise would not be possible or would be harder to do. For example:</p>		<ul>	<li>your application code has a bug (happens!) and crashes. Does that take down the entire device including networking? (on resin.io containers help to limit damage, your app crashed but the device is online and can be updated)</li>	<li>do you have to update the entire machine image when you have an application update? (using containers like this, what's changed in your application code is updated, which results in very little data traffic most of the time, and very quick changes when needed)</li>	<li>using containers like this lets you have practically zero downtime upgrades (starting the new application, and the old running version hands over resources to the new one).</li>	</ul>		<p>This is not to convince you about container tech, just highlighting that whether or not your own application is containerized (most likely it's not and will stay like that!), do not select against services that use that tech as part of their stack. Every service tries to deliver the functionality you need in any ways necessary.</p>		<p>As for your checklist with regards to <a href="https://resin.io" rel="nofollow">resin.io</a>:</p>		<ul>	<li><em>push software server -> device</em>: check, <code>git push resin master</code> and your code is getting deployed</li>	<li><em>staged rollouts, rollout to a percentage of device which increases over time</em>: not part of the general feature set, but it's easy to implement using the <a href="http://docs.resin.io/runtime/supervisor-api/#post-v1-update" rel="nofollow">resin supervisor API</a>: for example lock updates for all devices, and you can select which devices would get unlocked and updated. Since it's all through an API, it's customizable to fit your preferred deployment strategy</li>	<li><em>rollback software</em>: not part of the general feature set (yet), but with git it's easy to re-push previous versions. Some care needs to be taken to pin versions of the libraries in your setup to result in a reproducible setup, but doable in practice.</li>	<li><em>device provisioning</em>: automatic device setup, or provisioning through an API/SDK/CLI is available</li>	<li><em>no container technology</em>: as mentioned above, in practice you should not need to care too much what way the service delivers your software, as it does not affect how your application behaves, in most cases.</li>	</ul>		<p>Also, you mentioned AWS IoT, there's <a href="http://docs.resin.io/integrations/aws/" rel="nofollow">some documentation</a> on integrating resin.io with AWS, including an example project doing automatic device provisioning of resin.io devices with AWS IoT (plug in a device, and it automatically gets credentials for AWS IoT). It might be something that interests you.</p>	"
