thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
53103190,53103190,null,1,1,Thu Nov 01 14:21:00 EDT 2018,2591228,"<p>In .Net standard 4.x you connect to the event hub (to get messages from your devices) like this:</p>		<pre><code>var connectionstring = "HostName=hubname.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=xxxxxxx";    	var eventHubClient = EventHubClient.CreateFromConnectionString(connectionstring, "messages/events");	</code></pre>		<p>In .Net core. The CreateFromConnectionString takes only one parameter, The same code looks like this:</p>		<pre><code>var connectionstring = "HostName=hubname.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=xxxxxxx";    	        var builder = new EventHubsConnectionStringBuilder(connectionstring) { EntityPath = "messages/events" };	        var eventHubClient = EventHubClient.CreateFromConnectionString(builder.ToString());	</code></pre>		<p>However, when I do this, I get an exception (System.ArgumentException: 'Illegal connection string parameter name 'HostName''). The only way to get it to work, is to get the Endpoint address from Azure IoT Hub and use it in the code like this:</p>		<pre><code>var endpointaddress = "Endpoint=sb://ihsuprodamres12345namespace.servicebus.windows.net/;SharedAccessKeyName=iothubowner;SharedAccessKey=xxxxxxx;EntityPath=iothub-ehub-hostname-914420-faa6fa4523";	var eventHubClient = EventHubClient.CreateFromConnectionString(endpointaddress);	</code></pre>		<p>Now the big question. How can I get it to work without the sb:// connection string and only use a standard connection string? What am I missing? Can anyone supply some standard .Net Core 2.x code that connects to the IoT Hub and read messages without having to use the special sb:// endpoint string?	I want to avoid having to store both if it is not necessary (the regular connection string is used by the devices to upload data to the hub). And since it is possible in standard .Net it must be possible in .Net core as well.	From command line I can obtain the information for the connection string by running these commands, so if I must use the sb:// url, can I using c# and the IoT Hub API get this information?</p>		<pre><code>az iot hub show --query properties.eventHubEndpoints.events.endpoint --name HostName	az iot hub show --query properties.eventHubEndpoints.events.path --name HostName	az iot hub policy show --name iothubowner --query primaryKey --hub-name HostName	</code></pre>	"
53103190,93102939,53103190,3,0,Thu Nov 01 14:58:00 EDT 2018,2591228,"What I failed to explain is that the endpoint address will allow (whoever has it) to get all messages from all devices in the hub, not just the messages from a single device."
53103190,93103666,53103190,3,0,Thu Nov 01 15:18:00 EDT 2018,2102114,"Sorry, my bad! I should have read the question more carefully. I'll see if I can find a good solution"
53103190,93104357,53103190,3,0,Thu Nov 01 15:39:00 EDT 2018,2102114,"From what I see, if you want to use the EventHub endpoint you will have to use the sb:// endpoint. The Iothub connection string (with HostName) can either register/unregister or get the details for a single device :( https://blogs.msdn.microsoft.com/iotdev/2017/05/09/understand-different-connection-strings-in-azure-iot-hub/"
53103190,93102599,53103190,3,0,Thu Nov 01 14:48:00 EDT 2018,2102114,"One thought that comes to mind is using a ServicebusConnectionStringBuilder to build the connection string and then use that in the CreateFromConnectionString method as shown here: https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.eventhubclient.createfromconnectionstring?view=azure-dotnet Would that work for you?"
