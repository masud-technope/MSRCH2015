thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
57300123,57300123,null,1,0,Wed Jul 31 23:40:00 EDT 2019,8554106,"<p>Is it possible to program ESP8266  wirh rtx rtos?</p>		<p>I know it’s possible to program with:</p>		<p>AT (terminal) commands,	Official ESP8266 SDK and Toolchain,	NodeMCU with eLua,	Arduino IDE.</p>		<p>Or may you suggest a wifi chip like esp8266 that	i program with rtx rtos.	I’m totally a beginner so excuse me if it’s a stupid question.</p>	"
57300123,101097529,57300123,3,0,Thu Aug 01 05:16:00 EDT 2019,3518383,"https://www.espressif.com/en/support/download/sdks-demos?keys=&field_type_tid%5B%5D=14"
57300123,101171123,57300123,3,0,Sat Aug 03 19:20:00 EDT 2019,168986,"The product name "RTX" refers to at least two different RTOSes.  You may need to be more specific."
57300123,57341543,57300123,2,1,Sat Aug 03 19:33:00 EDT 2019,168986,"<p>"RTX" may refer to an ARM specific RTOS from Keil, or  IntervalZero's real-time extensions for Microsoft Windows.  Either way the answer is <em>no</em> because ESP8266 is not an ARM processor or a Windows platform.</p>		<p>The <a href="https://www.espressif.com/en/support/download/sdks-demos?keys=&amp;field_type_tid%5B%5D=14" rel="nofollow noreferrer">Expressif SDK</a> is provided with or without RTOS support.  The RTOS SDK is based on FreeRTOS - FreeRTOS provides much the same features as Keil's RTX, though is not identical.</p>		<p>If you specifically want a WiFi module you can program with Keil's RTX, it will need to be ARM based.  uBlox's WiFi modules are ARM based and the SDKs are based on mbed OS which is itself based on RTX, though with teh CMSIS API rather then the native RTX API.  CMSIS RTOS is an API specification for ARM Cortex-M microcontrollers, rather than an actual RTOS.</p>		<p>While you could use RTX on any ARM based WiFi module that allows user code, where the vendors SDK is already based on an RTOS, you would be making a lot of work for yourself to attempt to change it.  Not least because the vendor may only provide SDK code as object code, so linking to a different RTOS may not be straightforward. In that case the decision to use an alternative RTOS would entail developing the drivers and stack from scratch, which misses te point of using such a module, and would require very complete documentation.</p>		<p>The constraint that only RTX may be used is probably impractical.  The general principles of any RTOS are transferable knowledge,  It would serve you well to be aware of more that one API.</p>	"
