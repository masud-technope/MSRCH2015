thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
53212347,53212347,null,1,-1,Thu Nov 08 16:44:00 EST 2018,10580564,"<p>I am currently experimenting with my Raspberry Pi with Grove sensors and Windows IoT. I am trying to transfer information from the Raspberry Pi to Azure and I receive an error (In line 85). </p>		<p>The code looks this way:</p>		<pre><code>using System;	using System.Collections.Generic;	using System.Linq;	using System.Text;	using System.Net.Http;	using Windows.ApplicationModel.Background;	using GrovePi;	using GrovePi.I2CDevices;	using GrovePi.Sensors;	using GrovePi.Common;	using System.Threading.Tasks;	using Microsoft.Azure.Devices.Client;	using Newtonsoft.Json;		// The Background Application template is documented at http://go.microsoft.com/fwlink/?LinkID=533884&amp;clcid=0x409		namespace GrooveTHS	{	    public sealed class StartupTask : IBackgroundTask	    {	        IRgbLcdDisplay LCDDisplay;	        public void Run(IBackgroundTaskInstance taskInstance)	        {	            IDHTTemperatureAndHumiditySensor sensor = DeviceFactory.Build.DHTTemperatureAndHumiditySensor(Pin.DigitalPin7, DHTModel.Dht11); // pinD7	            LCDDisplay = DeviceFactory.Build.RgbLcdDisplay(); // pinI2C-1	            IRotaryAngleSensor potentiometer = DeviceFactory.Build.RotaryAngleSensor(Pin.AnalogPin2); // pinA2	            ILed red = DeviceFactory.Build.Led(Pin.DigitalPin5); // pinD5	            ILed green = DeviceFactory.Build.Led(Pin.DigitalPin6); // pinD6	            IUltrasonicRangerSensor dsensor = DeviceFactory.Build.UltraSonicSensor(Pin.DigitalPin4); // pin D4		            double angle = 0;	            double tmax = 0;		            while (true)	            {	                Task.Delay(500).Wait();	                angle = potentiometer.SensorValue();	                sensor.Measure();	                string sensortemp = sensor.TemperatureInCelsius.ToString();	                tmax = Math.Floor(angle / 10);	                string sensorvalue = dsensor.MeasureInCentimeters().ToString();	                if (sensor.TemperatureInCelsius &gt; tmax)	                {	                    System.Diagnostics.Debug.WriteLine("Raumtemperatur: " + sensortemp + "C " + "Tmax: " + tmax.ToString() + "C");		                    red.AnalogWrite(Convert.ToByte(240));	                    green.AnalogWrite(Convert.ToByte(0));	                }	                else	                {	                    System.Diagnostics.Debug.WriteLine("Raumtemperatur: " + sensortemp + "C" + "Tmax: " + tmax.ToString() + "C");		                    red.AnalogWrite(Convert.ToByte(0));	                    green.AnalogWrite(Convert.ToByte(240));	                }	                if (dsensor.MeasureInCentimeters() &lt; 150)	                {	                    LCDDisplay.SetBacklightRgb(BitConverter.GetBytes(990)[0], BitConverter.GetBytes(990)[0], BitConverter.GetBytes(990)[0]);	                    LCDDisplay.SetText("Raumtemperatur: " + sensortemp + "C " + "Tmax: " + tmax.ToString() + "C");	                }	                else	                {	                    LCDDisplay.SetText("");	                    LCDDisplay.SetBacklightRgb(BitConverter.GetBytes(0)[0], BitConverter.GetBytes(0)[0], BitConverter.GetBytes(0)[0]);	                }	            }	        }			        static async void SendDeviceToCloudMessagesAsync(long inputDistance)	        {	            string iotHubUri = "IotHubAuburn.azure-devices.net"; // ! put in value !	            string deviceId = "jb"; // ! put in value !	            string deviceKey = "sHGJlQbLLMeMExNaqtvh8/7N7MHWlBZ0ESj2ePahSwQ="; // ! put in value !	            DateTime time = DateTime.UtcNow;		            var deviceClient = DeviceClient.Create(iotHubUri, AuthenticationMethodFactory.CreateAuthenticationWithRegistrySymmetricKey(deviceId, deviceKey), TransportType.Http1);		            JSON jsonStr = new JSON();	            jsonStr.distance = inputDistance;	            jsonStr.time = time;	            jsonStr.deviceId = deviceId;	            var list = JsonConvert.SerializeObject(jsonStr);	            System.Diagnostics.Debug.WriteLine(list);	            var message = new Message(Encoding.UTF8.GetBytes(list));		            await deviceClient.SendEventAsync(message);	        }	    }	}	</code></pre>		<p>And errors I am getting are following (Translated from german language):</p>		<blockquote>	  <p>1) CS0246 The type or a namespacename "JSON" was not found (maybe a	  using-derective or a reprimand assembly is missing).</p>	  	  <p>2) CS0246 The type or a namespacename "JSON" was not found (maybe a	  using-derective or a reprimand assembly is missing).</p>	</blockquote>		<p>Kind regards,</p>		<p>Alex</p>	"
53212347,93312556,53212347,3,3,Thu Nov 08 16:47:00 EST 2018,5817377,"Where are you defining this JSON class?"
53212347,93312628,53212347,3,0,Thu Nov 08 16:50:00 EST 2018,10580564,"I donÂ´t. I just took this code from a code where this class is not defined. So I have made an assumption that this is a build in function."
53212347,93312666,53212347,3,2,Thu Nov 08 16:51:00 EST 2018,3136339,"So your assumption is false. Here `JSON` is a class which must be located in the files around where you took the code (badly named by the way...). You can have a look to Newtonsoft.Json classes here https://www.newtonsoft.com/json/help/html/R_Project_Documentation.htm"
53212347,93312708,53212347,3,0,Thu Nov 08 16:52:00 EST 2018,5817377,"It looks like it's not. You could replace it with an anonymous object, for example:	var json = new object 	{	    distance = inputDistance,	    time = time,	    ...	}		Then do the Newtonsoft.SerializeObject call with this object."
53212347,53220744,53212347,2,1,Fri Nov 09 06:18:00 EST 2018,6601582,"<p>The error means that the "JSON" class definition can't be found.	As @Eric Magers pointed out, you can find from the code source you referenced where is the JSON class defined.</p>		<p>Or you can also define your own "JSON" class, for example, like this:</p>		<pre><code>internal class JSON	{	    public JSON()	    {	    }		    public string deviceId { get; internal set; }	    public long distance { get; internal set; }	    public DateTime time { get; internal set; }	}	</code></pre>		<p>Another method without defining "JSON" class like this:</p>		<pre><code>        string dataBuffer;	        DateTime time = DateTime.UtcNow;	        long inputDistance = 0;	        String deviceId = "MyCSharpDevice";		        dataBuffer = string.Format("{{\"deviceId\":\"{0}\",\"distance\":{1},\"time\":{2}}}", deviceId, inputDistance, time);	        Message message = new Message(Encoding.UTF8.GetBytes(dataBuffer));		        await deviceClient.SendEventAsync(message);	</code></pre>		<p>For sending messages to Azure IoT Hub using HTTP protocol in C# you can reference <a href="https://github.com/Azure/azure-iot-sdk-csharp/blob/master/iothub/device/samples/DeviceClientHttpSample/Program.cs" rel="nofollow noreferrer">this official sample</a>. Note: the official sample is in Console Application and you are using a background application on Windows IoT Core. Application types are different but how to use Azure IoT Hub SDK is the same.</p>	"
