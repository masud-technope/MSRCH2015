thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37239015,37239015,null,1,0,Sun May 15 13:43:00 EDT 2016,4103526,"<p>I have this code snippet.</p>		<pre><code>function handleRequest(req, res)	{	    req.on('data', parseInput);	    res.write(generateInputform());	}		http.createServer(handleRequest).listen(port, ipAddress);	</code></pre>		<p>The req.on callbacks parseInput and does literally what the function's called, it parses the input and sets pins and such. Afterwards another input form is generated and presented to the user.</p>		<p>However, node.js generates the input first and then parses the input... This means the user has to refresh the page to reflect the given commands. Parsing input works, I can see the pins toggle on submit with my logic analyzer.</p>		<p>I seem to be stuck in a rut as I cannot find a simple solution to this answer. The ones that show promise deal with asynchronous delaying which I'd rather avoid. </p>		<p>Perhaps someone can shed a light on this issue?</p>		<p>Here's the complete handleRequest.</p>		<pre><code>function handleRequest(req, res)	{	    switch( req.url )	        {	            case "/markings.css" :	                res.writeHead(200, {'Content-Type': 'text/css'});	                res.end("Literally nothing right now");	                break;	            case "/json" :	                res.writeHead(200, {'Content-Type': 'text/json'});	                res.end(encapsulator(J17_1, J18_1, J19_14, J20_14));	                break;	            case "/index":	                res.writeHead(200, {'Content-Type': 'text/html'});	                res.end(getHTML());	                break;	            case "/":	                // show the user a simple form	                console.log("[200] " + req.method + " to " + req.url);	                res.writeHead(200, "OK", {'Content-Type': 'text/html'});	                switch( req.method )	                    {	                        case 'POST':	                            //Problems between here	                            req.on('data', parseInput);	                            res.write(generateInputform());	                            //And here	                            console.log("Done");	                            res.end();	                            break;	                        case 'GET':	                            console.log("User probably refreshed page without entering anything useful");	                            res.write(generateInputform());	                            console.log("Done");	                            res.end();	                            break;	                        default:	                            console.log("?");	                            res.end();	                            break;	                    }		                //res.end();	                break;	            default:	                res.writeHead(404, {'Content-Type': 'text/html'});	                res.end('&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n404, that means trouble.&lt;br&gt;&lt;a href="http://' +	                        ipAddress + ':' + port + '"&gt;Go back to the index&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;');	                break;	        }	}	</code></pre>		<p>Edit:</p>		<p>Answer found here.	<a href="https://stackoverflow.com/questions/23879942/make-a-blocking-call-to-a-function-in-node-js-required-in-this-case">Make a blocking call to a function in Node.js required in this case?</a></p>		<p>New handleRequest</p>		<pre><code>req.on('data', parseInput);	req.on('end', function()	{	    res.write(generateInputform());	    console.log("Done");	    res.end();	});	</code></pre>	"
37239015,37239171,37239015,2,1,Sun May 15 13:59:00 EDT 2016,3684570,"<p>This is because Node.js (and javascript) runs asynchronously and not synchronously as you are probably used with other languages. This means that while a thread is performing I/O operations in the background the main thread is allowed to run. So in your case the "generateInputform()" is performed while the input is still being parsed.</p>		<p>The solution to your problem is to use callbacks. 	I suggest you to read this tutorial to understand the concept: <a href="http://www.tutorialspoint.com/nodejs/nodejs_callbacks_concept.htm" rel="nofollow">http://www.tutorialspoint.com/nodejs/nodejs_callbacks_concept.htm</a></p>	"
37239015,62008015,37239171,3,0,Sun May 15 14:33:00 EDT 2016,4103526,"I somewhat understand the idea, but I'm not really sure how to apply callbacks without having to rewrite quite a bit. Doesn't this mean I have to callback generateInputform, res.write and res.end to make this work?"
37239015,37239227,37239015,2,1,Sun May 15 14:05:00 EDT 2016,6337248,"<p>You are only defining what happens when the <code>req</code> object receives data:</p>		<pre><code>req.on("data", parseInput);	</code></pre>		<p>This is executed directly:</p>		<pre><code>res.write(generateInputform());	</code></pre>		<p><code>generateInput</code> probably needs to go inside the <code>parseInput</code>.</p>	"
37239015,62007671,37239227,3,0,Sun May 15 14:18:00 EDT 2016,4103526,"I think that nests the code unnecessarily. Might be wrong though."
37239015,62007822,37239227,3,0,Sun May 15 14:24:00 EDT 2016,4103526,"Shoot, I took too long to update the main post... I added the complete function. Point is, it's in a switch case, these two commands can only be executed when req receives data. Or, at least, should be, unless I read things wrong."
37239015,37239849,37239015,2,1,Sun May 15 15:03:00 EDT 2016,6337380,"<p>You are still saying "when you receive data, do this" followed by "now do that". The "now do that" will be executed directly, while the first one only means it is waiting for data. The event that you will receive data happens a lot later, probably in the next loop. (no clue how node does it exactly)</p>	"
37239015,62012187,37239849,3,0,Sun May 15 17:45:00 EDT 2016,4103526,"Imo it shouldn't as it must have data if it even gets there. But ok, it seems it was a lot easier than expected. I had a hunch the solution was stupidly easy."
37239015,62008692,37239849,3,0,Sun May 15 15:04:00 EDT 2016,6337380,"i was user6337248 an hour ago :p"
