thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44055253,44055253,null,1,0,Thu May 18 12:03:00 EDT 2017,2488926,"<p>I am new to IOT and cloud.	For IOT project, we are trying to send on the fly data to cloud for Analytics.	We are using only c, cpp code in my target board. Debian OS.	Every one second, 2 seconds, 3 seconds different types of data will come.	In my target board, I want to use 3rd party libraries(https_client) to send data to the cloud. I need to hit the service(URL) in the cloud with data (using only GET method).	For this, I downloaded https_client code and trying to integrate into my code base. 	In the below 1st make file is original Makefile, 2nd one is only 3rd party s/w Makefile, the 3rd one is modified original Makefile to integrate 3rd party library.	In my target board, we don't have much space, so what is best light weight approach to send data to the cloud? My cloud will support only https and WSS.	Is my approach is correct? Any other easy way is available?</p>		<p>In the modified Makefile I am getting below error.	make: *** No rule to make target <code>https_client-master/https_client-master/main.c', needed by</code>all'.  Stop.</p>		<p>My changes in Makefile is not the standard way. Can anyone review my modified Makefile and correct me.</p>		<p>Thank you for reading. Waiting for your valuable suggestion.</p>		<pre><code>#---------------------------------------------------------------------------	#1.  Below is the original make file of my existing code bas	#---------------------------------------------------------------------------	SOURCES=./SRC/MMC/Main.cpp \	    ./SRC/MMC/ModbusMasterController.cpp \	    ./SRC/DM/DeviceManager.cpp \	    .......	    ./Wrapper/MtrWrapper.cpp 			OBJECTS=$(SOURCES:.cpp=.o)	EXECUTABLE=BusMaster	CFLAGS = -c -w -I/usr/include/libxml2 -I./INC/Common -I./INC/ADM -I./INC/MMC 	-I./INC/DM  -I./INC/CM  -I./INC/MMT -I./INC/MPI -I./INC/MMT/DataProc -	I./INC/MMT/CmdProc -I./INC/MMT/CmdProc/Fileoperations -I./INC/SH -	I./INC/FT_MBUS -I./INC/Timer -I./Wrapper -I./INC/DC -Wall		LDFLAGS = -Bdynamic -lSharedMemory -lMessageQueue -luspepc -lxml2 -	lmbusmaster -lrt		CC=g++			all: $(SOURCES) $(EXECUTABLE)		$(EXECUTABLE): $(OBJECTS)	$(CC) $(OBJECTS) -o $@ $(LDFLAGS) 		.cpp.o:	$(CC) $(CFLAGS) $&lt; -o $@		clean: 	rm -rf $(OBJECTS) $(EXECUTABLE)		#----------------------------------------original make end------------------		#----------------------------------------2. Below is the 3rd pary Library 	Makefile I want to add--------------------------------------	#CROSS = arm-linux-gnueabihf-		MAKE = make		CC = $(CROSS)gcc	LD = $(CROSS)ld	STRIP = $(CROSS)strip		ROOT_DIR = $(CURDIR)	MBEDTLS = $(ROOT_DIR)/mbedtls		CFLAGS = -fPIC -DHAVE_CONFIG_H -D_U_="__attribute__((unused))" -O2	LDFLAGS =		INCLUDES = -I$(MBEDTLS)/include	LIBS = $(MBEDTLS)/library/libmbedx509.a $(MBEDTLS)/library/libmbedtls.a 	$(MBEDTLS)/library/libmbedcrypto.a		SOURCES = main.c https.c		OBJS = $(SOURCES:.c=.o)		.SUFFIXES:.c .o		all: https_client		mbedtls_make:	@for dir in $(MBEDTLS); do \	    $(MAKE) -C $$dir ; \	    if [ $$? != 0 ]; then exit 1; fi; \	done		https_client: mbedtls_make $(OBJS)	@echo Linking: $@ ....	$(CC) -o $@ $(OBJS) $(LDFLAGS) $(LIBS)	$(STRIP) -s $@		.c.o:	@echo Compiling: $&lt; ....	$(CC) -c $(CFLAGS) $(INCLUDES) -o $@ $&lt;		clean: mbedtls_clean	rm -f https_client *.o		mbedtls_clean:	@for dir in $(MBEDTLS); do \	    $(MAKE) -C $$dir clean; \	    if [ $$? != 0 ]; then exit 1; fi; \	done	#----------------------------------------3rd pary Library Makefile end------	#----------------------------------------3. Modified original Makefile to 	add 3rd party library----------------		SOURCES=./SRC/MMC/Main.cpp \	    ./SRC/MMC/ModbusMasterController.cpp \	    ./SRC/DM/DeviceManager.cpp \	    .......	    ./Wrapper/MtrWrapper.cpp 		SOURCES2=./https_client-master/https_client-master/main.c \	    ./https_client-master/https_client-master/https.c		OBJECTS=$(SOURCES1:.cpp=.o)	OBJS=$(SOURCES2:.c=.o)	.SUFFIXES:.c .o	ROOT_DIR = $(CURDIR)	MBEDTLS = $(ROOT_DIR)/https_client-master/https_client-master/mbedtls	EXECUTABLE1=BusMaster	EXECUTABLE2=https_client	CFLAGS = -c -w -I/usr/include/libxml2 -I./INC/Common -I./INC/ADM -I./INC/MMC 	-I./INC/DM  -I./INC/CM  -I./INC/MMT -I./INC/MPI -I./INC/MMT/DataProc -	I./INC/MMT/CmdProc -I./INC/MMT/CmdProc/Fileoperations -I./INC/SH -	I./INC/FT_MBUS -I./INC/Timer -I./Wrapper -I./INC/DC -Wall	CFLAGS2 = -fPIC -DHAVE_CONFIG_H -D_U_="__attribute__((unused))" -O2	INCLUDES = -I$(MBEDTLS)/include	LIBS = $(MBEDTLS)/library/libmbedx509.a $(MBEDTLS)/library/libmbedtls.a 	$(MBEDTLS)/library/libmbedcrypto.a	LDFLAGS = -Bdynamic -lSharedMemory -lMessageQueue -luspepc -lxml2 -	lmbusmaster -lrt	LDFLAGS2 =	STRIP = strip		CC1=g++	CC2=gcc				all: $(SOURCES1) $(EXECUTABLE1) $(SOURCES2) $(EXECUTABLE2)	#$(SOURCES2)	$(EXECUTABLE1): $(OBJECTS)	@echo EXECUTABLE1:	$(CC1) $(OBJECTS) -o $@ $(LDFLAGS)		mbedtls_make:	 @echo mbedtls_make: ....	 @for dir in $(MBEDTLS); do \	    $(MAKE) -C $$dir ; \	    if [ $$? != 0 ]; then exit 1; fi; \	 done		$(EXECUTABLE2): mbedtls_make $(OBJS)	 @echo Linking: $@ ....	 $(CC1) -o $@ $(OBJS) $(LDFLAGS2) $(LIBS)	 $(STRIP) -s $@		.c.o:	 @echo Compiling c: $&lt; ....	 $(CC2) -c $(CFLAGS2) $(INCLUDES) -o $@ $&lt;		.cpp.o:	@echo Compiling cpp: $&lt; ....	$(CC1) $(CFLAGS) $&lt; -o $@		clean: mbedtls_clean	rm -rf $(OBJECTS) $(EXECUTABLE1)	rm -f https_client *.o	mbedtls_clean:	@for dir in $(MBEDTLS); do \	    $(MAKE) -C $$dir clean; \	    if [ $$? != 0 ]; then exit 1; fi; \	done	</code></pre>	"
44055253,75163476,44055253,3,0,Fri May 19 12:13:00 EDT 2017,2805824,"It seems that you just need `libmbedtls.a` and `libmbedcrypto.a`.	You don't need to add much in your `Makefile`, just use `-lmbedcrypto` and `-lmbedtls` to link with these libraries and don't forget to use `-L` to tell the path of these libraries to linker.	Also, I think `http.c` and `main.c` are just an example source code to explain how to use the API's of the both the libraries i.e. `libmbedtls.a` and `libmbedcrypto.a`."
44055253,75135478,44055253,3,0,Thu May 18 18:25:00 EDT 2017,2511795,"It's not how it works. You need to create a static library (or dynamic if you wish) from the 3rd party code. Integration in your project is possible, though it's a bad idea."
