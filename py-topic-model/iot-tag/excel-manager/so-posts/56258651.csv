thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
56258651,56258651,null,1,4,Wed May 22 14:01:00 EDT 2019,2737033,"<p>I have a device with no screen + a microcontroller + a wifi module.</p>		<p>So far so good but basically I'd like to setup my device so it can connect to a wifi network, so I made an app to do that.</p>		<p>The strategy is:</p>		<ul>	<li>put the device in wifi AP mode with a custom ssid like "Device XXXX"</li>	<li>connect to this ssid "Device XXXX"</li>	<li>Ask the user for its home wifi credentials</li>	<li>send the credentials to the device (for example using http) -> <code>POST http://x.x.x.x/wifi_creds "Home" "homepassword"</code></li>	<li>poll the device to check whether it could connect to the "Home" network -> <code>GET http://x.x.x.x/conn_status</code></li>	<li>Once it's connected, stop the AP mode -> <code>POST http://x.x.x.x/wifi_ap_mode 0</code> </li>	</ul>		<p>This works pretty well, but it requires the user to manually connect to the "Device XXXX" ssid.	And actually on Android I can make things even easier by connecting automatically to this ssid, but I need to find the ssid first.</p>		<p>So my idea was to scan all the ssids and to connect to the first one that matches the pattern <code>/^Device [0-9a-zA-Z]{4}/</code> (like Device 1234).</p>		<p>However this doesn't look like a good way to find a hotspot, and there might be a better way.	Also, I don't want to give it a default name as it could conflict with another ssid.</p>		<p>Is there another way to find my device (or my device ssid) without this trick?</p>		<p>I know that Google home is able to connect to a Chromecast allowing you to configure it while the Chromecast is in AP mode with a ssid that looks like "Chromecast XXXX" (<strong>when the bluetooth is disabled</strong>), and I'm not sure how they do it</p>	"
56258651,99206756,56258651,3,1,Fri May 24 17:35:00 EDT 2019,1283554,"Did you look at [Wi-Fi P2P](https://developer.android.com/training/connect-devices-wirelessly/wifi-direct)(Wi-Fi Directâ„¢, not to be confused with ad-hoc network) ?"
56258651,56374943,56258651,2,-2,Thu May 30 08:59:00 EDT 2019,1049903,"<p><strong>*I've assumed (perhaps wrongly) that your headless device is Android based. If it is Android and has Bluetooth, specifically Bluetooth Low Energy and is above Android 5.0:</strong></p>		<p>You could get the device to act as a Bluetooth beacon which constantly broadcasts it's SSID.</p>		<p>So your app first scans for Bluetooth beacons - the beacon payload could be any arbitrary data - perhaps some known hard coded GUID to be sure you're talking to the correct Bluetooth beacon and also embed the SSID.</p>		<p>Now go and scan for the SSID and connect to it.</p>		<p>See this <a href="https://altbeacon.github.io/android-beacon-library/beacon-transmitter.html" rel="nofollow noreferrer">library</a> for details on how to do this.</p>		<p>I believe you can even configure a kind of 'geofence' so that as soon as you come into range of the beacon your app wakes up and does the pairing.</p>	"
