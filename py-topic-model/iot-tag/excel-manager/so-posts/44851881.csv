thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
44851881,44851881,null,1,0,Fri Jun 30 17:19:00 EDT 2017,507662,"<p>I've been reading security articles for several days, but have no formal training in the field. I am developing a configuration and management application for an IoT device. It is meant to be run either on an internal network, or accessed over the web.</p>		<p>My application will be used by IT admins, managers, and factory-floor workers. Depending on the installation, there will be varying levels of infrastructure in place. It could run on a laptop on the floor itself, on a server, or hosted in the cloud. For this reason, <strong>we can not assume that our clients will have the kind of infrastructure you might find at a datacenter or in the cloud, for example CAS or NTP.</strong></p>		<p>Our application provides a REST API for client applications to gather data. We'd like to use roles to restrict what data users can access. I've gathered that a common solution for authentication is to encode the username/pass in the REST Header. However, this is completely insecure unless sent over a secure channel.</p>		<p>As I understand it, SSL Certification Authorities grant certs for a specific domain. Our application will have no set domain, and a different IP depending on the installation. Many web applications do not trust self-signed certs. <strong>It's not clear to me whether a self-signed application is good enough for a typical application-developer who will be consuming our interface.</strong></p>		<p>With this being the case:</p>		<p><strong><em>1) What are my options to set up a secure channel, internally or via the web?</em></strong></p>		<p><strong><em>2) Am I making assumptions about how our product will be used that damage our users' security unnecessarily?</em></strong></p>	"
44851881,44857978,44851881,2,0,Sat Jul 01 06:20:00 EDT 2017,4508593,"<p>Well you can use custom encryption to encrypt the data being sent to the applications.</p>		<p>You can also use JSON web tokens to secure your REST API. <a href="https://en.wikipedia.org/wiki/JSON_Web_Token" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/JSON_Web_Token</a>. The JSON tokens could be generated by a centralized authentication server and included in all requests sent by the client applications to the server</p>	"
