thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
55186849,55186849,null,1,0,Fri Mar 15 16:24:00 EDT 2019,2903906,"<p>I'm currently using Redis in an IoT application to receive a stream of data from an acquisition board; all other communications between the PC and the board is based on Modbus/TPC protocol.</p>		<p>A colleague of mine has recently advanced the proposal to completely remove Modbus, and use Redis for all communications instead.	Supposedly this would require a mixture of variables exchange and PUB/SUB signals.</p>		<p>While the idea is attractive, I was just wondering if someone has already done some research in this direction. </p>	"
55186849,55202115,55186849,2,1,Sat Mar 16 22:28:00 EDT 2019,1870387,"<p>Modbus is a widely used protocol to communicate between industrial devices on one side and computers / gateways on the other side. The device is the server, the computer is the client. Sensor data is polled, changes are pushed.</p>		<p>Redis provides a protocol RESP <a href="https://redis.io/topics/protocol" rel="nofollow noreferrer">https://redis.io/topics/protocol</a> between REDIS clients and the Redis server. The devices would then be clients, and the computer the server.</p>		<p>Replacing modbus with RESP would thus invert the client/server relationship.	While there are advantages (better typed data transfer) its uncommon the select a RESP in that area. MQTT or so would be more common.  </p>	"
55186849,97186538,55202115,3,0,Mon Mar 18 16:29:00 EDT 2019,2903906,"Thank you @Stefan Vaillant for sharing your opinions.		Following your picture:	1) "changes are pushed": with Redis, the device could update variables as needed after any change,	2) "data is polled": with Redis, the application could read the variables periodically to collect changed.	And we might also take advantage of PUB/SUB to add notifications.	Having the device act as a client rather than a server would also be beneficial for us.		So, nothing seems to be lost by dropping Modbus."
55186849,97186545,55202115,3,0,Mon Mar 18 16:29:00 EDT 2019,2903906,"I'm trying to keep the software stack as simple as possible, so I don't mind adding more components (like RabbitMQ, for example) but only if really needed; since Redis is already required for other needs, let me ask: which possible advantages could be offered by MQTT, in your opinion ?"
55186849,97432163,55202115,3,0,Tue Mar 26 09:56:00 EDT 2019,2903906,"Thank you. What you describe is actually our real case: the board is directly connected to the PC running Redis server.	I already had occasion to use this configuration to exchange real-time data with good results, even with limited resources (for example using Raspberry Pi to run the Redis server) but mainly in a LAN.	For completeness, let me say that occasionally we collected signals from a remote board (mainly as a convenience during the board development phase) with no problems."
55186849,97327391,55202115,3,0,Fri Mar 22 12:24:00 EDT 2019,1870387,"I both components (PC and board) are owned by you and always sold together, and they are co-located (i.e. the board is directly attached to PC), the REDIS should IMHO could work. (I am not a REDIS expert).	If one of this is not the case, I would by default use not use REDIS."
55186849,97432167,55202115,3,0,Tue Mar 26 09:56:00 EDT 2019,2903906,"In my opinion the benefits of this solutions are:	(1) given that the redis-server is already available and consolidated, you are really developing two clients, and (2) redis comes with useful tools for monitoring the communication (redis-cli monitor) and measuring (regis-benchmark) data exchange performances.	Having said this, I'll be certainly check the MQTT option you suggested."
