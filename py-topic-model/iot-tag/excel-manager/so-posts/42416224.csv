thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
42416224,42416224,null,1,2,Thu Feb 23 12:49:00 EST 2017,5970123,"<p>I am trying to get the NodeMCU ESP8266 dev board to work with an HC SR04 Ultrasonic Sensor. I keep getting a reading of "0", which is not the reality.</p>		<p>I have the ground and 5v pins of the sensor hooked up to a 5v source, and the Echo and Trigger pins on GPIO pin 4 and 5. In theory, everything should be working, but I just keep getting "0". Perhaps there is something wrong with my code? See below:</p>		<pre><code>import machine	import sys	import time	time.sleep(1) #Just for everything to settle down		while 1:		    pinTrigger = machine.Pin(5, machine.Pin.OUT) #defining the pins	    pinEcho = machine.Pin(4, machine.Pin.IN) #defining the pins		    pinTrigger.high()	    time.sleep(0.00001)	    pinTrigger.low()		    time.sleep(0.5)		    start = time.time()	    stop = time.time()		    while pinEcho ==0:	        start = time.time() #Starting the time when sending out the signal		    while pinTrigger ==1:	        stop = time.time() #Stopping the time when the signal comes back		    elapsed = stop-start #working out the time.		    distance = elapsed * 34000 #multiply by speed of sound to get distance		    distance = distance / 2 #divide by 2 becuase it was there and back		    print ("Distance : %.1f" % distance) 		    sys.exit()	</code></pre>		<p>Please help.</p>	"
42416224,72013382,42416224,3,0,Fri Feb 24 09:01:00 EST 2017,745049,"What is `time.sleep(0.5)` for? Why do you make your code sleep 500 msec?"
42416224,72107990,42416224,3,0,Mon Feb 27 11:10:00 EST 2017,24447,"There are three different offerings on page 3 of that forum thread; the ones from 'jpedrodias' and 'filipmar.mf' are intended to be saved as a Python module and imported into your code using e.g. `import ultrasonic`, but you could just copy and paste their code into yours. The code from 'dbalnaves' should work as is, although he notes it sometimes crashes (also note the indentation he uses is non-standard). All three look pretty similar though - the key appears to be the use of `time.ticks_us` for accurate timing. I think you should be able to get something working based on one of those."
42416224,72109542,42416224,3,0,Mon Feb 27 11:49:00 EST 2017,5970123,"Thanks so much, @nekomatic - I definitely need more experience here! Getting there. I found that with my original code, using time.ticks_us starts to give me a reading. The reading is strange, but I'm getting somewhere. I've noticed that it's either X, or 2X. So basically I'll get approximately 11, or approximately 22. Will try to figure it out."
42416224,71981330,42416224,3,0,Thu Feb 23 14:08:00 EST 2017,5296568,"`while pinEcho ==0: start = time.time()` is very inefficient and you might miss the time window in which the pin is low. In such cases, one would use interrupts. (see http://docs.micropython.org/en/latest/wipy/reference/isr_rules.html). The first step to increase performance would be to replace the computation of the `start` variable by `pass` (i.e. do nothing), and then compute `start` when you're out of the `while` loop. Same for `stop`. The next thing: `time.time()` might have a too low accuracy. The speed of sound is incredibly high, and thus you would need to messure in the microseconds"
42416224,71981412,42416224,3,0,Thu Feb 23 14:10:00 EST 2017,5296568,"range to get accurate results. If `time()` is in milliseconds, that might be too coarse. Print your `stop-start` to the console, if it is `0`, then your timer is not good enough. Again, you need to switch to interrupts, wait on the `FALLING_EDGE` event, then save the current time in microseconds, then wait for the `RISING_EDGE` on the echo pin, save the time, then compute the time difference."
42416224,72017590,42416224,3,0,Fri Feb 24 10:52:00 EST 2017,24447,"Have you looked at this thread on the micropython forum: http://forum.micropython.org/viewtopic.php?f=16&t=2436 ?"
42416224,72113833,42416224,3,0,Mon Feb 27 13:35:00 EST 2017,5970123,"Ok, there's a real problem. Even when I disconnect the sensor, I still get the same reading. :/"
42416224,72110231,42416224,3,0,Mon Feb 27 12:07:00 EST 2017,5970123,"On further investigation, it's just giving me approx the same two readings all the time - think it's a timing issue. I'll revert back. :)"
42416224,72101539,42416224,3,0,Mon Feb 27 08:25:00 EST 2017,5970123,"Thanks so much for all the help guys! @nekomatic - Are these libraries that I refer to in my main.py code, or is this the actual code itself? I'm just trying to figure all this out."
42416224,42577340,42416224,2,1,Fri Mar 03 11:11:00 EST 2017,5970123,"<p>Here is what solved the problem:</p>		<pre><code>import machine	import utime			while True:	  trig=machine.Pin(5, machine.Pin.OUT)	  trig.off()//stop reading	  utime.sleep_us(2)	  trig.on()	  utime.sleep_us(10)	  trig.off()	  echo=machine.Pin(4, machine.Pin.IN)	  while echo.value() == 0:	    pass	  t1 = utime.ticks_us()	  while echo.value() == 1:	    pass	  t2 = utime.ticks_us()	  cm = (t2 - t1) / 58.0	  print(cm)	  utime.sleep(2)	</code></pre>		<p>Elsewhere on the internet they suggested that you put a resistor inbetween the echo and the pin on the NodeMCU board (ESP8266), This made the measurements trip out pretty badly. So right now I have it working 100% with 5v and Ground (to the HC-SR04) connected to my RPi GPIO, and the trigger and echo connected to the NodeMCU board pins. </p>		<p>Another thing to note is that I was doing readings at 1s, (last line of the code), changing that to 2 seconds made the code a lot more accurate.</p>		<p>Hope this helps someone.</p>		<p>Here's the diagram:</p>		<p><a href="https://i.stack.imgur.com/7OCns.png" rel="nofollow noreferrer">Working Diagram</a></p>	"
42416224,77048613,42577340,3,0,Tue Jul 11 14:27:00 EDT 2017,2037637,"I wouldn't advise people to connect a 5v-powered device to something which is only 3.3v-tolerant, but the general approach is very good.  On my robot, I started with this code, then made it a separate function and added timeouts to each of the while loops.  Mine is using a 1k resistor inline with the Echo pin.  Seems pretty robust."
42416224,77125960,42577340,3,0,Thu Jul 13 09:35:00 EDT 2017,5970123,"So happy that this helped you. Would love to see your project!"
42416224,98274316,42577340,3,0,Tue Apr 23 01:05:00 EDT 2019,1620987,""while True: trig=machine.Pin(5, machine.Pin.OUT)"		You are assigning the pin every time you loop. Make the pin assignments outside of your loop"
42416224,57428485,42416224,2,0,Fri Aug 09 10:48:00 EDT 2019,1014320,"<p>Take a look at <a href="https://github.com/rsc1975/micropython-hcsr04" rel="nofollow noreferrer">this library</a> to get it easier to work with HC-SR04 Sensor driver in micropython.</p>	"
