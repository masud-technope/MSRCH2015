thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37531287,37531287,null,1,3,Mon May 30 17:51:00 EDT 2016,3728904,"<p>Is it possible to send an HTTP request without waiting for a response?</p>		<p>I'm working on an IoT project that requires logging of data from sensors. In every setup, there are many sensors, and one central coordinator (Will mostly be implemented with Raspberry Pi) which gathers data from the sensors and sends the data to the server via the internet.</p>		<p>This logging happens every second. Therefore, the sending of data should happen quickly so that the queue does not become too large. If the request doesn't wait for a response (like UDP), it would be much faster.</p>		<p>It is okay if few packets are dropped every now and then.</p>		<p>Also, please do tell me the best way to implement this. Preferably in Java.</p>		<p>The server side is implemented using PHP.</p>		<p>Thanks in advance!</p>		<p>EDIT:	The sensors are wireless, but the tech they use has very little (or no) latency in sending to the coordinator. This coordinator has to send the data over the internet. But, just assume the internet connection is bad. As this is going to be implemented in a remote part of India.</p>	"
37531287,62558259,37531287,3,0,Mon May 30 21:46:00 EDT 2016,3728904,"Or, do you think a different language instead of Java would be better suited for this?"
37531287,62553062,37531287,3,0,Mon May 30 17:54:00 EDT 2016,2216670,"There's always async requests: https://hc.apache.org/httpcomponents-asyncclient-dev/quickstart.html."
37531287,62553149,37531287,3,0,Mon May 30 17:58:00 EDT 2016,3728904,"Yes, but this could be a problem for me. Because, there are many sensors. Each sending data per second. The queue would build up, and become really large, wouldn't it?"
37531287,62553155,37531287,3,0,Mon May 30 17:59:00 EDT 2016,2216670,"Are you wanting to use UDP in a "fire and forget" sort of way? As in, do you care about the server response at all? http://stackoverflow.com/questions/10556829/sending-and-receiving-udp-packets-using-java might be helpful in that case."
37531287,62553190,37531287,3,0,Mon May 30 18:00:00 EDT 2016,4903925,"Some more details are relevant... Is your hardware wired or wireless (mostly due to latency/loss)? is your server local or web based? Is your project native, or do you have libraries used? Also, could you batch content and send several at once (solving the [XY problem](http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem)?)"
37531287,62578011,37531287,3,0,Tue May 31 11:39:00 EDT 2016,2318649,"These sorts of issues mostly arise because you are trying to use http in a way it wasn't designed for - you should look at protocols such as mqtt which are much better designed to meet needs/constraints of IoT, for example these IoT-friendly protocols offer optional reliable delivery and much lower protocol overhead on the communication channel. There are Java, python, javascript clients for mqtt freely available, and brokers like mosquitto."
37531287,62553242,37531287,3,0,Mon May 30 18:02:00 EDT 2016,995891,"Try it, is it actually a problem? With http you basically have to wait for the reply because you usually want to make sure it's 200 OK and you don't get that before the server hasn't processed your request. Your server should probably do the processing async so it can reply with 200 immediately."
37531287,62553402,37531287,3,0,Mon May 30 18:09:00 EDT 2016,3728904,"@Chill, yeah, I don't really care about server response. I just want the data to be logged. All the processing on the data happens periodically and separately."
37531287,62553406,37531287,3,0,Mon May 30 18:09:00 EDT 2016,3728904,"@Bonatti, all the sensors are wireless, but the tech they use has very little (or no) latency in sending to the coordinator. But, just assume the internet connection is very bad. As this is going to be implemented in a remote part of India."
37531287,62553568,37531287,3,0,Mon May 30 18:15:00 EDT 2016,4903925,"Assume then that the latency is irrelevant, but the loss is not. For your problem, you should writte locally the information, and once it reaches a point, such as message size, or time in between messages, it then transfers those informations. Also note that Internet is "bad" on microprocessor devices left in the open. Lots of interferences and low RAM lead to some issues with long HTTP stacks. I am assuming then that the "Internet Server" is a good one, and the internet transfer is ok-ish. In this scenario, either batch the data, or keep an open connection and keep pushing data."
37531287,62553977,37531287,3,0,Mon May 30 18:31:00 EDT 2016,3728904,"Yeah, that seems alright. Is there a good Java framework I can use to implement this?"
37531287,37531335,37531287,2,2,Mon May 30 17:55:00 EDT 2016,150978,"<p>You are looking for an asynchronous HTTP library such as <a href="http://square.github.io/okhttp/" rel="nofollow">OkHttp</a>. It allows to specify a Callback that is executed asynchronous (by a second thread).	Therefore your main thread continues execution.</p>	"
37531287,62553113,37531335,3,0,Mon May 30 17:57:00 EDT 2016,3728904,"Yes, but this could be a problem for me. Because, there are many sensors. Each sending data per second. The queue would build up, and become really large, wouldn't it?"
37531287,62553527,37531335,3,0,Mon May 30 18:14:00 EDT 2016,150978,"That may happen, but if you have realtime requirements Java is the wrong language for you and TCP respectively HTTP the wrong protocol for sub-second transactions over the internet."
37531287,62558244,37531335,3,0,Mon May 30 21:45:00 EDT 2016,3728904,"@Robert, what language and protocail would you suggest?"
37531287,62553595,37531335,3,0,Mon May 30 18:16:00 EDT 2016,7855,"No, the first thread can loop through your log requests, sending all quite quickly. Each of these will set a callback which is activated when the server responds., and in your case, sounds like it will be an empty method. There could be a bit of memory use if the server is slow due to a build-up of callback entries, but it would be minor."
37531287,37531398,37531287,2,1,Mon May 30 18:00:00 EDT 2016,87197,"<p>You can set the TCP timeout for a GET request to less than a second, and keep retriggering the access in a thread. Use more threads for more devices.</p>		<p>Something like:</p>		<pre><code>HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();	con.setRequestMethod("GET");	con.setConnectTimeout(1000); //set timeout to 1 second	if (con.getResponseCode() == HttpURLConnection.HTTP_OK) {	   ...	}	</code></pre>		<p>Sleep the thread for the remainder of 1 second if the access is less than a second. You can consume the results on another thread if you add the results to thread-safe queues. Make sure to handle exceptions.</p>		<p>You can't use UDP with HTTP, HTTP is TCP only.</p>	"
