thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
36560741,36560741,null,1,0,Mon Apr 11 22:58:00 EDT 2016,4139465,"<p>So, I am playing with these temperature sensors and I have a REST API structure to retrieve current temperature. In the front end, I have my angularJs code and I want to be able to see my data real time.</p>		<p>So, say this is my service call</p>		<pre><code>getTemperature: function(){	   return $http({	     method:'GET',	     url:'https://someurltoget/device10/temperature',	     header:{	            'Accept':'application-json'},	     }).then(	      function(response){	         return response;	    },function(error){	         return error;})}	</code></pre>		<p>in my controller, I call this service, and update my view. But, temperature values update themselves in every 60 seconds, and I want this call to update my view accordingly.</p>		<p>However, I am not sure which way would be the best practice to get real-time data simultaneously. </p>		<p>I can only think of using $interval and update the view every 60 sec. but I feel like this is not the best way to resolve this problem.</p>		<p>So, any idea how can this be accomplished in its best way in AngularJS?</p>	"
36560741,60721990,36560741,3,0,Mon Apr 11 23:05:00 EDT 2016,1100874,"I'd say use $timeout"
36560741,36560825,36560741,2,0,Mon Apr 11 23:06:00 EDT 2016,3663518,"<p>There is an HTML5 technology named Web Sockets. Which Mozilla describes as follows:</p>		<blockquote>	  <p><strong>WebSockets</strong> is an advanced technology that makes it possible to open an interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.</p>	</blockquote>		<p>Web Sockets opens a constant flow of data based on events on the server, which means that you no longer need to send a request, the server can listen to an event which can be the creation of a new entry and automatically JavaScript refreshes the data in the browser side.</p>		<p>See this reference for further clarification: <a href="http://www.html5rocks.com/en/tutorials/frameworks/angular-websockets/" rel="nofollow">Writing an AngularJS App with Socket.IO</a></p>		<p>Support reading:	<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" rel="nofollow">Mozilla MDN: WebSockets</a></p>	"
