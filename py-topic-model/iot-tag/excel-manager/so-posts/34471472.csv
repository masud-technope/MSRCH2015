thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
34471472,34471472,null,1,1,Sat Dec 26 12:48:00 EST 2015,517752,"<p>In my current project, we are trying to implement a dashboard that display different sensor values. The following shows functionality. Here, the functionality is -- <code>humidity</code> and <code>temperature</code> sensors periodically sending their values. <code>Displaycontroller</code> receives these values and send it to the dashboard for visualization. </p>		<p><a href="https://i.stack.imgur.com/KvpQn.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/KvpQn.png" alt="enter image description here"></a> 	For experiments purpose and exploring new technologies, We have been implementing the above four components using the following way:</p>		<ul>	<li><code>TemperatureSensor</code>  and <code>HumiditySensor</code> in <code>node.js</code> that publishes the value using MQTT publisher.</li>	<li><code>DisplayController</code> in <code>Node-RED</code> that can receive both temperature and humidity sensor values through MQTT subscriber in <code>NODE-RED</code>.</li>	<li><code>DashBoard</code> in <code>HTML</code> and <code>Javascript</code> </li>	</ul>		<p>Now, here is my question --- How can we connect <code>DisplayController</code> and <code>DashBoard</code> components? The problem could be complicated because <code>Displaycontroller</code> component is implemented in <code>Node-RED</code> and <code>DashBoard</code>is implemented in <code>HTML</code> and <code>JavaScript</code>. Is it possible to connect these components ? If yes, then How can we connect them? </p>		<p>For further clarity, I am adding <code>Dashboard</code> component code. The dashborad component polls continuously <code>DisplayController</code> component (<strong>written in <code>Nodejs</code>, not in Node-RED</strong>) </p>		<pre><code>&lt;html&gt;	&lt;head&gt;	&lt;script	    src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"&gt;&lt;/script&gt;	&lt;script type="text/javascript"	    src="https://www.google.com/jsapi?autoload={	    'modules':[{	      'name':'visualization',	      'version':'1',	      'packages':['corechart']	    }]	  }"&gt;	&lt;/script&gt;	&lt;/head&gt;	&lt;body&gt;	    &lt;div id="chart" style="width: 1500px; height: 700px"&gt;&lt;/div&gt;	    &lt;script&gt;	    $(document).ready(function () {	        var maxDataPoints = 10;	        var chart = new google.visualization.LineChart($('#chart')[0]); 	        var data = google.visualization.arrayToDataTable([ 	            ['Time', 'Temperature','Humidity'],	            [getTime(), 0,0]	        ]); 	        var options = { 	            title: 'Temperature',	            hAxis: {title: 'Time', titleTextStyle: {color: '#333'}}, //Added hAxis and vAxis label	            vAxis: {title: 'TempValue',  minValue: 0, titleTextStyle: {color: '#333'}},	            curveType: 'function',	            animation: {	                duration: 1000,	                easing: 'in'	            },	            legend: {position: 'bottom'}	        };	        function addDataPoint(dataPoint) { 	            if (data.getNumberOfRows() &gt; maxDataPoints) {	                data.removeRow(0);	            }	            data.addRow([getTime(), dataPoint.value,dataPoint.value1]);	            chart.draw(data, options); 	        }	        function getTime() {	            var d = new Date();	            return d.toLocaleTimeString();	        }	        function doPoll() { 	            $.getJSON('http://localhost:8686/temperatureData',	                        function (result) {	                        addDataPoint(result); 	                        setTimeout(doPoll,5000);	                    });	            }	        doPoll();	    });	    &lt;/script&gt;	&lt;/body&gt;	&lt;/html&gt;	</code></pre>	"
34471472,56688278,34471472,3,0,Sat Dec 26 17:11:00 EST 2015,517752,"This problem has been solved now. I have used `dweet.io' for publishing data and `Freeboard' for visualization."
34471472,34471599,34471472,2,1,Sat Dec 26 13:06:00 EST 2015,826532,"<p>I've never used Node-RED, but looking briefly at the documentation, and node-RED offers an API, thus you have several options. The best ones, in my opinion would be </p>		<ul>	<li>wrap your node-RED based application in a node websocket framework, something like SockJS would do. Then, consume this from the client side (aka. the dashboard)</li>	<li>Use node-RED directly from your HTML/Javascript client, it supports it</li>	</ul>		<p>Both options above, presumes that you have done your node-RED in code, using the API, rather than using the visual workbench application. If the latter is the case, you need to figure out how to migrate it to use the API.</p>	"
34471472,56685167,34471599,3,0,Sat Dec 26 13:55:00 EST 2015,517752,"Thanks for the answer. I think option 1 could  be possible Node-RED provides Websocket framework, then the socket can be consume at client side. But, I am not sure - how can I wrap `DisplayController' component in `Node-RED' and receive it from client side. For your reference, I am adding client code that polls `DisplayTempController' (written in `Nodejs`, not in Node-RED)  continuously  and shows data."
34471472,56685281,34471599,3,0,Sat Dec 26 14:03:00 EST 2015,517752,"I have added `Dashboard' component code for your look. Perhaps, you can suggest me the equivalent websocket implementation of it??? Please let me know in case you have suggestions for me!!!"
