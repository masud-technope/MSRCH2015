thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
28619626,28619626,null,1,1,Fri Feb 20 00:23:00 EST 2015,1442498,"<p>I have a fully working Jersey/Rest application server on an embedded device and am in the process of converting it to websockets with atmosphere-jersey to make it available through a firewall.  I've just run into some design questions.</p>		<p>I have around 125 different rest call endpoints.  I setup a websocket to a few of them and transferred data back and forth, similar to rest, but with live pushes.  Since I built a socket with a subscriber for each endpoint, does this mean I'm actually maintaining a websocket on the browser side for each connecting endpoint?  Or is the browser smart enough to hold a single socket open to the same domain and send requests back and forth to each endpoint?  If I am maintaining a lot of websockets, then is there a particular strategy to do all communication with multiple endpoints, using a single websocket?</p>		<p>As well, my project is going to require an intermediary service to match up a login to a device of registered socket listeners.  Is there a container that takes care of matching up logins to a websocket broker, that I could host with my own webservices (must be free)?  Since all of my backend services look like rest, I don't want to have to subscribe each endpoint to the intermediary; so I'm wondering if I need to setup a single websocket broker to handle the traffic and push it out to the endpoints, or if the jersey-atmosphere service is smart enough to handle this?</p>		<p>Edit: added a design question:	In order to communicate between a web browser and a back end server using a single websocket interface; Is there a clean and easy way to generate a POJO for each receiving broker, or will I have to do a JSON conversion as the first step in each class that receives an object?  If I build a javascript message with some sort of key to determine the broker, then I could map the key to a class and do a pojo generation for passing back the object to the handler: but it seems like this is a bit clunky and coupled.</p>	"
