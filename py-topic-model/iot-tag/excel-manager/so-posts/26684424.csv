thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
26684424,26684424,null,1,0,Fri Oct 31 22:37:00 EDT 2014,999530,"<p>I'm making a headless gadget. I would like to use an iOS/Android app to configure/update my device using <code>Bluetooth Low Energy</code>. Prototyping has been relatively easy with things like the <a href="https://www.nordicsemi.com/eng/Products/Bluetooth-Smart-Bluetooth-low-energy/nRF51822" rel="nofollow noreferrer">Nordic nRF51822 BLE chip</a>.</p>		<p>But past proof-of-concept, I'm uncertain how to proceed with regards to authentication. If I sell the device generally and make the mobile app available generally, what's the best way to keep only the people who buy the device (and those they authorize) to manipulate the gadget with their phones? </p>		<p>I  assume other gadget makers in the IoT craze are faced with the same problem.</p>		<p><a href="https://security.stackexchange.com/questions/26356/what-can-an-attacker-do-with-bluetooth-and-how-should-it-be-mitigated">This article over on security exchange</a> was helpful, but seemed more geared to how to position my phone itself as a beacon than the inverse.</p>	"
26684424,26691485,26684424,2,1,Sat Nov 01 18:15:00 EDT 2014,365340,"<p>A quick input is that the authentication concept between the application and the gadget can be based on the unique address similar to mac address (BD_ADDR) that is assigned to each device based on IEEE 802 standard which inturn should be authenticated via a authentication provisioning software involving the purchaser also.</p>	"
26684424,41979376,26691485,3,1,Sat Nov 01 18:34:00 EDT 2014,429063,"Perhaps for convenience de-confliction, but not for authentication/authorization as this is trivially cloned.  Also (at least in some modes) iOS does not expose the hardware address of a peripheral to application software."
