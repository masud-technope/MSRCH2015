thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
43660084,43660084,null,1,1,Thu Apr 27 14:02:00 EDT 2017,787971,"<p>I have a system in which devices use REST to talk to my server which acts as an IOT gateway to register and send events on behalf of the devices. This works fine. Now I would like to add remote command/control to the device for which I am creating a DeviceClient (Using the Java APIs). The device uses the same api key and auth token as the gateway and I can see the device in the Devices view on of the dashboard, yet when I connect() I get a connection failure. Are devices created under a gateway allowed to connect directly to the IOT platform? If so, any suggestions.</p>		<pre><code>Looks like one or more connection parameters are wrong !!!	Apr 27, 2017 9:19:40 AM com.ibm.iotf.client.AbstractClient connect	SEVERE: main: Connecting to Watson IoT Platform failed - one or more connection parameters are wrong !!!	Not authorized to connect (5)	    at org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java:28)	    at org.eclipse.paho.client.mqttv3.internal.ClientState.notifyReceivedAck(ClientState.java:990)	    at org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run(CommsReceiver.java:118)	    at java.lang.Thread.run(Thread.java:745)	</code></pre>		<p>The connection Properties are as follows:</p>		<pre><code>{API-Key=a-sl0l32-..., iotp.enabled=true, type=AudioSensor, 	 Organization-ID=sl0l32, Authentication-Method=token, Authentication-Token=...., 	 id=cognitiveear-gmail.com-sensor-name}	</code></pre>		<p>and my Device is listed in the dashboard as follows:</p>		<pre><code>Device ID cognitiveear-gmail.com-sensor-name	Device Type AudioSensor	Date Added Thursday, April 27, 2017	Added By a-sl0l32-rsmowsjmuj	Connection State Registered Refresh	</code></pre>	"
43660084,74381808,43660084,3,0,Thu Apr 27 20:35:00 EDT 2017,4454969,"You said the device uses the same api key and auth token - I would expect it to connect with device ID and credentials.  If you will provide your 6 character org, I will check the logs for errors."
43660084,74555754,43660084,3,0,Wed May 03 10:18:00 EDT 2017,323303,"You don't use API keys if you connect as a Device.  It is generally not good practice to put API keys on devices. As Valerie says you use your token (or certificate or token+certificate). The java device samples on [github](https://github.com/ibm-messaging/iot-device-samples/tree/master/java/device-samples) would give you a good starting point."
43660084,74649747,43660084,3,0,Fri May 05 12:49:00 EDT 2017,787971,"I do not want to manually register each and every of possibly 100s of devices as the github samples seem to require.  The devices need to register themselves.  Is there a way to register/create the device with the DeviceClient?"
43660084,74404126,43660084,3,0,Fri Apr 28 11:30:00 EDT 2017,787971,"Updated post to include properties used by the DeviceClient."
43660084,43668613,43660084,2,1,Thu Apr 27 21:59:00 EDT 2017,7273763,"<p>When you see this output: "Looks like one or more connection parameters are wrong !!!"  Most likely that the values that your use to connect are wrong.</p>		<p>For gateway, please check out this sample link : <a href="https://github.com/ibm-messaging/iot-gateway-samples/tree/master/java/advanced-gateway-sample" rel="nofollow noreferrer">https://github.com/ibm-messaging/iot-gateway-samples/tree/master/java/advanced-gateway-sample</a> </p>		<p>You will need to set :</p>		<ul>	<li>Organization-ID = [Your Organization ID]</li>	<li>Device-Type = [Your Gateway Device Type]</li>	<li>Device-ID = [Your Gateway Device ID]</li>	<li>Authentication-Method = token</li>	<li>Authentication-Token = [Your Gateway Token]</li>	</ul>		<p>For devices, see <a href="https://github.com/ibm-messaging/iot-device-samples/tree/master/java" rel="nofollow noreferrer">https://github.com/ibm-messaging/iot-device-samples/tree/master/java</a></p>		<p>You will need to set :</p>		<ul>	<li>Organization-ID = [Your Organization ID]</li>	<li>Device-Type = [Your Device Type]</li>	<li>Device-ID = [Your Device ID]</li>	<li>Authentication-Method = token</li>	<li>Authentication-Token = [Your Device Token]</li>	</ul>	"
43660084,74404100,43668613,3,0,Fri Apr 28 11:30:00 EDT 2017,787971,"I've updated the question to show that I am providing the data you suggest."
43660084,43680952,43660084,2,1,Fri Apr 28 13:04:00 EDT 2017,4454969,"<p>Checking the logs I see error for that time period: Token auth failed (Device/gateway token is invalid) so you are providing the wrong credentials for authentication.  </p>		<p>When you set up your device with the platform there is a point where you can create an Authentication Token, if you didn't create it, then it was auto generated for you. This token is not recoverable once the device is created, the last page in the device set up tells you that you will not be able to access the token after that point. So if you don't remember what this token is then you may need to create a new instance of the device and write down the Authentication Token. This Authentication Token is what would be used for the password, while the username as "use-token-auth" stays as the actual username.  </p>		<p>If you automatically registering the devices are you setting the token or letting it be auto-generated?  </p>	"
43660084,43788735,43660084,2,0,Thu May 04 16:55:00 EDT 2017,787971,"<p>I was using the Gateway approach to register my devices since all my sensors talked to my single server. However, now that I want to receive events on the devices, I need to have the devices register directly with the IOT platform. This is primarily so I can get the auth token to create the DeviceClient through which I can then register for events.  To register the device, I used the APIClient.  </p>		<pre><code>    String deviceID = "test-device";	    String deviceTypeID = "test-type";		    Properties props = new Properties(); 	    props.put("Organization-ID","...");	    props.put("API-Key","...");	    props.put("Authentication-Token","...");	    APIClient apiClient = new APIClient(props); 		    // Make sure the device type exists.	    try {	        apiClient.getDeviceType(deviceTypeID);	    } catch (Exception e) { // Device does not exist!	        JsonObject deviceType = new JsonObject();	        deviceType.addProperty("id", deviceTypeID);	        apiClient.addDeviceType(deviceType);	    }	    // Now create the device and get its auth token	    try {	        apiClient.getDevice(deviceTypeID, deviceID);	        apiClient.deleteDevice(deviceTypeID, deviceID);	    } catch (Exception e) { // Device does not exist!	    }	    JsonObject device = new JsonObject();	    device.addProperty("deviceId", deviceID);	    JsonObject resp = apiClient.registerDevice(deviceTypeID, device); 	    String authToken = resp.get("authToken").getAsString();		    // Now create the DeviceClient 	    props.put("Authentication-Method", "token");	    props.put("Authentication-Token", authToken);	    props.put("id", deviceID);	    props.put("type", deviceTypeID);	    DeviceClient devClient = new DeviceClient(props);	    devClient.connect();	    ...	</code></pre>	"
