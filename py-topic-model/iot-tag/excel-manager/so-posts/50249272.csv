thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
50249272,50249272,null,1,2,Wed May 09 08:55:00 EDT 2018,6676444,"<p><strong>Generic information</strong> :-i am designing solution for one of IOT problem approach in which data is continuously  streaming from plc(programmable logic controller),plc have different tags these tags are representation of telemetry data and data will be continuously streaming from these tags, each of devices will have alarm tags which will be 0 or 1 , 1 means there is an equipment failure 	<strong>problem statement</strong>:- i have to read the alarm tag and raise a ticket if any of alarm tag value is 1  and i have to stream these alerts to dashboard and also  i have to maintain the ticket history too,so the operator can update the ticket status too</p>		<p><strong>My solution</strong>:- i am using aws IOT , i am getting data in dynamo db then i am using dynamo db stream to check if any new item is added in alarm table and if it will trigger lambda function (which i have implemented in java) lambda function opens a new ticket in relational database using hibernate.</p>		<p><strong>problem with my approach</strong>:-the aws iot data is continuously streaming in alarm table at a very fast rate and this is opening a lot of connection before it can be closed that's taking my relational database down</p>		<p>please let me know if other good design approach can i adopt?</p>	"
50249272,87554145,50249272,3,0,Thu May 10 08:01:00 EDT 2018,4985580,"So PLCs raise alarms, DynamoDB streams check if its a new alarm, if it is, Lambda adds a ticket to the relational database. Is the problem on the relational database only? I'm not 100% clear on the issue. How many connections are we talking? And out of interest, why are there so many alarms? It sounds like you should have lots of activity at DynamoDB (all PLC data) and very little at your relational database (just the new alarms)."
50249272,50249667,50249272,2,1,Wed May 09 09:14:00 EDT 2018,958616,"<p>USE Amazon Kinesis Analytics to process streaming data. Dynamodb isn't suitable for this.  </p>		<p>Read more <a href="https://aws.amazon.com/blogs/big-data/build-a-visualization-and-monitoring-dashboard-for-iot-data-with-amazon-kinesis-analytics-and-amazon-quicksight/" rel="nofollow noreferrer">here</a>  </p>		<p>Below image will give you an idea for same  </p>		<p><a href="https://i.stack.imgur.com/oQQWk.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/oQQWk.gif" alt="enter image description here"></a></p>	"
50249272,87516672,50249667,3,0,Wed May 09 09:18:00 EDT 2018,6676444,"i have already seen the post, the problem is i don;t have to any kind of analytics on the steaming data, i have to get the data and check the flag and according to the flag i have to open tickets and stream the tickets to ui, i have to also stream the alarms"
50249272,87517044,50249667,3,0,Wed May 09 09:27:00 EDT 2018,6676444,"i mean "taking your db down" means too much connections are getting opened before it can be closed so it's affecting rds instance connection limit and db is not reachable by other api's"
50249272,87517354,50249667,3,0,Wed May 09 09:36:00 EDT 2018,958616,"oh got it,,,posted another answer :)"
50249272,87516771,50249667,3,1,Wed May 09 09:20:00 EDT 2018,958616,"Checking something on data is kind of analytics :)    Hey btw, what do you mean by "taking your db down" in your question?"
50249272,50259872,50249272,2,1,Wed May 09 18:25:00 EDT 2018,3214856,"<p>I agree with raevilman's design of not letting Lambda contact RDS directly.	Since creating a new ticket is not the only task you Lambda function is doing, you are also streaming these alerts to a dashboard. Depending on the streaming rate and the RDS limitations, you may want to split these tasks in multiple queues.</p>		<p>Generic solution: I'd suggest you can push the alarm to a fanout exchange and this exchange will in turn push the alarm to one or more queues as required. You can then batch the alarms and perform multiple writes together without performing connect/disconnect cycle multiple times.</p>		<p>AWS specific Solution: I haven't used SQS so can't really comment on it's architecture. Alternatively, you can create an SNS Topic and publish these alarms to this topic. You can then have SQS queues as subscribers to this topic which in turn will be used for Ticketing and Dashboard purpose independent of each other.</p>		<p>Here again, from Ticketing queue, you can poll messages using Lambda or your own scheduler in batch and process tickets(frequency depending on how time critical alarms are).	You may want to read <a href="https://aws.amazon.com/getting-started/tutorials/send-fanout-event-notifications/" rel="nofollow noreferrer">this tutorial</a> to get some pointers.</p>	"
50249272,87538221,50259872,3,0,Wed May 09 18:46:00 EDT 2018,6676444,"There can be problem with this kind of approach is data rate is very high  5 data points in 1 seconds , so already there is lot of processing going on IOT rule-> dynamo->lambda, if i consider your scenario i would include sqs so flow would be IOT rule-> dynamo->lambda->sqs->lambda , not sure about the poll rate in sqs but i think the data won't be real time as there would be lot of processing ,need to check on the flow"
50249272,87538256,50259872,3,0,Wed May 09 18:47:00 EDT 2018,3214856,"IOT rule-> dynamo->SNS->SQS->lambda"
50249272,50265196,50249272,2,0,Thu May 10 03:51:00 EDT 2018,3044186,"<p>You can control number of lambda function concurrency.  And this will reduce the  number of lambdas that get spinned up based on the dynamo events. Thereby reducing the connections to RDS.</p>		<p><a href="https://aws.amazon.com/blogs/compute/managing-aws-lambda-function-concurrency/" rel="nofollow noreferrer">https://aws.amazon.com/blogs/compute/managing-aws-lambda-function-concurrency/</a></p>		<p>Ofcourse , this will throttle the dynamo events. </p>	"
50249272,87564245,50265196,3,0,Thu May 10 13:12:00 EDT 2018,3044186,"Agreed. It is just bench-marking how many RDS connections you can afford for this process and will they be sufficient to handle the load. If yes, Just set the limit on lambda concurrency and you should be good without adding external horizontal scalability resources like SQS or Kinesis. Does that help?"
50249272,87563395,50265196,3,0,Thu May 10 12:48:00 EDT 2018,6676444,"if i set the limit as 10 so there would be lot of latency in data lag as data rate is very high"
50249272,87551560,50265196,3,0,Thu May 10 06:33:00 EDT 2018,6676444,"I think the concurrency option is available when you have group of lambdas and you want to manage those lambdas, here i am using a single lambda function"
50249272,87561437,50265196,3,0,Thu May 10 11:50:00 EDT 2018,3044186,"You can set it for just one function also. Letâ€™s say when you set 10 as the limit. Your total max rds connections would be 10. https://aws.amazon.com/about-aws/whats-new/2017/11/set-concurrency-limits-on-individual-aws-lambda-functions/"
50249272,50250055,50249272,2,1,Wed May 09 09:35:00 EDT 2018,958616,"<p>Just a proposal.... </p>		<p>From lambda, do not contact RDS,  </p>		<p>Rather push all alarms in AWS SQS  </p>		<p>then you can have one another lambda scheduled for every minute using AWS CloudWatch Rules that will pick all items from AWS SQS and then insert them in RDS at once.  </p>	"
50249272,87520164,50250055,3,0,Wed May 09 10:50:00 EDT 2018,6676444,"i have to try this one"
50249272,87519875,50250055,3,0,Wed May 09 10:42:00 EDT 2018,958616,"accept this one if it helped :P"
50249272,87521041,50250055,3,0,Wed May 09 11:14:00 EDT 2018,958616,"Sure Shashank, i'll delete this and my previous comment then"
50249272,87518205,50250055,3,0,Wed May 09 09:58:00 EDT 2018,6676444,"i also thought of the solution other than cloudwatch rules, i have a question if am polling sqs at 1 minute and suppose if the data rate is less than a second even if i am processing the queue will the queue not overflow?"
50249272,87518504,50250055,3,0,Wed May 09 10:05:00 EDT 2018,958616,"For standard queues, there can be a maximum of 120,000 inflight messages. More info on limits here https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html"
