thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
41830732,41830732,null,1,2,Tue Jan 24 14:28:00 EST 2017,6936305,"<p>I am implementing an IoT gate control system that recieves packets which have two parameters, a value and a timestamp. All messages are recieved and processed in my system in a strict chronological order due to a message broker system.</p>		<p>My program then needs to process the messages according to several rules according to a "best-information" scheme and then correct eventual mistakes that timers can introduce. The goal is to log exact times of when the gate was opened/closed in a manner that is prone to network lag. The purpose of timers is that they predict the outcome to the worker before actually knowing the real outcome, and most times the timer is correct. For instance, the following sequence occour:</p>		<p>Timestamp is the left column, value is the right</p>		<ol>	<li><p>RECIEVED MESSAGE</p>		<p>2017-01-24 10:00:00 - TRUE(1) (this means the gate is open, a log file writes that the gate was opened at this timestamp)</p></li>	<li><p>TIMER</p>		<p>2017-01-24 10:00:30 - After 30(configurable constant value) seconds the timer indicates that the gate should be closed. This triggers the program to write in a log that between 2017-01-24 10:00:00 - 2017-01-24 10:00:30 the gate was opened for 30 seconds.</p></li>	<li><p>RECIEVED MESSAGE</p>		<p>2017-01-24 10:00:15 - FALSE(0) (this means that the gate actually was closed at 10:00:15, this means that the program needs to adjust the log so the entry of opening was 2017-01-24 10:00:00 - 2017-01-24 10:00:15.</p></li>	</ol>		<p>Another problem is also for instance that in the more advanced cases, delays shall be supported. For instance: the gate shall ONLY be logged opened if there was a solid TRUE signal for 10 seconds. This means that when the true signal appear, first an entry is written to the log temporarly saying that the gate is open to show the worker it happened, secondly a timer is started, counting to 10. When the timer reaches 10 seconds, the system writes that the gate was opened 10 seconds. However, 5 minutes after (due to for instance network breakdown), the system recieves a message that the gate actually recieved a FALSE signal 5 seconds after the TRUE signal appeared, meaning that no OPEN entry should be written at all (because it was only 5 seconds between TRUE and FALSE signal). Observe that no other messages was sent between those two so they are still in strict in chronological order. Which is an important factor always assumed here.</p>		<p>I am sure there are other algorithms, patterns and theoretical models for this type of problems when handling time events and rollbacks due to "best-information" errors. But I do not know what they are called and where to find them, can you please direct me to relevant theories, examples and what to look up in order to have a solid model for this type of problem and in turn make a good implementation. Due to its many rules (the gate can also send a combination of pulses and true/false where the combination is used to determine the status) and rollbacks, the implementation very easily ends up a big blob with if-statements, impossible to maintain, extend and support.</p>	"
41830732,41832336,41830732,2,1,Tue Jan 24 15:44:00 EST 2017,2144669,"<p>Event sourcing seems like the way to go here. Instead of storing the authoritative state of the system, store the events and cache the state. When you need to rewrite history, replay the events from the time of the change. I won't try to reproduce the many articles written about event sourcing here.</p>	"
41830732,70935365,41832336,3,0,Thu Jan 26 15:18:00 EST 2017,6936305,"Thank you for the answer. This is what I was looking for. Do you happen to know any example or article that are close to this type of case? The Event sourcing articles I've seen are very general."
41830732,70937525,41832336,3,0,Thu Jan 26 16:05:00 EST 2017,2144669,"@Erik888 I don't, sorry."
