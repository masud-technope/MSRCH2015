thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
37874359,37874359,null,1,4,Fri Jun 17 06:13:00 EDT 2016,3312763,"<p>Using node js i want to create persistent subscription for Azure service bus service topic. right now it is execute only once. Please guide me I am new to this. Thanks in advance. I am using following code to subscribe topic.</p>		<pre><code>var azure = require('azure');		var azureConnection = "Endpoint=sb:My connection string"		var retryOperations = new azure.ExponentialRetryPolicyFilter();	var serviceBusService = azure.createServiceBusService(azureConnection).withFilter(retryOperations);		serviceBusService.receiveSubscriptionMessage('mytopic01', 'mytopicsub', function (error, receivedMessage) {		    if (!error) {	        // // // Message received and deleted	        console.log(receivedMessage);	    }	});	</code></pre>		<p>Also I don't want to use setInterval function. I want to solution if message publish to the topic it should automatically trigger subscription. </p>	"
37874359,63213596,37874359,3,0,Fri Jun 17 10:33:00 EDT 2016,3312763,"I know it is client side method. but we have to manually call this method to get data which is published by the server. I don't want manual call to this it should be automatically called once data published by server.(i.e. Data should be automatically received after server publish data for the subscribed topic.)"
37874359,63213878,37874359,3,0,Fri Jun 17 10:39:00 EDT 2016,410825,"it has to be executed at least once.  in any case node is server side js. it functions like a callback method. I have not personally tried this though."
37874359,63205508,37874359,3,0,Fri Jun 17 06:53:00 EDT 2016,410825,"receiveSubscriptionMessage is the method for receiving methods from a subscription at the subscription client level. Internally it polls the subscription. There is no server side push option."
37874359,37913755,37874359,2,1,Mon Jun 20 02:07:00 EDT 2016,4989668,"<p>Actually, if your client application is an independent node.js application, we usually set up a cycle program to receive message from service bus in loop. 	E.G.</p>		<pre><code>var azure = require('azure');	var sbService = azure.createServiceBusService(&lt;connection_string&gt;);	function checkForMessages(sbService, queueName, callback) {	  sbService.receiveSubscriptionMessage(queueName, { isPeekLock: true }, function (err, lockedMessage) {	    if (err) {	      if (err === 'No messages to receive') {	        console.log('No messages');	      } else {	        callback(err);	      }	    } else {	      callback(null, lockedMessage);	    }	  });	}	function processMessage(sbService, err, lockedMsg) {	  if (err) {	    console.log('Error on Rx: ', err);	  } else {	    console.log('Rx: ', lockedMsg);	    sbService.deleteMessage(lockedMsg, function(err2) {	      if (err2) {	        console.log('Failed to delete message: ', err2);	      } else {	        console.log('Deleted message.');	      }	    })	  }	}	setInterval(checkForMessages.bind(null, sbService, queueName, processMessage.bind(null, sbService)), 5000);	</code></pre>		<p>You can refer to the code sample in the similar scenario at <a href="https://github.com/Azure/azure-sdk-for-node/blob/master/examples/ASM/service-bus.md" rel="nofollow">GitHub</a> provided by Azure Team.</p>		<p>Any further concern, please feel free to let me know.</p>	"
37874359,63337414,37913755,3,0,Tue Jun 21 12:30:00 EDT 2016,3312763,"OK thanks Gary..."
37874359,63328254,37913755,3,0,Tue Jun 21 08:46:00 EDT 2016,3312763,"here you have used setInterval function. I don't want to use that. It will slow down my application. i am sending more than 100 request per second to publish. And want to subscribe the same real time. Using setInterval will be not able to handle that."
37874359,63332231,37913755,3,0,Tue Jun 21 10:21:00 EDT 2016,4989668,"Azure SDK in Node.js implement with Rest APIs, via HTTP protocol, so currently we need to setInterval function. And you can refer to the http://stackoverflow.com/questions/34111382/max-throughput-for-azure-service-bus-queue-with-node-js-library/34127328#34127328 for the receiving performance we discussed before."
