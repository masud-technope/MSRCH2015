thread_ID, Id, ParentId, PostType, Score, CreationDate, OwnerID, Body
43200966,43200966,null,1,2,Tue Apr 04 07:33:00 EDT 2017,7302333,"<p>edit: Add more information, see end</p>		<p>In the C# IoT SDK, I can set certain properties on the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.devices.client.message" rel="nofollow noreferrer">message class</a>. There are no equivalent options at <a href="https://github.com/Azure/azure-iot-sdk-c/blob/master/iothub_client/inc/iothub_message.h" rel="nofollow noreferrer">Message Handles</a> in the C SDK, however.</p>		<p>How can I set the following properties with the C SDK:</p>		<ul>	<li>To</li>	<li>UserId</li>	</ul>		<p>Furthermore, how do I access them on the receiver side in C# via the EventData Class and the C SDK with the EventData Class? In the C# class the message properties are split in system properties and properties, whereas in the C class there are only properties. I can only set these properties in the property map when I use the C IoT Hub.</p>		<p>I can't seem to find entries for the following keys in the system properties map:</p>		<ul>	<li>"user-id"</li>	<li>"to"</li>	</ul>		<p>I can find them in the normal property map, however. When I set them in the C# SDK with the specialized setters, they should appear in the system properties map.</p>		<p>Why does this happen and how can I get this working for both cases? And what are the actual mappings between the C# message class setters and the EventHub system properties and properties?</p>		<p>edit:</p>		<p>Maybe I should be somewhat more specific. I am using the AMQP protocol and according to the standard page 74-78 (Sorry I cannot post a link, due to missing reputation) a message contains "properties", i.e. the properties I can set with SetCorrelationId, and "application properties", which are the properties I can set with the Map_AddOrUpdate method.</p>		<p>I would expect the following:</p>		<p>When receiving the message with the EventHub I expected to have the fields "to" and "user-id" in the system properties map, since those are the names mentioned in the standard. By debugging I was able to see entries in the system properties map which were semantically what I expected, but under different names.</p>		<p>Since that means the properties are probably send, there must be some sort of mapping which corresponds to: </p>		<ol>	<li>AMQP standard property name &lt;-> Eventhub system property name</li>	<li>C SDK "system properties" name (automatically inferred or not) &lt;-> Eventhub system properties name</li>	</ol>	"
43200966,73517949,43200966,3,0,Wed Apr 05 06:53:00 EDT 2017,6601582,"Do you use Event Hub-compatible endpoint of Azure IoT Hub to receive Device-To-Cloud messages in receiver side?"
43200966,73529998,43200966,3,0,Wed Apr 05 11:39:00 EDT 2017,7302333,"I do believe so. I call	eventHubClient = EventHubClient.CreateFromConnectionString(connectionString, iotHubD2cEndpoint);		where 		iotHubD2cEndpoint =  "messages/events""
43200966,43244768,43200966,2,1,Thu Apr 06 02:44:00 EDT 2017,6601582,"<p>You can reference <a href="https://github.com/Azure/azure-iot-sdk-c/blob/master/iothub_client/samples/iothub_client_sample_amqp/iothub_client_sample_amqp.c" rel="nofollow noreferrer">official sample</a> of C SDK and set the properties like this:</p>		<pre><code>                        static char UseridText[15] = "userid prop";	                        static char propUserid[10] = "user-id";	                        static char toText[10] = "to prop";	                        static char propTo[10] = "to";	                        if (Map_AddOrUpdate(propMap, propTo, toText) != MAP_OK)	                        {	                            (void)printf("ERROR: Map_AddOrUpdate Failed!\r\n");	                        }	                        if (Map_AddOrUpdate(propMap, propUserid, UseridText) != MAP_OK)	                        {	                            (void)printf("ERROR: Map_AddOrUpdate Failed!\r\n");	                        }	</code></pre>		<p>And access them on the receiver side in C# via the EventData Class like the following code piece. For complete sample of using compatible endpoint to read device-to-cloud messages you can reference <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-csharp-csharp-getstarted#receive-device-to-cloud-messages" rel="nofollow noreferrer">here</a>.</p>		<pre><code>            if (eventData.Properties.ContainsKey("to"))	            {	                object value;	                eventData.Properties.TryGetValue("to", out value);	                Console.WriteLine("property key: 'to' value: '{0}'", value.ToString());	            }	            if (eventData.Properties.ContainsKey("user-id"))	            {	                object value;	                eventData.Properties.TryGetValue("user-id", out value);	                Console.WriteLine("property key: 'user-id' value: '{0}'", value.ToString());	            }	</code></pre>		<p>As for accessing them on the receiver side in C SDK with the EventData Class you can use <code>EventData_Properties()</code>. This is the <a href="https://github.com/Azure/azure-event-hubs-c/blob/b1b28676ee228c6cf828a4cb3f2505d65c3284a9/eventhub_client/samples/receive/receive.c#L79" rel="nofollow noreferrer">receive sample</a> you can reference.</p>	"
43200966,73575543,43244768,3,0,Thu Apr 06 11:11:00 EDT 2017,7302333,"@RitaHan-MSFT That is why I'm so confused about which entries can be set, are actually set and must be set. There seem to be a couple of inconsistencies between the SDKs and the documentation. I think circumventing the problem via the application properties can work, however."
43200966,73571679,43244768,3,0,Thu Apr 06 09:41:00 EDT 2017,6601582,"My reference ([message format](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messaging#message-format)) is a common message format that supports multiple device-facing protocols (such as MQTT, AMQP, and HTTP). It looks like the possible reason. You propose a good question. These documents actually confused me."
43200966,73571940,43244768,3,0,Thu Apr 06 09:47:00 EDT 2017,6601582,"Yes, you are right. These documents also confused me."
43200966,73566665,43244768,3,0,Thu Apr 06 07:41:00 EDT 2017,2052955,"But wouldn't that only put an entry into the map 'Properties', which is also a system property?"
43200966,73566736,43244768,3,0,Thu Apr 06 07:43:00 EDT 2017,2052955,"That is, instead of assigning the value to a system property, you suggest creating a custom mapping using a string that is equal to the documented name of that property."
43200966,73570120,43244768,3,0,Thu Apr 06 09:06:00 EDT 2017,7302333,"Sadly, this is not quite what I'm looking for although it is a valid work around. I am tempted to accept this due to it's practicality, but I have provided more information about the issue in my original question."
43200966,73570528,43244768,3,0,Thu Apr 06 09:15:00 EDT 2017,6601582,"System properties, both for [azure iot hub message](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messaging#message-format) and [event hub event data](https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.eventdata.systemproperties?view=azureservicebus-4.0.0#Microsoft_ServiceBus_Messaging_EventData_SystemProperties) are predetermined and can't be able to set by user."
43200966,73570825,43244768,3,0,Thu Apr 06 09:22:00 EDT 2017,7302333,"I see. I find it strange, however, that the .NET SDK Message allows setting them. See [here](https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.devices.client.message.to?view=azuredevicesclient-1.2.6#Microsoft_Azure_Devices_Client_Message_To) and [here](https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.devices.client.message.userid?view=azuredevicesclient-1.2.6#Microsoft_Azure_Devices_Client_Message_UserId).		From your references, I still don't know if D2C messages have or can set a UserId. It only mentions the value set for C2D messages."
43200966,73605217,43244768,3,0,Fri Apr 07 01:39:00 EDT 2017,6601582,"You can open an issue [here](https://github.com/azure/azure-iot-sdk-c/issues)."
43200966,43271236,43200966,2,0,Fri Apr 07 06:36:00 EDT 2017,7302333,"<p>2017.03.07:</p>		<p>At the current point in time it seems to be a bug / mismatch between the IoT Hub documentation, the AMQP specification, the C and the C# SDK. See <a href="https://github.com/Azure/azure-iot-sdk-c/issues/111" rel="nofollow noreferrer">github issue</a>.</p>		<p>For a workaround look at @RitaHan-MSFT's answer.</p>	"
